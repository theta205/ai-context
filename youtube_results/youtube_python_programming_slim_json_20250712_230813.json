[
  {
    "title": "Top 10 AI Tools to Supercharge Your Python Programming",
    "channel": "geekyai",
    "url": "https://www.youtube.com/watch?v=O7XFUhmRTvI",
    "published_at": "2024-10-11T16:00:31Z",
    "description": "In this video, we're diving into the top 10 best AI tools that can help beginner Python programmers. These tools will make coding easier, help you write clean code, and even solve programming problems in real-time. Whether you're just starting out or looking to boost your skills, these AI tools will turn you into a coding pro faster than you think. Let‚Äôs explore them together!\n\n*‚ù§Ô∏èSubscribe For  More:üëâ* https://www.youtube.com/channel/UCvmFLEdTaMlzghkCW1hESIA?sub_confirmation=1\n\n#AI #PythonProgr...",
    "has_transcript": true,
    "transcript_preview": "ever wanted to improve your coding\nabilities without going through a\nheadache imagine having a personal\nassistant able to help you debug smarter\ncode faster and even make learning\nenjoyable we're exploring the top 10 AI\nTools in today's video that are not only\nsmart but also beginners friends these\ntools will help you to level up or start\nout and make Python Programming seem\nlike a breeze all set to equip coding as\nyour new superpower let's start now\nnumber one GitHub\nco-pilot imagine having a p...",
    "full_transcript": "ever wanted to improve your coding\nabilities without going through a\nheadache imagine having a personal\nassistant able to help you debug smarter\ncode faster and even make learning\nenjoyable we're exploring the top 10 AI\nTools in today's video that are not only\nsmart but also beginners friends these\ntools will help you to level up or start\nout and make Python Programming seem\nlike a breeze all set to equip coding as\nyour new superpower let's start now\nnumber one GitHub\nco-pilot imagine having a programmer\nfriend who is constantly willing to\npropose the next line of code even\nbefore you know you will need it in\nessence GitHub co-pilot is a strong AI\ndriven tool that lets you type quicker\nby offering intelligent\nrecommendations using GitHub co-pilot\nwill teach you less effort intensive\ncleaner more efficient code writing\ntechniques it's like having a mentor\nleading you over each stage and Prov\niding real time help that accelerates\nyour learning curve what if you find\nyourself caught on a particularly\nchallenging problem next we will discuss\na tool that will enable you to unravel\neven the most messy code equivalent to\ncarrying a genius debugger right at hand\nkeep tuned number two repetz Ghost Rider\nall set to expand on your coding then\nintroduce repetz Ghost Rider this\nartificial intelligence tool generates\nwhole functions and even entire programs\ndepend depending on your input therefore\nguiding your coding efforts it's like\nhaving a supercharged autocomplete\nfunction with style and code context\nawareness ghost rer will let you rapidly\ndevelop code snippits and learn new\ncoding strategies only by interacting\nwith this artificial intelligence tool\nit's a great approach to increase output\nand acquire understanding of best\npractices imagine now that you must view\nyour code in real time and observe how\nit functions we will then explore a\nprogram that converts your code into\nInteractive visuals therefore enabling\nyou to grasp Its Behavior and identify\nand detect problems before they become\ncrises let's keep moving number three\ntab N tab 9 is your go-to tool if you\nwant one that elevates code completion\nthis AI powered autocomplete tool\nprovides context aware recommendations\nthat get better as you work and fits\nquite nicely into your coding setup by\nallowing AI to predict and complete code\nSnippets tab 9 will help you to speed up\nyour work by lowering mistakes and\nincreasing ing your efficiency your\nprocess will be more seamless and\nunderstandable if an AI continuously\nlearns and adjusts to your coding style\nbut if you wish for a program that can\ngenuinely learn from your errors or how\nto code better we will then look at a\ntool that offers comments and advice to\nassist you raising your coding\ncompetency similarly to a personal code\ncoach don't miss this number four code\nGPT want to write code and get answers\nto your programming problems right away\ncode gvt is a great program that uses\nGPT technology to help with coding\nchores and offer explanations for\ndifferent programming ideas it's like\nhaving a professional coder right at\nyour fingertips you'll learn how to\nquickly make code Snippets and get full\nanswers for tricky coding questions with\ncode GPT it helps a lot with learning\nand fixing problems which makes code\nproblems a lot less scary want to know\nabout tools that will not only help you\ncode but also make sure it is perfect\nnext we'll talk about a tool that helps\nyou keep up with high quality code\nstandards and does automatic code\nreviews watch out number five sorcery\nhave you ever wished you had a code\nreviewer who checks every detail sorcery\nis like having your own personal expert\non code quality who looks over your code\nand offers ways to make it better it\nworks with your IDE and gives you input\nin real time to help you write better\ncode sorcery will teach you how to\nimprove your code by giving ideas that\nyou can use to make it easier to read\nand work better this tool makes it easy\nto come up with best practices and clean\nup your code what if you want a tool\nthat shows you your code mistakes right\naway and lets you learn from them now\nwe'll talk about a tool that gives you\nimmediate feedback and chances to learn\nfor every mistake you make in code do\nnot go anywhere number six pilent pilent\nis like having a watchful eye on your\npython code this strong tool checks your\ncode for mistakes make sure you follow\nthe rules for writing code and gives\nideas on how to make your code better if\nyou want to write clean usable python\ncode you have to use this you'll see how\npilent helps you find bugs follow best\npractices and and make your code easier\nto read it detailed reports and ideas\nare very helpful for both new and\nexperienced coders who want to get\nbetter but what if you need a tool that\ndoes more than just look over your code\nwhat if you need one that also helps you\nwrite tests to make sure it works\nperfectly next we'll show you a tool\nthat will make sure your code always\nworks perfectly like having an automatic\ntesting suite number seven kite kite is\nlike having a personal coding assistant\nknowing your coding style as you type\nthis AI powered tool provides clever\ncode compliments and documentation\nsearches it helps you create code faster\nand with less mistakes by analyzing your\ncoding patterns and offering ideas that\ncomplement your particular style kite\nwill help you improve your coding\nefficiency with quick access to\npertinent documentation kite can\nrecommend the next logical lines of code\nfor instance if you're working on a\ndifficult function therefore saving you\ntime spent looking for syntax or method\nnames it even offers demand\ndocumentation so you won't have to leave\nyour Editor to hunt for facts however if\nyou see a tool that not only helps with\ncode completion but also fits very well\ninto your workflow with sophisticated\ndebugging features we will then present\na tool that not only simplifies coding\nbut also debugging and optimizing your\ncode continue watching number eight pie\ncharm pie charm makes your IDE a\nPowerhouse for python development when\npaired with artificial intelligence\nplugins robust features of pie charm are\nwelln when augmented with AI plugins it\nprovides intelligent code completion\nerror detection and automated code\nproduction the these plugins smooth down\nand speed your development process by\noffering real-time feedback and\nsophisticated refactoring features pie\ncharm will help you use tools including\ncode navigation rapid fixes and context\naware suggestions to simplify your\ncoding work for example error detection\nhelps find possible problems before you\never run your code AI driven code\ncompletion can forecast the next actions\ndepending on the situation of your\nproject these elements taken together\nmake coding less prone to mistakes and\nmore effici efficient but you might want\na solution that efficiently manages your\ndevelopment projects and dependencies\ngoing Beyond code writing we will then\ndiscuss a tool that specializes in\nProject organization to guarantee\nscalable and well- maintaining of your\nsoftware number nine codex codex is an\nartificial intelligence model capable of\ncomprehending and creating code in\nseveral programming languages including\npython it is capable of converting\nnatural language explanations into\nuseful code Snippets it is the engine\nunderlying many contemporary coding\ntools from creating code based on basic\ndescriptions to tackling difficult\ncoding challenges codex May assist with\na variety of projects using codex's\nsophisticated features will teach you\nhow to create whole functions or even\napplications with only a few words for\ninstance you can specify a particular\ncapability you desire and codex will\ngenerate code fit for your needs it's\nlike having a really intelligent\nco-coder that can concurrently help with\ncoding and brainstorming curious about a\ntool that transforms coding practice\ninto a dynamic and interactive EXP\nexperience in addition to facilitating\ncode generation we will then explore a\ntool that increases the enjoyment and\nease of learning coding don't skip this\nnumber 10 Jupiter notebooks for python\nprogrammers and data scientists Jupiter\nnotebooks are a must-have adding\nartificial intelligence into these\nnotebooks greatly increases their\ncapacity this strong tool makes\nexperimenting with codes simpler and\nhelps you to get important insights from\nyour data by providing real-time data\nvisualization interactive code execution\nand automated analysis Jupiter notebooks\nwill help you to see how these tools\nsimplify challenging chores the tool\nexecute interactive\nexperiments automatically create visuals\ncatered to your data and offer analysis\nrecommendations this helps you to\nconcentrate on comprehending your\nresults instead of becoming mired in\nhand data processing if you enjoyed\ndiscovering these AI tools subscribe to\nremain up toate on the most recent\ndevelopments in Python Programming got\nany thoughts answer questions regarding\nthese tools please leave a comment below\nI'm eager to hear from you and assist\nyou with any coding problems you may be\nexperiencing continue coding with\nconfidence"
  },
  {
    "title": "Python for Beginners - Learn Coding with Python in 1 Hour",
    "channel": "Programming with Mosh",
    "url": "https://www.youtube.com/watch?v=kqtD5dpn9C8",
    "published_at": "2020-09-16T13:00:20Z",
    "description": "Learn Python basics in just 1 hour! Perfect for beginners interested in AI and coding. ‚ö° Plus, get 6 months of PyCharm FREE with the coupon in the description!\n\n‚ù§Ô∏è Join this channel to get access to perks:\nhttps://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join\n\nüöÄ Want to dive deeper? Check out my Complete Python Mastery course: \n- Full course: https://mosh.link/python-course\n- Subscribe for more Python tutorials like this: https://goo.gl/6PYaGF\n\nüìï Get the FREE goodies:\n- Python cheat shee...",
    "has_transcript": true,
    "transcript_preview": "in this python tutorial you're going to\nlearn everything you need to know to\nstart programming in python if you want\nto learn python programming for data\nscience machine learning or web\ndevelopment this python tutorial is the\nperfect place to learn python you don't\nneed any prior knowledge in python or\nprogramming in general i'm going to\nteach you everything from scratch i'm\nmosh hamadani and i've taught millions\nof people how to code through this\nchannel if you're new here make sure to\nsubscrib...",
    "full_transcript": "in this python tutorial you're going to\nlearn everything you need to know to\nstart programming in python if you want\nto learn python programming for data\nscience machine learning or web\ndevelopment this python tutorial is the\nperfect place to learn python you don't\nneed any prior knowledge in python or\nprogramming in general i'm going to\nteach you everything from scratch i'm\nmosh hamadani and i've taught millions\nof people how to code through this\nchannel if you're new here make sure to\nsubscribe as i upload new videos every\nweek now let's jump in and get started\nall right before we get started let me\ngive you some ideas about what you can\ndo with python that's a very common\nquestion python is a multi-purpose\nprogramming language so you can use it\nfor a variety of different tasks you can\nuse python for machine learning and ai\nin fact python is the number one\nlanguage for machine learning and data\nscience projects python is also very\npopular in web development using python\nand a framework called django you can\nbuild amazing websites here are five\nwebsites powered with python and django\nyoutube instagram spotify dropbox and\npinterest you can also use python in\nautomation with python you can save your\ntime and increase your productivity by\nautomating repetitive tasks so why are\nyou learning python are you learning it\nfor automation for data science or web\ndevelopment let me know in the comment\nsection below\nall right the first thing i want you to\ndo is to head over to python.org to\ndownload the latest version of python so\nyou go to downloads and select the\nlatest version of python\nhere in your downloads folder you should\nsee this package simply double click it\nyou're going to see this python\ninstaller if you're on windows you will\nsee this checkbox over here add python\nto path make sure to check it it's\nreally important otherwise you're not\ngoing to be able to follow this tutorial\nsimply click on continue\nagain\none more time\ni agree with the terms\nand install the latest version of python\nnow here you need to enter the username\npassword of your computer\nso\nlet's do that real quick\nnext you need to install a code editor\nwe use a code editor to write our code\nand execute it the most popular code\neditor for python is pycharm you can get\nit from jetbrains.com\npycharm\nso on this page\nclick on download\nyou should see two different editions\none is the professional edition which is\ncommercial and we also have this\ncommunity edition which is free and open\nsource so we're going to download the\ncommunity edition\nnow in your downloads folder you should\nhave this package let's double click it\nif you're on windows you're going to see\nan installation wizard so simply click\non the next button until you install\npycharm if you're on a mac you need to\ndrag this pycharm and drop it onto the\napplications folder\nnow\nlet's open it\nthe first time you open pycharm you have\nto configure a few settings we don't\nwant to spend time on this so over here\nwe're going to click on skip remaining\nand set defaults\nnow let's create a new project\nover here we can specify the location\nand the name of our python project so\nlet's append hello world to this path\nthis is where our python project is\ngoing to be saved so let's click on\ncreate\nin this window you can see the content\nof our project so here's our hello world\nproject currently we have only one\nfolder inside this project that is vn\nwhich is short for virtual environment\nwe'll talk about virtual environments in\nthe future so currently we don't have\nany python files inside this project a\nreal application can consist of tens or\nhundreds or even thousands of python\nfiles so let's right click on the\nproject name\nand go to new python file we're going to\ncall this file up\nnow we can collapse this project window\nby clicking on this icon so now we have\nmore space let's write our first python\ncode we're going to write print all in\nlowercase then add parentheses\nthen add quotes either single quotes or\ndouble quotes\nand inside this code we're going to\nwrite hello world\nso this is what we call a string a\nstring means a string or sequence of\ncharacters in simple words that means\ntextual data so in python and in many\nother programming languages whenever\nwe're dealing with textual data we\nshould always surround our text with\nquotes\nin python we can use single or double\nquotes\nnow this print you see here is a\nfunction built into python and we can\nuse it to print a message on our\napplication window so let me show you\nhow to run this code\non the top we go to the run menu and\nthen select run\nnote that there is a shortcut associated\nwith this command i always use shortcuts\nbecause they increase my productivity so\nlet's click on this\nnow select app\nand over here\nyou can see this little window this is\nwhat we call the terminal window and it\nshows the output of our program\nso here's the hello world message\nprinted in the terminal window now as\nyou learn more python you will learn how\nto build applications that have a\ngraphical user interface that's an\nadvanced topic so for now let's not\nworry about it\nalright now let's talk about variables\nwe use variables to temporarily store\ndata in a computer's memory for example\nwe can store the price of a product or\nsomeone's name their email their age and\nso on let me show you so\nto declare a variable we start by typing\na name for that variable let's say age\nthen we add an equal sign\nand then we type a value let's say 20.\nso with this we're storing the number 20\nsomewhere in our computer's memory and\nwe're attaching this age as a label for\nthat memory location so now we can read\nthe value at this memory location and\nprint it on the terminal so instead of\nprinting hello world we want to print\nthe value of the age variable\nso i'm going to delete what we have\ninside parenthesis\nand type age note that i'm not adding\nquotes because if i run this program\nwe'll see the text h on the terminal we\ndon't want that we want the value of the\nage variable so let's remove the quote\nand\nprint the value of the age variable\nnow here on the toolbar you can click on\nthis play icon to run your program or\nyou can use the shortcut that i showed\nyou in the last video so the shortcut is\nover here on a mac that's ctrl shift and\nr\nso\nthere you go\nnow you can see the value of the age\nvariable\nnow we can also change the value of a\nvariable for example on line 2\nwe can set 8 to 30.\nnow when we run our program\nwe see 30. so as you can see our program\ngets executed from top to bottom\nso this is how we can declare and use a\nvariable now let's look at a few more\nexamples\nso i'm going to declare\nanother variable called price\nand set it to 19.95\nso in python we can use numbers with a\ndecimal point or\nwhole numbers we can also declare a\nvariable and assign it a string value so\nlet's say first underline name so if you\nwant to use multiple words in the name\nof a variable we should separate them\nusing an underscore this makes our code\nmore readable see what would happen if i\ndidn't use this underline\nthis is not easily readable so we always\nseparate multiple words by an underscore\nnow we set this to a string so we can\nuse single quotes or\ndouble quotes let's say march\nwe also have a special type of value\ncalled a boolean value which can be true\nor false that is like yes or no in\nenglish let me show you so i'm going to\ndeclare another variable called is\nonline and set it to true\nwe could also set it to false what we\nhave here is called a boolean value\nnow note that python is a case sensitive\nlanguage so it's sensitive to lowercase\nand uppercase letters in this case if i\nuse a lowercase f\nwe can see an error over here because\nthis is not recognized in python\nso false with a capital f is a special\nkeyword in python that represents the\nboolean false value\nso this is how we can declare and use\nvariables in python\nall right now here's a little exercise\nfor you\nimagine we want to write a program for a\nhospital so we're going to check in a\npatient named john smith he's 20 years\nold and is a new patient i want you to\ndeclare a few variables to store these\nvalues use the comment box below to\nshare your code with others\nin this tutorial i'm going to show you\nhow to receive input from the user so in\npython we have another built-in function\ncalled input we use this to read a value\nfrom the terminal window let me show you\nso we add parenthesis\nthen we type in a string here we can\ntype a message like what is your name we\nhad a question mark followed by a space\nyou will see why we need this space in a\nsecond so let's run this program\nwe get this message now we have to enter\na value so we click over here\nnow you can see that the carrot is\nseparated from the question mark this is\nbecause of the white space that we added\nover here\nso now we have to type a value let's say\njohn when we press enter\nthis function will return the value that\nwe entered in the terminal window so we\ncan get that value and store it in a\nvariable so let's declare a variable\ncalled name and set it to the return\nvalue of the input function\nnow we can print a greeting message for\nthis user so we use the print function\nwe say hello\nwe had a space\nnow after the string we want to add the\nvalue of the name variable so we use a\nplus sign\nand then type name\nwhat we are doing here is called string\nconcatenation so we're combining this\nstring with another string\nnow let's run our program and see what\nhappens so what is your name\nmosh\nnow\nwe get this message hello mosh\nso this is how we can use the input\nfunction in python\nyou'll learn about the three types of\ndata in python we have numbers\nstrings and booleans now there are times\nyou want to convert the value of a\nvariable from one type to another let me\nshow you so we're going to use our input\nfunction\nto read the user's birth year so enter\nyour birth here\nnow this input function is going to\nreturn a value so we can store it in a\nvariable called\nbirth underline year\nokay\nnow let's write code to calculate the\nage of this user so we write an\nexpression like this currently we are in\nthe year 2020 so 2020 minus\nbirth year\nthis expression or piece of code is\ngoing to produce a value so once again\nwe can store that value in a variable\nlet's call that variable age\nnow let's print age\non the terminal\nlet's run our program and see what\nhappens\nso\nmy birth year is 1982.\nenter oops our program crashed so\nwhenever you see this red message that\nindicates an error so this error\noccurred in this file\nthat is our app.pi on line two\nright below that you can see the piece\nof code that generated this error\nso that is this expression 2020 minus\nbirth year now below that you can see\nthe type of error so here we have\nunsupported types for subtraction\nwe have int\nand stir what are these well this end is\nshort for integer and that represents a\nwhole number in programming so\n2020 is an example of an integer\nnow birth year is an example of a string\nbecause whenever we call the input\nfunction this function would return a\nvalue as a string even if we enter a\nnumber in other words when i entered\n1982 this input function returned a\nstring with these characters 1982 so\nthis string is different from the number\n1982 they're completely different types\nso in this case\nlet me delete these lines\nthe reason we got this error is that we\ntry to subtract a string from an integer\nso our code looks like this\n1982\nnow python doesn't know how to subtract\na string from an integer\nso to solve this problem we need to\nconvert this string to an integer\nnow in python we have a bunch of\nbuilt-in functions for converting the\ntypes of our variables so\nwe have this end function\nwe can pass our burst here to it\nand this will return the new numeric\nrepresentation of the birth year\nso to solve this problem\nwe need to replace\nthe string\nwith the end function\nso let's see what's going on here on the\nfirst line we call the input function\nthis returns a string\non the second line we pass the string to\nour end function the in function will\nreturn the numeric representation of the\nburst year\nthen\nwe subtract it from 2020 we get the age\nand store it in the age variable now\nlet's run our program\nso\n1982\nand there you go i'm 38 years old\nso this is how the in function works now\nwe also have another built-in function\ncalled float that is for converting a\nvalue to a floating point number a\nfloating point number in python and\nother programming languages is a number\nwith a decimal point so\n10 is an integer and 10.1 is a float\nso we have int we have float and we also\nhave bool for converting a value to a\nboolean\nand finally we have stir for converting\na value to a string so these are the\nbuilt-in functions for converting the\ntype of our variables\nnow here's a little exercise for you i\nwant you to write a basic calculator\nprogram so here we have to enter two\nnumbers we can type a whole number or a\nnumber with a decimal point\nand then our program will print the sum\nof these two numbers\nso pause the video spend two minutes on\nthis exercise and then see my solution\nall right first we're going to call our\ninput function to read the first number\nwe get the result and store it in a\nvariable called first\nnow let's declare\nanother variable called second and read\nthe second number\nnow\nwe calculate the sum\nso that is first plus second\nnow let's see what happens when we print\nsum on the terminal\nso i enter 10 and 20\nbut instead of 30 we get 10 20. this is\nbecause we're combining or concatenating\ntwo strings so\nas i told you before the input function\nreturns a string so\nthis line will be equivalent to first\nequals 10. we're dealing with a string\nnot an integer\nsimilarly\nsecond is going to be\n20 as a string so when we combine two\nstrings 10 plus 20 will get\n10 20 because we're dealing with textual\ndata okay so to solve this problem\nwe need to convert the values we read to\ntheir numeric representation so over\nhere\nwe're going to pass\nfirst to our int function\nand here as well\nnow let's run our program\nso we enter 10 and 20 we get 30. what if\nwe enter a floating point number so 10.1\nand 20.\nwe got an error\nso to solve this problem\nwe need to treat both these values as\nfloats so instead of the in function\nwe're going to use the float function\nnow let's run our program one more time\nwe enter a whole number and a floating\npoint number so the result is correct\nnow let's add a label over here so sum\nis\nplus sum\nlet's run our program\none more time 10 and 20.\nonce again we got an error the error is\nsaying that python can only concatenate\nstrings not floats to strings\nso on line four we have a string we're\nconcatenating this with a float because\nthe result of this expression is a\nfloating point number we're adding two\nfloats so the result is a float as well\nso python doesn't know how to evaluate\ncode like this\nit doesn't know how to concatenate a\nfloat\nto a string to solve this problem\nwe need to convert sum to your string so\nthis is where\nwe use the stir function\nnow let's run the program again so\n10 plus 20.1 and here's the result\nand one last thing\nin this example i'm calling the float\nfunction at the time we want to\ncalculate the sum of these two numbers\nbut this is not a requirement we can\ncall the float function\nover here so this input function returns\na string we can pass that string to our\nfloat function take a look so float\nparenthesis like this\nso the value that we're passing to the\nfloat function is the value that is\nreturned from the input function\nsimilarly\nwe call the float function over here\nnow\nwe can change this expression to first\nplus second that is another way to write\nthis piece of code\nso type conversion is important in\npython and other programming languages\nthere are times you need to convert the\ntype of variable to a different type\nin this tutorial i'm going to show you a\nbunch of cool things you can do with\nstrings in python so let's start by\ndeclaring a variable called course\nand set it to python for\nbeginners\nnow this string that we have over here\nis technically an object an object in\npython is like an object in the real\nworld as a metaphor think of the remote\ncontrol of your tv this remote control\nis an object and it has a bunch of\ncapabilities it has a bunch of buttons\nfor turning your tv on turning it off\nchanging the volume and so on now in\nthis program this course variable is\nstoring a string object this string\nobject has a bunch of capabilities so if\nwe type\ncourse dot you can see all the\ncapabilities available in a string\nobject these are basically functions\nthat you can call just like the print or\ninput functions the difference is that\nthe print and input functions are\ngeneral purpose functions they don't\nbelong to a particular object but the\nfunctions you see over here are specific\nto strings now more accurately we refer\nto these as methods so when a function\nis part of an object we refer to that\nfunction as a method\nso let's look at a few examples here we\nhave a function or a method called upper\nand we use that to convert a string to\nuppercase so if we print\ncourse.upper\nand run this program they can see our\ncourse in uppercase\npretty useful\nnow what you need to understand here is\nthat this upper method does not change\nour original string it will return a new\nstring so right after this if we print\ncourse\nyou can see that our course variable is\nnot affected so the upper method returns\na new string\nnow similarly we have another method\ncalled lower for converting a string to\nlowercase we have a method called find\nto see if our string contains a\ncharacter or a sequence of characters\nfor example here we can pass\ny\nand this will return the index of the\nfirst occurrence of y in our string so\nin python the index of the first\ncharacter in a string is 0. so here we\nhave 0 1 2 3 4 and so on so when we run\nthis program you're going to see one on\nthe terminal because the index of y is\n1. take a look first i'm going to delete\nthis line we don't need it anymore also\nlet's do this line let's run the program\nthere you go\nnow as i told you before python is\nsensitive to lowercase and uppercase\nletters so if i pass an uppercase y here\nthis find method returns negative 1\nbecause we don't have an uppercase y in\nthis string we can also pass a sequence\nof characters for example 4. so this\nwill return the index of the word 4.\ntake a look\nso it's 7.\nnow there are times we want to replace\nsomething in a string with something\nelse\nto do that we use the replace method\nreplace\nso we can replace 4\nwith\na string containing the number 4. take a\nlook\nso python for beginners\nobviously\nif you look for a character or a\nsequence of characters that don't exist\nin our string nothing is going to happen\nfor example if we try to replace x with\n4 obviously we don't have x here so\nnothing is going to happen\nalso just like the upper method the\nreplace method is not going to modify\nour original string so it's going to\nreturn a new string this is because\nstrings in python and many other\nprogramming languages are immutable we\ncannot change them once we create them\nwhenever we want to change your string\nwe'll end up with a new string object in\nmemory\nnow one last thing i want to cover in\nthis tutorial there are times you want\nto see if your string contains a\ncharacter or a sequence of characters\none way to do that is using the find\nmethod that we talked about so let's see\nif our string\ncontains python\nnow when we run this program\nthat is the index of the first\noccurrence of the word python in our\nstring now in python we can also use the\nin operator so we can write an\nexpression like this\nwe type a string\npython then we type in this is a special\nkeyword in python this is what we call\nthe in operator\nso after that we type the name of our\nvariable\nso with this expression we're checking\nto see if we have python in course as\nyou can see python code is very readable\nit's like plain english so when we run\nthis program\ninstead of seeing the index of the first\noccurrence of python we see a boolean\nvalue this is more desirable in a lot of\ncases\nnext we're going to look at arithmetic\noperations\nin this tutorial i'm going to show you\nthe arithmetic operators that we have in\npython these are the same arithmetic\noperators that we have in math for\nexample we can add numbers we can\nsubtract them multiply them and so on so\nlet's print\n10 plus 3. let me run this program we\nhave 13.\nso this is the addition operator we also\nhave subtraction\nwe have multiplication\nand division now technically we have two\ndifferent types of division operators we\nhave a division with one slash and\nanother with two slashes let's look at\nthe differences if you use a single\nslash\nwe get a floating point number that is a\nnumber with a decimal point but if we\nuse double slashes\nwe get\nan integer a whole number we also have\nthe modulus operator that is indicated\nby a percent sign and this returns the\nremainder of the division of ten by\nthree so\nthat is one and finally we have the\nexponent operator that is indicated by\ntwo asterisks so this is 10 to the power\nof three so when we run this we get a\nthousand\nnow for all these operators that you saw\nwe have an augmented assignment operator\nlet me explain what it means so let's\nsay we have a variable called x\nand we set it to 10.\nnow we want to increment the value of x\nby 3. so we have to write code like this\nx\nequals x plus 3. when python executes\nthis code it's going to evaluate this\nexpression or this piece of code the\nresult of this expression is 10 plus 3\nwhich is 13. then it will store 13 in\nthe x\nnow there is another way to achieve the\nsame result using less code we can type\nx plus equal three\nwhat we have on line three is exactly\nidentical to what we have on line two so\nwhat we have here is called the\naugmented assignment operator so we have\nthis assignment operator but we have\naugmented or enhanced it\nnow here we can also use\nsubtraction to decrease the value of x\nby 3 we can use multiplication and so on\nso these are the arithmetic operators in\npython\nall right let me ask you a question i'm\ngoing to declare a variable called x and\nset it to 10 plus 3 times 2. what do you\nthink is the result of this expression\nthis is a basic math question that\nunfortunately a lot of people fail to\nanswer\nthe answer is 16. here's the reason in\nmath we have this concept called\noperator precedence and that determines\nthe order in which these operators are\napplied so multiplication and division\nhave a higher order so this part of the\nexpression gets evaluated first so 2\ntimes 3 is 6\nand then the result is added to 10. that\nis why the result of this expression is\n16. now in python operator precedence is\nexactly like math but we can always\nchange it using parenthesis for example\nin this expression if you want 10 plus 3\nto be evaluated first we can wrap it in\nparenthesis\nso\nlike this now when we execute this code\nwe're going to see 26 because 10 plus 3\nis 13 and that divided by 2 is 26. let's\nverify this so print x\nand we get 26.\nso you learn about the arithmetic\noperators in python now in python we\nhave another set of operators called\ncomparison operators we use these\noperators to compare values let me show\nyou so i'm going to declare a variable\ncalled x\nand set it to an expression like this 3\nis greater than 2. so what we have here\nthis piece of code this expression is\ncalled a boolean expression because it\nproduces a boolean value so in this case\nbecause 3 is greater than 2 the result\nof this expression is the boolean true\nso if we print x\nwe get true on the terminal\nso here is the greater than operator we\nalso have greater than or equal to we\nhave less than we have less than or\nequal to\nhere is the equality operator which is\nindicated by two equal signs do not\nconfuse this with the assignment\noperator so here we're comparing three\nand two for equality so if we run our\nprogram\nwe see false because 3\ndoes not equal to 2.\nso here's the equality operator we also\nhave\nthe not equality operator that is\nindicated by an exclamation mark\nfollowed by an equal sign\nso let's quickly recap\nhere are the comparison operators we\nhave in python greater than greater than\nor equal to less than less than or equal\nto\nequal and not equal\nthese operators are extremely important\nin real python programs because quite\noften we have to compare values to\nevaluate certain conditions you're going\nto see that soon\nin python we have another set of\noperators called logical operators we\nuse these operators to build complex\nrules and conditions let me show you so\ni'm going to declare a variable called\nprice and set it to 25.\nnow let's print\na boolean expression like this\nprice is greater than 10.\nnow let's say we want to check to see if\nthe price is between 10 and 30. this is\nwhere we use the logical and operator so\nwe type and and right after that we type\nanother boolean expression surprise less\nthan 30. so with this and operator if\nboth these boolean expressions return\ntrue the result of this entire\nexpression will be true take a look so\nin this case we get true\nbecause the price is between 10 and 30\ndollars\nwe also have\nthe or operator\nwith the or operator if at least one of\nthese boolean expressions returns true\nthen the result of this entire\nexpression will be true\nto demonstrate this i'm going to change\nprice to 5. let's see how python is\ngoing to execute this code so first it's\ngoing to look at this boolean expression\nis price greater than 10 no it's not so\nit will keep going\nthen it will look at the second boolean\nexpression is price less than 30 it sure\nis so the result of this entire\nexpression will be true take a look\nthere you go\nwe also have the not operator which\nbasically inverses any values that you\ngive it let me show you so\nwe're going to have one boolean\nexpression price greater than 10. the\nresult of this expression is false\nnow if you apply the not operator\nthis will inverse false to true so when\nwe run the program we get true\nso let's quickly recap in python we have\nthree logical operators we have logical\nand which returns true if both\nexpressions return true\nwe have logical or which returns true if\nat least one expression returns true and\nwe have not which inverses any value\nthat we give it\nin this tutorial we're going to talk\nabout if statements in python we use if\nstatements to make decisions in our\nprograms for example we can declare a\nvariable called temperature and\ndepending on the value of this variable\nwe can print different messages on the\nterminal let me show you\nso here's our temperature variable\nwe set it to 35.\nnow let's say if temperature is greater\nthan 30 we want to print a message\nsaying it's a hot day so we type if\nthen we type a condition and this is\nwhere we use our comparison operators so\nwe type temperature\ngreater than 30.\nthen so we add a colon and see what\nhappens when i press enter now\nthe character is indented and this\nrepresents a block of code so the code\nthat we write over here will be executed\nif this condition is true otherwise it's\nnot going to be executed let me show you\nso\nwe're going to print\nit's a hot day\nand by the way note that here i've\nsurrounded the string with double quotes\nbecause here we have a single quote as\nan apostrophe so i couldn't declare a\nstring like this with single quotes if i\ntyped it's a hot day\nlook python gets confused because it\nthinks this single code represents the\nend of our string so it doesn't\nrecognize the subsequent characters okay\nso that's why we use\ndouble quotes here\nso we can have an apostrophe in our\nstring\nso it's a hot day\nnow if i press enter again\nthe carrot is indented so the code that\nright here will be part of our if block\nand it will get executed if this\ncondition is true so here we can print\na second message drink plenty of water\nnow to terminate this block we press\nenter and then press shift and tab\nthe carrot is no longer indented so the\ncode that we write here will always get\nexecuted no matter what whether this\ncondition is true or not\nnow in c based programming languages\nlike c plus c sharp java and javascript\nwe present a block of code using curly\nbraces so\nyou start a block of code using a left\nbrace\nand then end it using a right brace in\npython we don't have curly braces so we\nuse indentation to represent a block of\ncode okay\nso\nin this case\nthese two lines are indented and that\nmeans they are part of this block of\ncode\nnow let's run the program and see what\nhappens\nso we see these two messages because the\ntemperature is greater than 30.\nnow\nif i change the temperature to 25\nand run the program again we don't see\nanything okay\nnow\nafter this block let's print\ndone\nbecause this code is not indented it\nwill always get executed it's not part\nof our if block okay so take a look\nhere's the down message\nnow\nlet's add a second condition so if\ntemperature is not greater than 30 that\nmeans it's less than or equal to 30. so\ni'm gonna add a second condition so if\nthe temperature is between 20 and 30 i\nwant to print it's a nice day\nso here we type l if\nthat is short for else if\nand here we type a second condition\nso temperature greater than 20.\nwe add a colon press enter now we have a\nnew block\nso here we can print\nit's a nice day\nso if this condition is true that means\nthe temperature\nis greater than 20 and less than or\nequal to 30. now what we have here is\ncalled a comment that is why it's grayed\nout it's not real code it's just some\nnote that we add to our program python\nis not going to execute this so whenever\nwe type a pound sign what we have after\nis treated as a comment okay\nso\nif this condition is true then we're\ngoing to see this message on the\nterminal let's run our program and\nverify this\nthere you go the temperature is 25\nthat's why we see this message\nnow we can have as many conditions as we\nwant there are no limitations okay\nso let's add another condition\nl if\ntemperature is greater than 10\nthen\nwe're going to print\nit's a bit cold\nnow in this case if this condition is\ntrue that means the temperature is\ngreater than 10\nand less than or equal to 20.\nnow finally if the temperature is less\nthan 10 let's print a message saying\nit's a cold day\nso\nhere we type else then we add a colon\nand now we have a new block\nso this code will get executed if none\nof the above conditions are true\nso here we can print\nit's called\nso this is how we use if statements to\nmake decisions in our programs\nhere's a great exercise for you to\npractice what you have learned so far i\nwant you to write a weight converter\nprogram like this\nso this program is asking me my weight i\nenter 170.\nnext it's asking me if the weight is in\nkilograms or pounds so i can type k for\nkilograms or l for pounds i can type a\nlowercase l or an uppercase l it doesn't\nmatter so let's go with a lowercase l\nnow it tells me weight in kilogram is\n76.5\nso go ahead and spend 5 minutes on this\nexercise you can use the comment box\nbelow to share your code with others and\nthen when you're done come back see my\nsolution\nso first we call our input function to\nask the first question\nwait we get the result and store it in a\nvariable called weight\nnext we call the input function one more\ntime to ask the second question\nis this in kilogram\nor\npounds we get the result and store it in\na variable called unit\nthis is where we're going to use an if\nstatement\nso\nwe want to check to see if unit\nequals\nk\nthen we should convert the weight to\npounds and print it on a terminal\nhowever\nwith this code if i type a lowercase k\nthis condition is not going to be true\nbecause earlier i told you that python\nis a case sensitive language\nso\nwe need to convert this string to\nuppercase earlier we talked about string\nmethods so if we type dot we can see all\nthe functions or methods available in a\nstring object so we use the upper method\nand this returns a new string in case\nnow if this condition is true first we\nneed to convert the weight to pounds so\nwe declare a new variable called\nconverted\nget the weight and divide it by 0.45\nand then we can print this on a terminal\nso\nwe say weight\nin pounds is\nthen we append converted\nnow to terminate this block we press\nshift and tab\nelse colon\nso if this condition is not true that\nmeans the weight was entered in pounds\nso we need to convert it to kilograms\nonce again we declare a variable\nconverted and set it to weight times\n0.45\nand then we print\nweight in kilograms\nand here we concatenate\nthis string with converter all right now\nwe need to terminate this block so we\npress enter then shift and tab good\nnow if we run this program we're going\nto see an error let me show you so let's\nrun it\nhere i'm going to enter 170\nthen i type a lowercase l\nokay here's an error\ncan't multiply sequence by non-end of\ntype float so this is where we got this\nerror when we try to multiply the weight\nby 0.45\nso\nthat is line seven in our code now the\nreason this is happening is because the\nwait variable is storing a string object\nbecause earlier i told you the input\nfunction always returns a string so here\nwe need to convert the weight\nto a number we can either use the end or\nthe float function\nlet's run the program one more time\nso\n170\nin pounds\nhere's the second error can only\nconcatenate string not float to string\nand that error occurred\nover here\nwhen we try to print the weight in\nkilograms so\nlook at line seven\nin this case weight as an integer we are\nmultiplying an integer by a float and\nthe result of this operation is going to\nbe a float\nnow on line eight we are trying to\nconcatenate or combine a string with a\nfloat and python doesn't know how to\nexecute this code\nto solve this problem we need to convert\nthis flow to a string so here we use the\nbuilt-in stir function\nlet's run the program and see what\nhappens\nso\n170 in pounds and here's my weight in\nkilograms now let's try entering a\nweight in kilograms so run it one more\ntime\nlet's say 76\nkilos\nhere we get a familiar error can only\nconcatenate string to string not float\nso this error occurred on line five\nwhere we try to concatenate a string\nto a float so once again we need to\nconvert this to a string object now\nlet's run the program one more time\n76\nkilos\nis equal to 168 pounds\nhey guys i just wanted to let you know\nthat i have an online coding school at\ncodewoodmosh.com where you can find\nplenty of courses on web and mobile\ndevelopment in fact i have a\ncomprehensive python course that teaches\nyou everything about python from the\nbasics to more advanced concepts so\nafter you watch this tutorial if you\nwant to learn more you may want to look\nat my python course it comes with a 30\nday money back guarantee and a\ncertificate of completion you can add to\nyour resume in case you're interested\nthe link is below this video\nin this tutorial we're going to talk\nabout while loops in python we use while\nloops to repeat a block of code multiple\ntimes for example let's say we want to\nprint the numbers one to five a poor way\nof doing this is writing code like this\nprint one then print two print 3\nprint 4 and print 5.\nnow why is this a bad approach well what\nif we wanted to print the numbers 1 to 1\nmillion we don't want to write 1 million\nlines of code each line printing a\nnumber this is where we use while loops\nso\nwe'll start off by declaring a variable\nlike i and set it to our initial number\nlet's say one\nthen we type while and here we type a\ncondition so once again we can use our\ncomparison operators\nlet's say i less than 5 less than or\nequal to 5.\nas long as this condition is true then\nthe code that we write inside of the\nwhile block will get executed so here we\ntype a colon then press enter now we\nhave a block of code\nin this block we can print i\nand then we need to increment i y one so\nwe set i to i plus one if you don't do\nthis i will always be one and this block\nof code\nwill get executed indefinitely it will\nnever terminate basically our program\nwill continue running until it runs out\nof memory\nso\nin the first iteration i is 1 is less\nthan 5 so python is going to execute\nthis block of code it will print 1 on\nthe terminal and then i becomes 2.\nthen the control moves back over here so\npython evaluates this condition\n2 is less than or equal to 5 so the\ncondition is true and once again python\nis going to execute this block one more\ntime in the second iteration we're going\nto see two on the terminal and then i\nwill become three so this will continue\nuntil this condition is no longer true\nlet me show you so\nlet's run this program\nnow we see the numbers one to five so\nthis is the beauty of while loops\ni can easily change five\nto one\nthousand and by the way i'm separating\nthese three digits using an underscore\nthis makes my number more readable we\ndon't have to add this but it just makes\nour code more readable\nso let's run the program\nnow we see the numbers 1 to 1000. it's\nmuch easier than 1000 lines of code each\nprinting a number okay now let me show\nyou something really cool\nso i'm going to change this\nto 10.\nnow instead of printing i i want to\nprint an expression so i'm going to\nmultiply i\nby a string an asterisk\nnow you might be confused here because\nearlier i told you that in python we\ncannot concatenate a number to a string\nbut here i'm using the multiplication\noperator well this is different we can\nmultiply a number by a string and this\nwill repeat that string based on the\nvalue of that number so if i is one\nwe're gonna see one asterisk if i is\nfive we're going to see five asterisks\nlet me show you so when we run this\nprogram\nwe see this triangle shape because in\nthe first iteration i is one so we see\none asterisk in every iteration i is\nincremented by one so we see one extra\nasterisk and finally in the last\niteration i is 10 and we see 10\nasterisks on the terminal\nso you have learned about three types of\ndata in python we have numbers which can\nbe integers or floats\nwe have booleans and strings\nthese are what we refer to as primitive\nor basic types in python now in python\nwe have a bunch of complex types as well\nthese complex types are very useful in\nbuilding real applications\nin this tutorial we're going to talk\nabout lists we use lists whenever we\nwant to represent a list of objects like\na list of numbers or a list of names let\nme show you\nso i'm going to declare a variable\ncalled names\nand set it to a list of names\nso here we add square brackets to\nrepresent a list and now we can add one\nor more objects inside this list in this\nlist we add a bunch of names like john\nbob\nmarsh\nsam\nand mary so we separate this element\nthese items using a comma okay\nnow\nlet's print our list so print names\ntake a look\nit comes out exactly like how we wrote\nit\nnow we can also get individual elements\nin this list for example if we want to\nget the first element in this list here\nwe type a pair of square brackets and\ninside the square brackets we type an\nindex the index of the first element in\nthis list is zero so now when we run\nthis program we're going to see john on\nthe terminal\nthere you go\nnow\nin python we can also use a negative\nindex this is a feature that i\npersonally have not seen in other\nprogramming languages\nso if 0 represents the first element in\nthis list what do you think\nnegative 1 represents it represents the\nlast element in this list let's verify\nit so let's run the program and here's\nmary\nwhat about\nnegative 2 well that represents the\nsecond element\nfrom the end of the list\nso let's run the program and here's some\nthen we can also change an object at a\ngiven index for example let's say here\nwe made a mistake and this john should\nnot be spelled with an h\nso we need to reset it we type names of\nzero\nnow we treat this like a regular\nvariable so we set it to a new value\nwe set it to john without an h now let's\nprint our list\nand here's our updated list beautiful\nwe can also select a range of values for\nexample let's say we're only interested\nin the first three names\nso over here we type square brackets\nand here we need to type two indexes a\nstart index and an end index\nour start index is a zero because we\nwant to start from here\nand our end index is going to be zero\none two plus one that's going to be\nthree so we add a colon three so python\nis going to return all the elements from\nthe start index up to the end index but\nexcluding the end index so it's going to\nreturn the elements at index 0 1 and 2.\ntake a look\nhere are the first three names\nand by the way\nthis expression does not modify our\noriginal list it returns a new list so\nright after this print statement if we\nprint our original list\nyou can see that it's not changed\nso this is how we use lists in python\nearlier i told you that strengths in\npython are objects objects in\nprogramming are kind of like objects in\nthe real world like your mobile phone\nyour bicycle the remote control of your\ntv and so on they have certain\ncapabilities so if we type a string here\nand then press dot we can see all the\nfunctions or methods available in a\nstring object in python\nnow lists are also objects so they have\na bunch of methods for adding items or\nremoving them and so on let me show you\nso i'm going to declare\na list of numbers\nlet's say 1 2 3 4 and 5.\nnow to add a new element at the end of\nthis list we can use the append method\nso we type numbers\nthat append\nand here we type 6.\nnow let's print our list\nso here's our updated list beautiful\nnow what if you want to insert a number\nsomewhere in the middle or at the\nbeginning\nfor that we use the insert method\nso we're going to call the insert method\nnow on the top\ngo to the view menu\nand\nlook at parameter info look at the\nshortcut on a mac computer it's command\nand p\non windows it's probably control and p\nif we use this shortcut we can see the\nvalues that this method expects\nso the first value that this method\nexpects is an index value and the type\nof this value is an integer\nso if i want to insert a value at the\nbeginning of this list i should pass 0\nas the index of the first element right\nso let's pass 0.\nnow\nthe second value is highlighted so the\nsecond value is an object and the type\nof this is t that basically means this\ncan be any type we can pass a number we\ncan pass a boolean we can pass a string\nwe can pass a list or any type of\nobjects in python\nso i'm going to pass negative 1. now\nlet's run our program\nyou can see negative 1 appeared at the\nbeginning of our list\nwe also have a method for removing items\nso let's call\nremove\nthree\nlet's run the program\nthree is gone we only have one two four\nand five\nnow if you wanna remove all the items in\nthe list we call the clear method so\nclear\nthis method doesn't expect any values\nso let's run our program our list is\nempty\nnow sometimes you want to know if a\ngiven item exists in our list or not to\ndo that we use the in operator so\nlet's remove this line\ninstead of printing our numbers list i'm\ngoing to print an expression\none\nin\nnumbers\nso here we're using the in operator\nwe're checking to see if one is in the\nnumbers list so this is a boolean\nexpression it returns a boolean value\ntake a look\nso we get true\nobviously if we search for a value that\ndoesn't exist in this list\nlike 10\nwe get false okay\nnow finally there are times you want to\nknow how many items you have in the list\nto do that you can use the built-in lend\nfunction\nso let's print\nlen of numbers so len\nis a built-in function just like the\nprint function that is why it's\nhighlighted as purple it returns the\nnumber of elements in a list take a look\nso we have five elements in this list\nwhen writing python programs there are\ntimes you want to iterate over a list\nand access each item individually let me\nshow you so i'm going to declare\na list of numbers\none two three four five\nnow if we print this list\nit comes out exactly like how we wrote\nit using the square bracket notation but\nwhat if we wanted to print each item on\na separate line that is where we use the\nfor loop let me show you so we're not\ngoing to print the entire list\ninstead we're going to type 4\nnow we declare a variable which is\ncalled a loop variable\nlet's call it item\nthen we type in\nnumbers\nnext we add a colon to start a block of\ncode so this is what we call a for loop\nwith this for loop we can iterate over\nall the items in this list\nin each iteration this item variable is\ngoing to hold one value so in the first\niteration item is going to be equal to 1\nand the second iteration is going to be\nequal to 2 and so on so\nnow if we print item\nand run our program\nwe see each item on a new line\nso this is how we use a for loop now we\ncould also achieve the same thing using\na while loop but our code would be a\nlittle bit longer let me show you so\nwe would have to start by declaring a\nloop variable outside of our while loop\nlet's say i we set it to zero\nnow we say while i is less than\nhere we need to find out how many items\nwe have in this list\nso we use the len function\nlen of\nnumbers as long as i is less than the\nlength of the list\nprint\nnow we can use the square bracket\nnotation to get the element at this\nindex so\nnumbers of\ni now we need to increment i by one so i\nequals i plus one\nlet's run the program and see what we\nget\nso we get the numbers one to five these\nare coming out from our for loop and\nthen we get the numbers one to five one\nmore time these are coming out from our\nwhile loop now if you compare these two\napproaches you can definitely see that\nthe implementation using the for loop is\nshorter and easier to understand we\ndon't have to use the square bracket\nnotation we don't have to call the len\nfunction we don't have to declare a\nvariable a loop variable and then\nincrement it explicitly\nso with the for loop in each iteration\nthe item variable will automatically\nhold one value in this list\nin this tutorial we're going to talk\nabout the range function in python we\nuse the range function to generate a\nsequence of numbers let me show you so\nyou type range\nthis is a built-in function just like\nthe print and input functions here we\ncan pass a value like 5 and this will\nreturn a range object\na range object is an object that can\nstore a sequence of numbers let me show\nyou so\nlet's call that numbers\nso this is a range object\nin this object we're going to have the\nnumbers 0 to 5 but excluding 5.\nnow if we print\nnumbers\nwe're going to see this message range of\nzero to five not the actual numbers\nbecause this is the default\nrepresentation of a range object to see\nthe actual numbers we need to iterate\nover this range object using a for loop\nin the last video you learned how to\niterate over a list using a for loop but\nwe can also iterate over a range object\nusing a for loop basically we can use\nthe for loop with any object that\nrepresents a sequence of objects\nso instead of printing numbers\nwe're going to use a for loop\nfor number\nin numbers colon\nwe're going to print\nnumber\ntake a look\nnow we see the numbers zero to four\nso\nrange of five\ngenerates a sequence of numbers starting\nfrom zero up to the number we specify\nhere\nnow if we supply two values\nthe first value is going to be\nconsidered the starting value\nand the second value is going to be\nconsidered the ending value and it's\ngoing to be excluded so range of 5 to 10\nis going to generate the numbers 5 to 9.\ntake a look\nthere you go\nnow we can also supply a third value and\nthat will be used as a step so let's say\ninstead of having a sequence of numbers\nlike five six seven eight nine we wanna\njump two numbers at a time so 5 7 9 and\nso on so here we pass 2 as the step take\na look\nso we get these odd numbers 5 7 and 9.\nso this is the range function in python\nlike quite often you see the range\nfunction used as part of a for loop\nbecause we don't really need to store\nthe result in a separate variable we can\ncall the range function right here where\nwe are using the numbers variable so we\ncan type range of five and this will\nreturn a range object holding the\nnumbers zero to four take a look\nthere you go\nso we don't really need to store the\nresult in a separate variable like\nnumbers\nthere you go\nin this tutorial we're going to talk\nabout tuples in python tuples are kind\nof like lists we use them to store a\nsequence of objects but tuples are\nimmutable which means we cannot change\nthem once we create them let me show you\nso i'm going to start by defining a list\nof numbers 1 2 3.\nnow we use square brackets to define a\nlist\nand parenthesis to define a tuple so now\nthis numbers variable is storing a tuple\nif we try\nto reassign let's say the first element\nwe're going to get an error\ntopple object does not support item\nassignment so this is what i meant by\ntuples are immutable they're\nunchangeable\nalso\nif you type numbers dot\nyou don't see any methods like append\ninsert remove and so on we only have\ncount and index\ncount returns the number of occurrences\nof an element for example\nif we have\nlet's say\ntwo threes in this tuple\nand call count of three this will return\n2.\nthe other method we have here is index\nand this returns the index of the first\noccurrence of the given element\nnow\nthese other methods you see here that\nstart with an underscore they're called\nmagic methods it's an advanced topic and\ni've covered it in detail in my complete\npython programming course if you're\ninterested the link is down below this\nvideo\nso tuples are immutable we cannot change\nthem once we create them\nnow practically speaking most of the\ntime you would be using lists but there\nare times that once you create a list of\nobjects you want to make sure that\nsomewhere in your program you or someone\nelse is not going to accidentally modify\nthat list if that's the case then you\nshould use a tuple\nhey guys i just wanted to let you know\nthat i have an online coding school at\ncodewoodmarch.com where you can find\nplenty of courses on web and mobile\ndevelopment in fact i have a\ncomprehensive python course that teaches\nyou everything about python from the\nbasics to more advanced concepts so\nafter you watch this tutorial if you\nwant to learn more you may want to look\nat my python course it comes with a 30\nday money back guarantee and a\ncertificate of completion you can add to\nyour resume in case you're interested\nthe link is below this video\nhey"
  },
  {
    "title": "I&#39;ve Read Over 100 Books on Python. Here are the Top 3",
    "channel": "Python Programmer",
    "url": "https://www.youtube.com/watch?v=MqywbqLmjp4",
    "published_at": "2024-01-31T21:00:24Z",
    "description": "Visit https://brilliant.org/PythonProgrammer/ to get started for free (and if you're one of the first 200 people to click the link you'll get an extra 20% off too) üòÉ\n\nOver the last few years I have read more than 100 boos on python, There are some books that stand out as the best. \n\nI have a python course on Udemy, it's one of the highest rated. Here it is:\n\nüéì Complete Python Programmer Bootcamp - http://bit.ly/2OwUA09\n\nBuy the books\nUK\nBook 1 - https://amzn.to/3SdPOEg\nBook 2 - https://amzn.to/3...",
    "has_transcript": true,
    "transcript_preview": "I've read over a hundred books on python\nI mean not all at once and that would be\nridiculous but over the course of years\nI've read at least a 100 books on Python\nand I want to share my three favorites\nwith you so these are some of the books\nthat I've read I don't know you might\nrecognize a few of those but before I\nshare with you my three favorites\nthere's something else that I want to\ntell you that I think is even more\nimportant than the three books that I'm\nabout to recommend so here it\nis oh...",
    "full_transcript": "I've read over a hundred books on python\nI mean not all at once and that would be\nridiculous but over the course of years\nI've read at least a 100 books on Python\nand I want to share my three favorites\nwith you so these are some of the books\nthat I've read I don't know you might\nrecognize a few of those but before I\nshare with you my three favorites\nthere's something else that I want to\ntell you that I think is even more\nimportant than the three books that I'm\nabout to recommend so here it\nis oh uh I can't actually find the thing\nI want to show you in order to\ndemonstrate this so I'm going to have to\ngo and get one just bear with me when I\ndo\n[Music]\nthat do you want to see what's in the\nbag let's have a\nlook\nyes it's a dictionary but how is an\nEnglish dictionary relevant to learning\npython well I'm coming to that so\nimagine if you wanted to learn English\nand I said what you need to do is get\nyourself a nice big dictionary like this\none that has loads of vocab and there's\na section on grammar too I did not know\nthat do you know what the collective\nnoun for Apes is it's a shrewdness of\nApes learn all the vocab learn all the\ngrammar and then you'll know English\nthat would be terrible advice it's also\nterrible advice for learning python\nwhich is why you have to choose your\nfirst book carefully instead you learn a\nlittle bit of vocab a little bit of\ngrammar and then you practice you\npractice speaking and writing and at\nfirst your facility with the language is\nnowhere near enough to be able to\ncommunicate the complexity of your\nthoughts so you learn a bit more vocab a\nbit more grammar and it becomes an\niterative process until you can\ncommunicate exactly what it is that you\nwant to say and eventually if you're\nlucky your ability with language\ndevelops to the point where it helps you\ncome up with original thoughts and ideas\nand it's exactly the same when learning\npy which is why as a beginner there are\ncertain books you should avoid so as\nwell as giving you three book\nrecommendations I want to show you how\nto recognize what makes a good book for\na\nbeginner let's start by looking at a\nbook that's bad for beginners this book\nisn't very good for beginners there's\ntoo much vocab too much grammar it's\noverwhelming and it's more likely to put\nyou off that's not to say that it's a\nbad book it's just not well suited to\nsomeone that's new to programming and\nnew to python what you want is something\nthat gives you enough of the basics the\nvocab and the grammar to get you started\non projects as quickly as possible which\nis why I like this book what I like\nabout python crash course is that it's\nsplit into two parts Part One teaches\nyou the foundations it teaches them\nthoroughly but it doesn't linger too\nlong on them and part two takes what\nyou've learned and uses it to create\nprojects part one is that thick that's\nall the python you need to know in order\nto be able to work on the projects so\nyou learn the foundations of python in a\nfew pages and then you start doing\ninteresting things in part two which is\nwhere all the projects are and the first\nproject you do is a game and um it's\npretty good actually it's Space Invaders\nso you'll be building something like\nthat you'll also build an interactive\ndata visualization learn how to work\nwith apis and build a web app using\nDjango it'll introduce you to git and\nGitHub and give you advice on text\neditors and idees so you spend a lot of\ntime learning how to apply what you've\nlearned in part one to building projects\nwhich is the whole point of coding in\nthe first place this really is an\nabsolutely excellent book for beginners\nand it's my first recommendation book\ntwo becomes a little bit more difficult\nbecause learner needs diverge I don't\nknow why you want to Learn Python maybe\nyou want to do data analysis maybe you\nwant to develop web apps and that would\ninfluence the choice of the second book\nbut this second book I think would be\nuseful for\neveryone whether you want to Learn\nPython to do data analysis or whether\nyou want to do web apps or whether you\nwant to go into computer science you\nshould have an understanding of at least\nthe basics of computer sence because\nthat will be very useful to you when\nyou're trying to problem solve further\ndown the line and that's why I would\nrecommend this book Python Programming\nby John zel gives a very thorough\nintroduction ction to the basics of\ncomputer science it will help to ensure\nthat you don't develop any really bad\nhabits as you teach yourself to code in\nPython and it will help you to\nunderstand why things should be done in\na particular way and as you work through\nit you'll develop your algorithmic\nthinking and problem solving skills and\nI think that's an essential step for\nanyone that's teaching themselves and\nthe way I would approach this book\nespecially if you've already started\nwith python crash course is go to the\nend of each chapter\nand attempt the exercises and when you\nget stuck go to the section in the\nchapter that explains that question or\nhelps to explain that question go\nthrough every chapter that way and you\nwill get an overview and a foundation of\ncomputer science that I think will stand\nyou in very good stead this book\nactually is a very old version it even\ntalks about python one in here somewhere\nthere's a much newer\nEdition the choice for book is well it's\ntrickier still because it really will\nnow depend on where your interests lie\nso what I'm going to do is I'm going to\nrecommend more than one book but I'm not\nsuggesting you get them all just choose\nthe book depending on what it is that\nyou want to use Python for so if you\nwant to carry on in the same vein as\nthis book with exploring computer\nscience a bit further I would suggest\nthis it's called classic computer\nscience problems in Python and it's the\nsort of things that you might get in a\ntechnical interview search algorithms\nthat kind of thing and if you're\ninterested in computer science I really\nthink you'll like this book there is\nanother one as well if you want to go\ndown the algorithm route and explore\nthose algorithms illuminated this is an\nexcellent introductory book on\nalgorithms it's not actually in Python\nit uses pseudo code to explain the\nalgorithms maybe you want to use Python\nfor data analysis and if that's the case\nthen there really are lots of books to\nchoose from in fact the choice is so\ngreat that it can be paralyzing but I'm\ngoing to give you three options for this\nthat won't disappoint so the first two\nthat give a sort of broad overview of\ndata science or to use Python for data\nanalysis are these two learning\nscientific programming with python now I\nknow this says that it's covering\nscientific programming but actually what\nis covered in here are all the tools\nthat you would need in order to be able\nto use Python for data and analysis so\nthat's a really good sort of broad book\non the subject and then there's this one\npython tools for scientists which is\nquite similar really it covers all of\nthe tools that you would need uh for\nscience but also for doing data analysis\nand uh I really like these two books\nalthough they don't say data analysis or\ndata science in the title they're\nactually very good for learning the\nskills that you need to do that however\nif it's just pandas that you want to\nlearn then the best book on pandas that\nI have seen is this one effective pandas\nthis will teach you how to do pretty\nmuch anything you can imagine in pandas\nit is a superb pandas book in fact this\nis the first edition I think there is\nnow a second edition so check that\nbefore you get it but if it's pandas\nthat you want to learn and you're not\ninterested in learning the other aspects\nof data analysis then you don't need to\nthink twice about it this is the book to\nget oh yeah one last thing it's always a\ngood idea if you can borrow the book\nfrom a library first so you can get a\nfeel for whether or not it's right for\nyou did you know that Interactive\nLearning can be up to six times more\neffective than traditional methods\nthat's why I use brilliant.org the\nsponsor of this video whether you're\npuzzled by data science need to refresh\nyour linear algebra skills or are\ncurious about cuttingedge topics like\nQuantum Computing and neural networks\nbrilliant has a cause for you what sets\nbrilliant apart for me is how engaging\nand straightforward their learning\nprocess is every course is filled with\ninteractive content and follow-up\nquestions making learning not just\ninformative but also incredibly fun\nyou're not just passively absorbing\ninformation you're actively solving\nproblems and building your skills step\nby step one of the things I like most\nabout Brilliance courses is their\nthoughtful and skillful design they're\nstructured to gradually build up your\nknowledge ensuring a solid understanding\nof each concept before moving M on to\nthe next it's learning at its finest\ndesigned to fit into your busy schedule\nwith brilliant you can learn anytime\nanywhere whether you're on a lunch break\nor I'm winding at home and getting\nstarted is absolutely free just go to\nbrilliant.org python programmer or click\non the link in the description and\nyou'll get to explore everything\nbrilliant has to offer free for 30 days\nand the first 200 of you will get 20%\noff brilliant's annual premium\nsubscription"
  }
]