[
  {
    "video_id": "kqtD5dpn9C8",
    "title": "Python for Beginners - Learn Coding with Python in 1 Hour",
    "url": "https://www.youtube.com/watch?v=kqtD5dpn9C8",
    "channel": "Programming with Mosh",
    "published_at": "2020-09-16T13:00:20Z",
    "description": "Learn Python basics in just 1 hour! Perfect for beginners interested in AI and coding. ‚ö° Plus, get 6 months of PyCharm FREE with the coupon in the description!\n\n‚ù§Ô∏è Join this channel to get access to perks:\nhttps://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join\n\nüöÄ Want to dive deeper? Check out my Complete Python Mastery course: \n- Full course: https://mosh.link/python-course\n- Subscribe for more Python tutorials like this: https://goo.gl/6PYaGF\n\nüìï Get the FREE goodies:\n- Python cheat sheet: https://mosh.link/python-cheatsheet\n- Get 6 months of PyCharm for free with this coupon code: MOSH_YOUTUBE - Redeem it at: https://jb.gg/redeem\n\n‚úã Stay connected:\n- Twitter: https://twitter.com/moshhamedani\n- Facebook: https://www.facebook.com/programmingwithmosh/\n- Instagram: https://www.instagram.com/codewithmosh.official/\n- LinkedIn: https://www.linkedin.com/school/codewithmosh/\n\n‚≠ê Related tutorials\nhttps://youtu.be/yVl_G-F7m8c?si=11emtFyDccTKCGn7\n\nüìñ TABLE OF CONTENT\n0:00:00 Introduction \n0:00:30 What You Can Do With Python \n0:01:15 Your First Python Program \n0:05:30 Variables\n0:09:08 Receiving Input\n0:10:48 Type Conversion\n0:18:49 Strings\n0:23:41 Arithmetic Operators \n0:25:59 Operator Precedence \n0:27:11 Comparison Operators \n0:28:52 Logical Operators\n0:31:06 If Statements\n0:36:16 Exercise\n0:41:42 While Loops\n0:45:11 Lists\n0:48:47 List Methods\n0:52:16 For Loops\n0:54:54 The range() Function \n0:57:43 Tuples\n\n#Python #AI #MachineLearning #WebDevelopment",
    "has_transcript": true,
    "transcript_preview": "in this python tutorial you're going to\nlearn everything you need to know to\nstart programming in python if you want\nto learn python programming for data\nscience machine learning or web\ndevelopment this python tutorial is the\nperfect place to learn python you don't\nneed any prior knowledge in python or\nprogramming in general i'm going to\nteach you everything from scratch i'm\nmosh hamadani and i've taught millions\nof people how to code through this\nchannel if you're new here make sure to\nsubscrib...",
    "full_transcript": "in this python tutorial you're going to\nlearn everything you need to know to\nstart programming in python if you want\nto learn python programming for data\nscience machine learning or web\ndevelopment this python tutorial is the\nperfect place to learn python you don't\nneed any prior knowledge in python or\nprogramming in general i'm going to\nteach you everything from scratch i'm\nmosh hamadani and i've taught millions\nof people how to code through this\nchannel if you're new here make sure to\nsubscribe as i upload new videos every\nweek now let's jump in and get started\nall right before we get started let me\ngive you some ideas about what you can\ndo with python that's a very common\nquestion python is a multi-purpose\nprogramming language so you can use it\nfor a variety of different tasks you can\nuse python for machine learning and ai\nin fact python is the number one\nlanguage for machine learning and data\nscience projects python is also very\npopular in web development using python\nand a framework called django you can\nbuild amazing websites here are five\nwebsites powered with python and django\nyoutube instagram spotify dropbox and\npinterest you can also use python in\nautomation with python you can save your\ntime and increase your productivity by\nautomating repetitive tasks so why are\nyou learning python are you learning it\nfor automation for data science or web\ndevelopment let me know in the comment\nsection below\nall right the first thing i want you to\ndo is to head over to python.org to\ndownload the latest version of python so\nyou go to downloads and select the\nlatest version of python\nhere in your downloads folder you should\nsee this package simply double click it\nyou're going to see this python\ninstaller if you're on windows you will\nsee this checkbox over here add python\nto path make sure to check it it's\nreally important otherwise you're not\ngoing to be able to follow this tutorial\nsimply click on continue\nagain\none more time\ni agree with the terms\nand install the latest version of python\nnow here you need to enter the username\npassword of your computer\nso\nlet's do that real quick\nnext you need to install a code editor\nwe use a code editor to write our code\nand execute it the most popular code\neditor for python is pycharm you can get\nit from jetbrains.com\npycharm\nso on this page\nclick on download\nyou should see two different editions\none is the professional edition which is\ncommercial and we also have this\ncommunity edition which is free and open\nsource so we're going to download the\ncommunity edition\nnow in your downloads folder you should\nhave this package let's double click it\nif you're on windows you're going to see\nan installation wizard so simply click\non the next button until you install\npycharm if you're on a mac you need to\ndrag this pycharm and drop it onto the\napplications folder\nnow\nlet's open it\nthe first time you open pycharm you have\nto configure a few settings we don't\nwant to spend time on this so over here\nwe're going to click on skip remaining\nand set defaults\nnow let's create a new project\nover here we can specify the location\nand the name of our python project so\nlet's append hello world to this path\nthis is where our python project is\ngoing to be saved so let's click on\ncreate\nin this window you can see the content\nof our project so here's our hello world\nproject currently we have only one\nfolder inside this project that is vn\nwhich is short for virtual environment\nwe'll talk about virtual environments in\nthe future so currently we don't have\nany python files inside this project a\nreal application can consist of tens or\nhundreds or even thousands of python\nfiles so let's right click on the\nproject name\nand go to new python file we're going to\ncall this file up\nnow we can collapse this project window\nby clicking on this icon so now we have\nmore space let's write our first python\ncode we're going to write print all in\nlowercase then add parentheses\nthen add quotes either single quotes or\ndouble quotes\nand inside this code we're going to\nwrite hello world\nso this is what we call a string a\nstring means a string or sequence of\ncharacters in simple words that means\ntextual data so in python and in many\nother programming languages whenever\nwe're dealing with textual data we\nshould always surround our text with\nquotes\nin python we can use single or double\nquotes\nnow this print you see here is a\nfunction built into python and we can\nuse it to print a message on our\napplication window so let me show you\nhow to run this code\non the top we go to the run menu and\nthen select run\nnote that there is a shortcut associated\nwith this command i always use shortcuts\nbecause they increase my productivity so\nlet's click on this\nnow select app\nand over here\nyou can see this little window this is\nwhat we call the terminal window and it\nshows the output of our program\nso here's the hello world message\nprinted in the terminal window now as\nyou learn more python you will learn how\nto build applications that have a\ngraphical user interface that's an\nadvanced topic so for now let's not\nworry about it\nalright now let's talk about variables\nwe use variables to temporarily store\ndata in a computer's memory for example\nwe can store the price of a product or\nsomeone's name their email their age and\nso on let me show you so\nto declare a variable we start by typing\na name for that variable let's say age\nthen we add an equal sign\nand then we type a value let's say 20.\nso with this we're storing the number 20\nsomewhere in our computer's memory and\nwe're attaching this age as a label for\nthat memory location so now we can read\nthe value at this memory location and\nprint it on the terminal so instead of\nprinting hello world we want to print\nthe value of the age variable\nso i'm going to delete what we have\ninside parenthesis\nand type age note that i'm not adding\nquotes because if i run this program\nwe'll see the text h on the terminal we\ndon't want that we want the value of the\nage variable so let's remove the quote\nand\nprint the value of the age variable\nnow here on the toolbar you can click on\nthis play icon to run your program or\nyou can use the shortcut that i showed\nyou in the last video so the shortcut is\nover here on a mac that's ctrl shift and\nr\nso\nthere you go\nnow you can see the value of the age\nvariable\nnow we can also change the value of a\nvariable for example on line 2\nwe can set 8 to 30.\nnow when we run our program\nwe see 30. so as you can see our program\ngets executed from top to bottom\nso this is how we can declare and use a\nvariable now let's look at a few more\nexamples\nso i'm going to declare\nanother variable called price\nand set it to 19.95\nso in python we can use numbers with a\ndecimal point or\nwhole numbers we can also declare a\nvariable and assign it a string value so\nlet's say first underline name so if you\nwant to use multiple words in the name\nof a variable we should separate them\nusing an underscore this makes our code\nmore readable see what would happen if i\ndidn't use this underline\nthis is not easily readable so we always\nseparate multiple words by an underscore\nnow we set this to a string so we can\nuse single quotes or\ndouble quotes let's say march\nwe also have a special type of value\ncalled a boolean value which can be true\nor false that is like yes or no in\nenglish let me show you so i'm going to\ndeclare another variable called is\nonline and set it to true\nwe could also set it to false what we\nhave here is called a boolean value\nnow note that python is a case sensitive\nlanguage so it's sensitive to lowercase\nand uppercase letters in this case if i\nuse a lowercase f\nwe can see an error over here because\nthis is not recognized in python\nso false with a capital f is a special\nkeyword in python that represents the\nboolean false value\nso this is how we can declare and use\nvariables in python\nall right now here's a little exercise\nfor you\nimagine we want to write a program for a\nhospital so we're going to check in a\npatient named john smith he's 20 years\nold and is a new patient i want you to\ndeclare a few variables to store these\nvalues use the comment box below to\nshare your code with others\nin this tutorial i'm going to show you\nhow to receive input from the user so in\npython we have another built-in function\ncalled input we use this to read a value\nfrom the terminal window let me show you\nso we add parenthesis\nthen we type in a string here we can\ntype a message like what is your name we\nhad a question mark followed by a space\nyou will see why we need this space in a\nsecond so let's run this program\nwe get this message now we have to enter\na value so we click over here\nnow you can see that the carrot is\nseparated from the question mark this is\nbecause of the white space that we added\nover here\nso now we have to type a value let's say\njohn when we press enter\nthis function will return the value that\nwe entered in the terminal window so we\ncan get that value and store it in a\nvariable so let's declare a variable\ncalled name and set it to the return\nvalue of the input function\nnow we can print a greeting message for\nthis user so we use the print function\nwe say hello\nwe had a space\nnow after the string we want to add the\nvalue of the name variable so we use a\nplus sign\nand then type name\nwhat we are doing here is called string\nconcatenation so we're combining this\nstring with another string\nnow let's run our program and see what\nhappens so what is your name\nmosh\nnow\nwe get this message hello mosh\nso this is how we can use the input\nfunction in python\nyou'll learn about the three types of\ndata in python we have numbers\nstrings and booleans now there are times\nyou want to convert the value of a\nvariable from one type to another let me\nshow you so we're going to use our input\nfunction\nto read the user's birth year so enter\nyour birth here\nnow this input function is going to\nreturn a value so we can store it in a\nvariable called\nbirth underline year\nokay\nnow let's write code to calculate the\nage of this user so we write an\nexpression like this currently we are in\nthe year 2020 so 2020 minus\nbirth year\nthis expression or piece of code is\ngoing to produce a value so once again\nwe can store that value in a variable\nlet's call that variable age\nnow let's print age\non the terminal\nlet's run our program and see what\nhappens\nso\nmy birth year is 1982.\nenter oops our program crashed so\nwhenever you see this red message that\nindicates an error so this error\noccurred in this file\nthat is our app.pi on line two\nright below that you can see the piece\nof code that generated this error\nso that is this expression 2020 minus\nbirth year now below that you can see\nthe type of error so here we have\nunsupported types for subtraction\nwe have int\nand stir what are these well this end is\nshort for integer and that represents a\nwhole number in programming so\n2020 is an example of an integer\nnow birth year is an example of a string\nbecause whenever we call the input\nfunction this function would return a\nvalue as a string even if we enter a\nnumber in other words when i entered\n1982 this input function returned a\nstring with these characters 1982 so\nthis string is different from the number\n1982 they're completely different types\nso in this case\nlet me delete these lines\nthe reason we got this error is that we\ntry to subtract a string from an integer\nso our code looks like this\n1982\nnow python doesn't know how to subtract\na string from an integer\nso to solve this problem we need to\nconvert this string to an integer\nnow in python we have a bunch of\nbuilt-in functions for converting the\ntypes of our variables so\nwe have this end function\nwe can pass our burst here to it\nand this will return the new numeric\nrepresentation of the birth year\nso to solve this problem\nwe need to replace\nthe string\nwith the end function\nso let's see what's going on here on the\nfirst line we call the input function\nthis returns a string\non the second line we pass the string to\nour end function the in function will\nreturn the numeric representation of the\nburst year\nthen\nwe subtract it from 2020 we get the age\nand store it in the age variable now\nlet's run our program\nso\n1982\nand there you go i'm 38 years old\nso this is how the in function works now\nwe also have another built-in function\ncalled float that is for converting a\nvalue to a floating point number a\nfloating point number in python and\nother programming languages is a number\nwith a decimal point so\n10 is an integer and 10.1 is a float\nso we have int we have float and we also\nhave bool for converting a value to a\nboolean\nand finally we have stir for converting\na value to a string so these are the\nbuilt-in functions for converting the\ntype of our variables\nnow here's a little exercise for you i\nwant you to write a basic calculator\nprogram so here we have to enter two\nnumbers we can type a whole number or a\nnumber with a decimal point\nand then our program will print the sum\nof these two numbers\nso pause the video spend two minutes on\nthis exercise and then see my solution\nall right first we're going to call our\ninput function to read the first number\nwe get the result and store it in a\nvariable called first\nnow let's declare\nanother variable called second and read\nthe second number\nnow\nwe calculate the sum\nso that is first plus second\nnow let's see what happens when we print\nsum on the terminal\nso i enter 10 and 20\nbut instead of 30 we get 10 20. this is\nbecause we're combining or concatenating\ntwo strings so\nas i told you before the input function\nreturns a string so\nthis line will be equivalent to first\nequals 10. we're dealing with a string\nnot an integer\nsimilarly\nsecond is going to be\n20 as a string so when we combine two\nstrings 10 plus 20 will get\n10 20 because we're dealing with textual\ndata okay so to solve this problem\nwe need to convert the values we read to\ntheir numeric representation so over\nhere\nwe're going to pass\nfirst to our int function\nand here as well\nnow let's run our program\nso we enter 10 and 20 we get 30. what if\nwe enter a floating point number so 10.1\nand 20.\nwe got an error\nso to solve this problem\nwe need to treat both these values as\nfloats so instead of the in function\nwe're going to use the float function\nnow let's run our program one more time\nwe enter a whole number and a floating\npoint number so the result is correct\nnow let's add a label over here so sum\nis\nplus sum\nlet's run our program\none more time 10 and 20.\nonce again we got an error the error is\nsaying that python can only concatenate\nstrings not floats to strings\nso on line four we have a string we're\nconcatenating this with a float because\nthe result of this expression is a\nfloating point number we're adding two\nfloats so the result is a float as well\nso python doesn't know how to evaluate\ncode like this\nit doesn't know how to concatenate a\nfloat\nto a string to solve this problem\nwe need to convert sum to your string so\nthis is where\nwe use the stir function\nnow let's run the program again so\n10 plus 20.1 and here's the result\nand one last thing\nin this example i'm calling the float\nfunction at the time we want to\ncalculate the sum of these two numbers\nbut this is not a requirement we can\ncall the float function\nover here so this input function returns\na string we can pass that string to our\nfloat function take a look so float\nparenthesis like this\nso the value that we're passing to the\nfloat function is the value that is\nreturned from the input function\nsimilarly\nwe call the float function over here\nnow\nwe can change this expression to first\nplus second that is another way to write\nthis piece of code\nso type conversion is important in\npython and other programming languages\nthere are times you need to convert the\ntype of variable to a different type\nin this tutorial i'm going to show you a\nbunch of cool things you can do with\nstrings in python so let's start by\ndeclaring a variable called course\nand set it to python for\nbeginners\nnow this string that we have over here\nis technically an object an object in\npython is like an object in the real\nworld as a metaphor think of the remote\ncontrol of your tv this remote control\nis an object and it has a bunch of\ncapabilities it has a bunch of buttons\nfor turning your tv on turning it off\nchanging the volume and so on now in\nthis program this course variable is\nstoring a string object this string\nobject has a bunch of capabilities so if\nwe type\ncourse dot you can see all the\ncapabilities available in a string\nobject these are basically functions\nthat you can call just like the print or\ninput functions the difference is that\nthe print and input functions are\ngeneral purpose functions they don't\nbelong to a particular object but the\nfunctions you see over here are specific\nto strings now more accurately we refer\nto these as methods so when a function\nis part of an object we refer to that\nfunction as a method\nso let's look at a few examples here we\nhave a function or a method called upper\nand we use that to convert a string to\nuppercase so if we print\ncourse.upper\nand run this program they can see our\ncourse in uppercase\npretty useful\nnow what you need to understand here is\nthat this upper method does not change\nour original string it will return a new\nstring so right after this if we print\ncourse\nyou can see that our course variable is\nnot affected so the upper method returns\na new string\nnow similarly we have another method\ncalled lower for converting a string to\nlowercase we have a method called find\nto see if our string contains a\ncharacter or a sequence of characters\nfor example here we can pass\ny\nand this will return the index of the\nfirst occurrence of y in our string so\nin python the index of the first\ncharacter in a string is 0. so here we\nhave 0 1 2 3 4 and so on so when we run\nthis program you're going to see one on\nthe terminal because the index of y is\n1. take a look first i'm going to delete\nthis line we don't need it anymore also\nlet's do this line let's run the program\nthere you go\nnow as i told you before python is\nsensitive to lowercase and uppercase\nletters so if i pass an uppercase y here\nthis find method returns negative 1\nbecause we don't have an uppercase y in\nthis string we can also pass a sequence\nof characters for example 4. so this\nwill return the index of the word 4.\ntake a look\nso it's 7.\nnow there are times we want to replace\nsomething in a string with something\nelse\nto do that we use the replace method\nreplace\nso we can replace 4\nwith\na string containing the number 4. take a\nlook\nso python for beginners\nobviously\nif you look for a character or a\nsequence of characters that don't exist\nin our string nothing is going to happen\nfor example if we try to replace x with\n4 obviously we don't have x here so\nnothing is going to happen\nalso just like the upper method the\nreplace method is not going to modify\nour original string so it's going to\nreturn a new string this is because\nstrings in python and many other\nprogramming languages are immutable we\ncannot change them once we create them\nwhenever we want to change your string\nwe'll end up with a new string object in\nmemory\nnow one last thing i want to cover in\nthis tutorial there are times you want\nto see if your string contains a\ncharacter or a sequence of characters\none way to do that is using the find\nmethod that we talked about so let's see\nif our string\ncontains python\nnow when we run this program\nthat is the index of the first\noccurrence of the word python in our\nstring now in python we can also use the\nin operator so we can write an\nexpression like this\nwe type a string\npython then we type in this is a special\nkeyword in python this is what we call\nthe in operator\nso after that we type the name of our\nvariable\nso with this expression we're checking\nto see if we have python in course as\nyou can see python code is very readable\nit's like plain english so when we run\nthis program\ninstead of seeing the index of the first\noccurrence of python we see a boolean\nvalue this is more desirable in a lot of\ncases\nnext we're going to look at arithmetic\noperations\nin this tutorial i'm going to show you\nthe arithmetic operators that we have in\npython these are the same arithmetic\noperators that we have in math for\nexample we can add numbers we can\nsubtract them multiply them and so on so\nlet's print\n10 plus 3. let me run this program we\nhave 13.\nso this is the addition operator we also\nhave subtraction\nwe have multiplication\nand division now technically we have two\ndifferent types of division operators we\nhave a division with one slash and\nanother with two slashes let's look at\nthe differences if you use a single\nslash\nwe get a floating point number that is a\nnumber with a decimal point but if we\nuse double slashes\nwe get\nan integer a whole number we also have\nthe modulus operator that is indicated\nby a percent sign and this returns the\nremainder of the division of ten by\nthree so\nthat is one and finally we have the\nexponent operator that is indicated by\ntwo asterisks so this is 10 to the power\nof three so when we run this we get a\nthousand\nnow for all these operators that you saw\nwe have an augmented assignment operator\nlet me explain what it means so let's\nsay we have a variable called x\nand we set it to 10.\nnow we want to increment the value of x\nby 3. so we have to write code like this\nx\nequals x plus 3. when python executes\nthis code it's going to evaluate this\nexpression or this piece of code the\nresult of this expression is 10 plus 3\nwhich is 13. then it will store 13 in\nthe x\nnow there is another way to achieve the\nsame result using less code we can type\nx plus equal three\nwhat we have on line three is exactly\nidentical to what we have on line two so\nwhat we have here is called the\naugmented assignment operator so we have\nthis assignment operator but we have\naugmented or enhanced it\nnow here we can also use\nsubtraction to decrease the value of x\nby 3 we can use multiplication and so on\nso these are the arithmetic operators in\npython\nall right let me ask you a question i'm\ngoing to declare a variable called x and\nset it to 10 plus 3 times 2. what do you\nthink is the result of this expression\nthis is a basic math question that\nunfortunately a lot of people fail to\nanswer\nthe answer is 16. here's the reason in\nmath we have this concept called\noperator precedence and that determines\nthe order in which these operators are\napplied so multiplication and division\nhave a higher order so this part of the\nexpression gets evaluated first so 2\ntimes 3 is 6\nand then the result is added to 10. that\nis why the result of this expression is\n16. now in python operator precedence is\nexactly like math but we can always\nchange it using parenthesis for example\nin this expression if you want 10 plus 3\nto be evaluated first we can wrap it in\nparenthesis\nso\nlike this now when we execute this code\nwe're going to see 26 because 10 plus 3\nis 13 and that divided by 2 is 26. let's\nverify this so print x\nand we get 26.\nso you learn about the arithmetic\noperators in python now in python we\nhave another set of operators called\ncomparison operators we use these\noperators to compare values let me show\nyou so i'm going to declare a variable\ncalled x\nand set it to an expression like this 3\nis greater than 2. so what we have here\nthis piece of code this expression is\ncalled a boolean expression because it\nproduces a boolean value so in this case\nbecause 3 is greater than 2 the result\nof this expression is the boolean true\nso if we print x\nwe get true on the terminal\nso here is the greater than operator we\nalso have greater than or equal to we\nhave less than we have less than or\nequal to\nhere is the equality operator which is\nindicated by two equal signs do not\nconfuse this with the assignment\noperator so here we're comparing three\nand two for equality so if we run our\nprogram\nwe see false because 3\ndoes not equal to 2.\nso here's the equality operator we also\nhave\nthe not equality operator that is\nindicated by an exclamation mark\nfollowed by an equal sign\nso let's quickly recap\nhere are the comparison operators we\nhave in python greater than greater than\nor equal to less than less than or equal\nto\nequal and not equal\nthese operators are extremely important\nin real python programs because quite\noften we have to compare values to\nevaluate certain conditions you're going\nto see that soon\nin python we have another set of\noperators called logical operators we\nuse these operators to build complex\nrules and conditions let me show you so\ni'm going to declare a variable called\nprice and set it to 25.\nnow let's print\na boolean expression like this\nprice is greater than 10.\nnow let's say we want to check to see if\nthe price is between 10 and 30. this is\nwhere we use the logical and operator so\nwe type and and right after that we type\nanother boolean expression surprise less\nthan 30. so with this and operator if\nboth these boolean expressions return\ntrue the result of this entire\nexpression will be true take a look so\nin this case we get true\nbecause the price is between 10 and 30\ndollars\nwe also have\nthe or operator\nwith the or operator if at least one of\nthese boolean expressions returns true\nthen the result of this entire\nexpression will be true\nto demonstrate this i'm going to change\nprice to 5. let's see how python is\ngoing to execute this code so first it's\ngoing to look at this boolean expression\nis price greater than 10 no it's not so\nit will keep going\nthen it will look at the second boolean\nexpression is price less than 30 it sure\nis so the result of this entire\nexpression will be true take a look\nthere you go\nwe also have the not operator which\nbasically inverses any values that you\ngive it let me show you so\nwe're going to have one boolean\nexpression price greater than 10. the\nresult of this expression is false\nnow if you apply the not operator\nthis will inverse false to true so when\nwe run the program we get true\nso let's quickly recap in python we have\nthree logical operators we have logical\nand which returns true if both\nexpressions return true\nwe have logical or which returns true if\nat least one expression returns true and\nwe have not which inverses any value\nthat we give it\nin this tutorial we're going to talk\nabout if statements in python we use if\nstatements to make decisions in our\nprograms for example we can declare a\nvariable called temperature and\ndepending on the value of this variable\nwe can print different messages on the\nterminal let me show you\nso here's our temperature variable\nwe set it to 35.\nnow let's say if temperature is greater\nthan 30 we want to print a message\nsaying it's a hot day so we type if\nthen we type a condition and this is\nwhere we use our comparison operators so\nwe type temperature\ngreater than 30.\nthen so we add a colon and see what\nhappens when i press enter now\nthe character is indented and this\nrepresents a block of code so the code\nthat we write over here will be executed\nif this condition is true otherwise it's\nnot going to be executed let me show you\nso\nwe're going to print\nit's a hot day\nand by the way note that here i've\nsurrounded the string with double quotes\nbecause here we have a single quote as\nan apostrophe so i couldn't declare a\nstring like this with single quotes if i\ntyped it's a hot day\nlook python gets confused because it\nthinks this single code represents the\nend of our string so it doesn't\nrecognize the subsequent characters okay\nso that's why we use\ndouble quotes here\nso we can have an apostrophe in our\nstring\nso it's a hot day\nnow if i press enter again\nthe carrot is indented so the code that\nright here will be part of our if block\nand it will get executed if this\ncondition is true so here we can print\na second message drink plenty of water\nnow to terminate this block we press\nenter and then press shift and tab\nthe carrot is no longer indented so the\ncode that we write here will always get\nexecuted no matter what whether this\ncondition is true or not\nnow in c based programming languages\nlike c plus c sharp java and javascript\nwe present a block of code using curly\nbraces so\nyou start a block of code using a left\nbrace\nand then end it using a right brace in\npython we don't have curly braces so we\nuse indentation to represent a block of\ncode okay\nso\nin this case\nthese two lines are indented and that\nmeans they are part of this block of\ncode\nnow let's run the program and see what\nhappens\nso we see these two messages because the\ntemperature is greater than 30.\nnow\nif i change the temperature to 25\nand run the program again we don't see\nanything okay\nnow\nafter this block let's print\ndone\nbecause this code is not indented it\nwill always get executed it's not part\nof our if block okay so take a look\nhere's the down message\nnow\nlet's add a second condition so if\ntemperature is not greater than 30 that\nmeans it's less than or equal to 30. so\ni'm gonna add a second condition so if\nthe temperature is between 20 and 30 i\nwant to print it's a nice day\nso here we type l if\nthat is short for else if\nand here we type a second condition\nso temperature greater than 20.\nwe add a colon press enter now we have a\nnew block\nso here we can print\nit's a nice day\nso if this condition is true that means\nthe temperature\nis greater than 20 and less than or\nequal to 30. now what we have here is\ncalled a comment that is why it's grayed\nout it's not real code it's just some\nnote that we add to our program python\nis not going to execute this so whenever\nwe type a pound sign what we have after\nis treated as a comment okay\nso\nif this condition is true then we're\ngoing to see this message on the\nterminal let's run our program and\nverify this\nthere you go the temperature is 25\nthat's why we see this message\nnow we can have as many conditions as we\nwant there are no limitations okay\nso let's add another condition\nl if\ntemperature is greater than 10\nthen\nwe're going to print\nit's a bit cold\nnow in this case if this condition is\ntrue that means the temperature is\ngreater than 10\nand less than or equal to 20.\nnow finally if the temperature is less\nthan 10 let's print a message saying\nit's a cold day\nso\nhere we type else then we add a colon\nand now we have a new block\nso this code will get executed if none\nof the above conditions are true\nso here we can print\nit's called\nso this is how we use if statements to\nmake decisions in our programs\nhere's a great exercise for you to\npractice what you have learned so far i\nwant you to write a weight converter\nprogram like this\nso this program is asking me my weight i\nenter 170.\nnext it's asking me if the weight is in\nkilograms or pounds so i can type k for\nkilograms or l for pounds i can type a\nlowercase l or an uppercase l it doesn't\nmatter so let's go with a lowercase l\nnow it tells me weight in kilogram is\n76.5\nso go ahead and spend 5 minutes on this\nexercise you can use the comment box\nbelow to share your code with others and\nthen when you're done come back see my\nsolution\nso first we call our input function to\nask the first question\nwait we get the result and store it in a\nvariable called weight\nnext we call the input function one more\ntime to ask the second question\nis this in kilogram\nor\npounds we get the result and store it in\na variable called unit\nthis is where we're going to use an if\nstatement\nso\nwe want to check to see if unit\nequals\nk\nthen we should convert the weight to\npounds and print it on a terminal\nhowever\nwith this code if i type a lowercase k\nthis condition is not going to be true\nbecause earlier i told you that python\nis a case sensitive language\nso\nwe need to convert this string to\nuppercase earlier we talked about string\nmethods so if we type dot we can see all\nthe functions or methods available in a\nstring object so we use the upper method\nand this returns a new string in case\nnow if this condition is true first we\nneed to convert the weight to pounds so\nwe declare a new variable called\nconverted\nget the weight and divide it by 0.45\nand then we can print this on a terminal\nso\nwe say weight\nin pounds is\nthen we append converted\nnow to terminate this block we press\nshift and tab\nelse colon\nso if this condition is not true that\nmeans the weight was entered in pounds\nso we need to convert it to kilograms\nonce again we declare a variable\nconverted and set it to weight times\n0.45\nand then we print\nweight in kilograms\nand here we concatenate\nthis string with converter all right now\nwe need to terminate this block so we\npress enter then shift and tab good\nnow if we run this program we're going\nto see an error let me show you so let's\nrun it\nhere i'm going to enter 170\nthen i type a lowercase l\nokay here's an error\ncan't multiply sequence by non-end of\ntype float so this is where we got this\nerror when we try to multiply the weight\nby 0.45\nso\nthat is line seven in our code now the\nreason this is happening is because the\nwait variable is storing a string object\nbecause earlier i told you the input\nfunction always returns a string so here\nwe need to convert the weight\nto a number we can either use the end or\nthe float function\nlet's run the program one more time\nso\n170\nin pounds\nhere's the second error can only\nconcatenate string not float to string\nand that error occurred\nover here\nwhen we try to print the weight in\nkilograms so\nlook at line seven\nin this case weight as an integer we are\nmultiplying an integer by a float and\nthe result of this operation is going to\nbe a float\nnow on line eight we are trying to\nconcatenate or combine a string with a\nfloat and python doesn't know how to\nexecute this code\nto solve this problem we need to convert\nthis flow to a string so here we use the\nbuilt-in stir function\nlet's run the program and see what\nhappens\nso\n170 in pounds and here's my weight in\nkilograms now let's try entering a\nweight in kilograms so run it one more\ntime\nlet's say 76\nkilos\nhere we get a familiar error can only\nconcatenate string to string not float\nso this error occurred on line five\nwhere we try to concatenate a string\nto a float so once again we need to\nconvert this to a string object now\nlet's run the program one more time\n76\nkilos\nis equal to 168 pounds\nhey guys i just wanted to let you know\nthat i have an online coding school at\ncodewoodmosh.com where you can find\nplenty of courses on web and mobile\ndevelopment in fact i have a\ncomprehensive python course that teaches\nyou everything about python from the\nbasics to more advanced concepts so\nafter you watch this tutorial if you\nwant to learn more you may want to look\nat my python course it comes with a 30\nday money back guarantee and a\ncertificate of completion you can add to\nyour resume in case you're interested\nthe link is below this video\nin this tutorial we're going to talk\nabout while loops in python we use while\nloops to repeat a block of code multiple\ntimes for example let's say we want to\nprint the numbers one to five a poor way\nof doing this is writing code like this\nprint one then print two print 3\nprint 4 and print 5.\nnow why is this a bad approach well what\nif we wanted to print the numbers 1 to 1\nmillion we don't want to write 1 million\nlines of code each line printing a\nnumber this is where we use while loops\nso\nwe'll start off by declaring a variable\nlike i and set it to our initial number\nlet's say one\nthen we type while and here we type a\ncondition so once again we can use our\ncomparison operators\nlet's say i less than 5 less than or\nequal to 5.\nas long as this condition is true then\nthe code that we write inside of the\nwhile block will get executed so here we\ntype a colon then press enter now we\nhave a block of code\nin this block we can print i\nand then we need to increment i y one so\nwe set i to i plus one if you don't do\nthis i will always be one and this block\nof code\nwill get executed indefinitely it will\nnever terminate basically our program\nwill continue running until it runs out\nof memory\nso\nin the first iteration i is 1 is less\nthan 5 so python is going to execute\nthis block of code it will print 1 on\nthe terminal and then i becomes 2.\nthen the control moves back over here so\npython evaluates this condition\n2 is less than or equal to 5 so the\ncondition is true and once again python\nis going to execute this block one more\ntime in the second iteration we're going\nto see two on the terminal and then i\nwill become three so this will continue\nuntil this condition is no longer true\nlet me show you so\nlet's run this program\nnow we see the numbers one to five so\nthis is the beauty of while loops\ni can easily change five\nto one\nthousand and by the way i'm separating\nthese three digits using an underscore\nthis makes my number more readable we\ndon't have to add this but it just makes\nour code more readable\nso let's run the program\nnow we see the numbers 1 to 1000. it's\nmuch easier than 1000 lines of code each\nprinting a number okay now let me show\nyou something really cool\nso i'm going to change this\nto 10.\nnow instead of printing i i want to\nprint an expression so i'm going to\nmultiply i\nby a string an asterisk\nnow you might be confused here because\nearlier i told you that in python we\ncannot concatenate a number to a string\nbut here i'm using the multiplication\noperator well this is different we can\nmultiply a number by a string and this\nwill repeat that string based on the\nvalue of that number so if i is one\nwe're gonna see one asterisk if i is\nfive we're going to see five asterisks\nlet me show you so when we run this\nprogram\nwe see this triangle shape because in\nthe first iteration i is one so we see\none asterisk in every iteration i is\nincremented by one so we see one extra\nasterisk and finally in the last\niteration i is 10 and we see 10\nasterisks on the terminal\nso you have learned about three types of\ndata in python we have numbers which can\nbe integers or floats\nwe have booleans and strings\nthese are what we refer to as primitive\nor basic types in python now in python\nwe have a bunch of complex types as well\nthese complex types are very useful in\nbuilding real applications\nin this tutorial we're going to talk\nabout lists we use lists whenever we\nwant to represent a list of objects like\na list of numbers or a list of names let\nme show you\nso i'm going to declare a variable\ncalled names\nand set it to a list of names\nso here we add square brackets to\nrepresent a list and now we can add one\nor more objects inside this list in this\nlist we add a bunch of names like john\nbob\nmarsh\nsam\nand mary so we separate this element\nthese items using a comma okay\nnow\nlet's print our list so print names\ntake a look\nit comes out exactly like how we wrote\nit\nnow we can also get individual elements\nin this list for example if we want to\nget the first element in this list here\nwe type a pair of square brackets and\ninside the square brackets we type an\nindex the index of the first element in\nthis list is zero so now when we run\nthis program we're going to see john on\nthe terminal\nthere you go\nnow\nin python we can also use a negative\nindex this is a feature that i\npersonally have not seen in other\nprogramming languages\nso if 0 represents the first element in\nthis list what do you think\nnegative 1 represents it represents the\nlast element in this list let's verify\nit so let's run the program and here's\nmary\nwhat about\nnegative 2 well that represents the\nsecond element\nfrom the end of the list\nso let's run the program and here's some\nthen we can also change an object at a\ngiven index for example let's say here\nwe made a mistake and this john should\nnot be spelled with an h\nso we need to reset it we type names of\nzero\nnow we treat this like a regular\nvariable so we set it to a new value\nwe set it to john without an h now let's\nprint our list\nand here's our updated list beautiful\nwe can also select a range of values for\nexample let's say we're only interested\nin the first three names\nso over here we type square brackets\nand here we need to type two indexes a\nstart index and an end index\nour start index is a zero because we\nwant to start from here\nand our end index is going to be zero\none two plus one that's going to be\nthree so we add a colon three so python\nis going to return all the elements from\nthe start index up to the end index but\nexcluding the end index so it's going to\nreturn the elements at index 0 1 and 2.\ntake a look\nhere are the first three names\nand by the way\nthis expression does not modify our\noriginal list it returns a new list so\nright after this print statement if we\nprint our original list\nyou can see that it's not changed\nso this is how we use lists in python\nearlier i told you that strengths in\npython are objects objects in\nprogramming are kind of like objects in\nthe real world like your mobile phone\nyour bicycle the remote control of your\ntv and so on they have certain\ncapabilities so if we type a string here\nand then press dot we can see all the\nfunctions or methods available in a\nstring object in python\nnow lists are also objects so they have\na bunch of methods for adding items or\nremoving them and so on let me show you\nso i'm going to declare\na list of numbers\nlet's say 1 2 3 4 and 5.\nnow to add a new element at the end of\nthis list we can use the append method\nso we type numbers\nthat append\nand here we type 6.\nnow let's print our list\nso here's our updated list beautiful\nnow what if you want to insert a number\nsomewhere in the middle or at the\nbeginning\nfor that we use the insert method\nso we're going to call the insert method\nnow on the top\ngo to the view menu\nand\nlook at parameter info look at the\nshortcut on a mac computer it's command\nand p\non windows it's probably control and p\nif we use this shortcut we can see the\nvalues that this method expects\nso the first value that this method\nexpects is an index value and the type\nof this value is an integer\nso if i want to insert a value at the\nbeginning of this list i should pass 0\nas the index of the first element right\nso let's pass 0.\nnow\nthe second value is highlighted so the\nsecond value is an object and the type\nof this is t that basically means this\ncan be any type we can pass a number we\ncan pass a boolean we can pass a string\nwe can pass a list or any type of\nobjects in python\nso i'm going to pass negative 1. now\nlet's run our program\nyou can see negative 1 appeared at the\nbeginning of our list\nwe also have a method for removing items\nso let's call\nremove\nthree\nlet's run the program\nthree is gone we only have one two four\nand five\nnow if you wanna remove all the items in\nthe list we call the clear method so\nclear\nthis method doesn't expect any values\nso let's run our program our list is\nempty\nnow sometimes you want to know if a\ngiven item exists in our list or not to\ndo that we use the in operator so\nlet's remove this line\ninstead of printing our numbers list i'm\ngoing to print an expression\none\nin\nnumbers\nso here we're using the in operator\nwe're checking to see if one is in the\nnumbers list so this is a boolean\nexpression it returns a boolean value\ntake a look\nso we get true\nobviously if we search for a value that\ndoesn't exist in this list\nlike 10\nwe get false okay\nnow finally there are times you want to\nknow how many items you have in the list\nto do that you can use the built-in lend\nfunction\nso let's print\nlen of numbers so len\nis a built-in function just like the\nprint function that is why it's\nhighlighted as purple it returns the\nnumber of elements in a list take a look\nso we have five elements in this list\nwhen writing python programs there are\ntimes you want to iterate over a list\nand access each item individually let me\nshow you so i'm going to declare\na list of numbers\none two three four five\nnow if we print this list\nit comes out exactly like how we wrote\nit using the square bracket notation but\nwhat if we wanted to print each item on\na separate line that is where we use the\nfor loop let me show you so we're not\ngoing to print the entire list\ninstead we're going to type 4\nnow we declare a variable which is\ncalled a loop variable\nlet's call it item\nthen we type in\nnumbers\nnext we add a colon to start a block of\ncode so this is what we call a for loop\nwith this for loop we can iterate over\nall the items in this list\nin each iteration this item variable is\ngoing to hold one value so in the first\niteration item is going to be equal to 1\nand the second iteration is going to be\nequal to 2 and so on so\nnow if we print item\nand run our program\nwe see each item on a new line\nso this is how we use a for loop now we\ncould also achieve the same thing using\na while loop but our code would be a\nlittle bit longer let me show you so\nwe would have to start by declaring a\nloop variable outside of our while loop\nlet's say i we set it to zero\nnow we say while i is less than\nhere we need to find out how many items\nwe have in this list\nso we use the len function\nlen of\nnumbers as long as i is less than the\nlength of the list\nprint\nnow we can use the square bracket\nnotation to get the element at this\nindex so\nnumbers of\ni now we need to increment i by one so i\nequals i plus one\nlet's run the program and see what we\nget\nso we get the numbers one to five these\nare coming out from our for loop and\nthen we get the numbers one to five one\nmore time these are coming out from our\nwhile loop now if you compare these two\napproaches you can definitely see that\nthe implementation using the for loop is\nshorter and easier to understand we\ndon't have to use the square bracket\nnotation we don't have to call the len\nfunction we don't have to declare a\nvariable a loop variable and then\nincrement it explicitly\nso with the for loop in each iteration\nthe item variable will automatically\nhold one value in this list\nin this tutorial we're going to talk\nabout the range function in python we\nuse the range function to generate a\nsequence of numbers let me show you so\nyou type range\nthis is a built-in function just like\nthe print and input functions here we\ncan pass a value like 5 and this will\nreturn a range object\na range object is an object that can\nstore a sequence of numbers let me show\nyou so\nlet's call that numbers\nso this is a range object\nin this object we're going to have the\nnumbers 0 to 5 but excluding 5.\nnow if we print\nnumbers\nwe're going to see this message range of\nzero to five not the actual numbers\nbecause this is the default\nrepresentation of a range object to see\nthe actual numbers we need to iterate\nover this range object using a for loop\nin the last video you learned how to\niterate over a list using a for loop but\nwe can also iterate over a range object\nusing a for loop basically we can use\nthe for loop with any object that\nrepresents a sequence of objects\nso instead of printing numbers\nwe're going to use a for loop\nfor number\nin numbers colon\nwe're going to print\nnumber\ntake a look\nnow we see the numbers zero to four\nso\nrange of five\ngenerates a sequence of numbers starting\nfrom zero up to the number we specify\nhere\nnow if we supply two values\nthe first value is going to be\nconsidered the starting value\nand the second value is going to be\nconsidered the ending value and it's\ngoing to be excluded so range of 5 to 10\nis going to generate the numbers 5 to 9.\ntake a look\nthere you go\nnow we can also supply a third value and\nthat will be used as a step so let's say\ninstead of having a sequence of numbers\nlike five six seven eight nine we wanna\njump two numbers at a time so 5 7 9 and\nso on so here we pass 2 as the step take\na look\nso we get these odd numbers 5 7 and 9.\nso this is the range function in python\nlike quite often you see the range\nfunction used as part of a for loop\nbecause we don't really need to store\nthe result in a separate variable we can\ncall the range function right here where\nwe are using the numbers variable so we\ncan type range of five and this will\nreturn a range object holding the\nnumbers zero to four take a look\nthere you go\nso we don't really need to store the\nresult in a separate variable like\nnumbers\nthere you go\nin this tutorial we're going to talk\nabout tuples in python tuples are kind\nof like lists we use them to store a\nsequence of objects but tuples are\nimmutable which means we cannot change\nthem once we create them let me show you\nso i'm going to start by defining a list\nof numbers 1 2 3.\nnow we use square brackets to define a\nlist\nand parenthesis to define a tuple so now\nthis numbers variable is storing a tuple\nif we try\nto reassign let's say the first element\nwe're going to get an error\ntopple object does not support item\nassignment so this is what i meant by\ntuples are immutable they're\nunchangeable\nalso\nif you type numbers dot\nyou don't see any methods like append\ninsert remove and so on we only have\ncount and index\ncount returns the number of occurrences\nof an element for example\nif we have\nlet's say\ntwo threes in this tuple\nand call count of three this will return\n2.\nthe other method we have here is index\nand this returns the index of the first\noccurrence of the given element\nnow\nthese other methods you see here that\nstart with an underscore they're called\nmagic methods it's an advanced topic and\ni've covered it in detail in my complete\npython programming course if you're\ninterested the link is down below this\nvideo\nso tuples are immutable we cannot change\nthem once we create them\nnow practically speaking most of the\ntime you would be using lists but there\nare times that once you create a list of\nobjects you want to make sure that\nsomewhere in your program you or someone\nelse is not going to accidentally modify\nthat list if that's the case then you\nshould use a tuple\nhey guys i just wanted to let you know\nthat i have an online coding school at\ncodewoodmarch.com where you can find\nplenty of courses on web and mobile\ndevelopment in fact i have a\ncomprehensive python course that teaches\nyou everything about python from the\nbasics to more advanced concepts so\nafter you watch this tutorial if you\nwant to learn more you may want to look\nat my python course it comes with a 30\nday money back guarantee and a\ncertificate of completion you can add to\nyour resume in case you're interested\nthe link is below this video\nhey"
  },
  {
    "video_id": "O7XFUhmRTvI",
    "title": "Top 10 AI Tools to Supercharge Your Python Programming",
    "url": "https://www.youtube.com/watch?v=O7XFUhmRTvI",
    "channel": "geekyai",
    "published_at": "2024-10-11T16:00:31Z",
    "description": "In this video, we're diving into the top 10 best AI tools that can help beginner Python programmers. These tools will make coding easier, help you write clean code, and even solve programming problems in real-time. Whether you're just starting out or looking to boost your skills, these AI tools will turn you into a coding pro faster than you think. Let‚Äôs explore them together!\n\n*‚ù§Ô∏èSubscribe For  More:üëâ* https://www.youtube.com/channel/UCvmFLEdTaMlzghkCW1hESIA?sub_confirmation=1\n\n#AI #PythonProgramming #CodingTools #BeginnersGuide #ProgrammingTips #GitHubCopilot #Replit #CodeGPT #PyCharm #JupyterNotebooks",
    "has_transcript": true,
    "transcript_preview": "ever wanted to improve your coding\nabilities without going through a\nheadache imagine having a personal\nassistant able to help you debug smarter\ncode faster and even make learning\nenjoyable we're exploring the top 10 AI\nTools in today's video that are not only\nsmart but also beginners friends these\ntools will help you to level up or start\nout and make Python Programming seem\nlike a breeze all set to equip coding as\nyour new superpower let's start now\nnumber one GitHub\nco-pilot imagine having a p...",
    "full_transcript": "ever wanted to improve your coding\nabilities without going through a\nheadache imagine having a personal\nassistant able to help you debug smarter\ncode faster and even make learning\nenjoyable we're exploring the top 10 AI\nTools in today's video that are not only\nsmart but also beginners friends these\ntools will help you to level up or start\nout and make Python Programming seem\nlike a breeze all set to equip coding as\nyour new superpower let's start now\nnumber one GitHub\nco-pilot imagine having a programmer\nfriend who is constantly willing to\npropose the next line of code even\nbefore you know you will need it in\nessence GitHub co-pilot is a strong AI\ndriven tool that lets you type quicker\nby offering intelligent\nrecommendations using GitHub co-pilot\nwill teach you less effort intensive\ncleaner more efficient code writing\ntechniques it's like having a mentor\nleading you over each stage and Prov\niding real time help that accelerates\nyour learning curve what if you find\nyourself caught on a particularly\nchallenging problem next we will discuss\na tool that will enable you to unravel\neven the most messy code equivalent to\ncarrying a genius debugger right at hand\nkeep tuned number two repetz Ghost Rider\nall set to expand on your coding then\nintroduce repetz Ghost Rider this\nartificial intelligence tool generates\nwhole functions and even entire programs\ndepend depending on your input therefore\nguiding your coding efforts it's like\nhaving a supercharged autocomplete\nfunction with style and code context\nawareness ghost rer will let you rapidly\ndevelop code snippits and learn new\ncoding strategies only by interacting\nwith this artificial intelligence tool\nit's a great approach to increase output\nand acquire understanding of best\npractices imagine now that you must view\nyour code in real time and observe how\nit functions we will then explore a\nprogram that converts your code into\nInteractive visuals therefore enabling\nyou to grasp Its Behavior and identify\nand detect problems before they become\ncrises let's keep moving number three\ntab N tab 9 is your go-to tool if you\nwant one that elevates code completion\nthis AI powered autocomplete tool\nprovides context aware recommendations\nthat get better as you work and fits\nquite nicely into your coding setup by\nallowing AI to predict and complete code\nSnippets tab 9 will help you to speed up\nyour work by lowering mistakes and\nincreasing ing your efficiency your\nprocess will be more seamless and\nunderstandable if an AI continuously\nlearns and adjusts to your coding style\nbut if you wish for a program that can\ngenuinely learn from your errors or how\nto code better we will then look at a\ntool that offers comments and advice to\nassist you raising your coding\ncompetency similarly to a personal code\ncoach don't miss this number four code\nGPT want to write code and get answers\nto your programming problems right away\ncode gvt is a great program that uses\nGPT technology to help with coding\nchores and offer explanations for\ndifferent programming ideas it's like\nhaving a professional coder right at\nyour fingertips you'll learn how to\nquickly make code Snippets and get full\nanswers for tricky coding questions with\ncode GPT it helps a lot with learning\nand fixing problems which makes code\nproblems a lot less scary want to know\nabout tools that will not only help you\ncode but also make sure it is perfect\nnext we'll talk about a tool that helps\nyou keep up with high quality code\nstandards and does automatic code\nreviews watch out number five sorcery\nhave you ever wished you had a code\nreviewer who checks every detail sorcery\nis like having your own personal expert\non code quality who looks over your code\nand offers ways to make it better it\nworks with your IDE and gives you input\nin real time to help you write better\ncode sorcery will teach you how to\nimprove your code by giving ideas that\nyou can use to make it easier to read\nand work better this tool makes it easy\nto come up with best practices and clean\nup your code what if you want a tool\nthat shows you your code mistakes right\naway and lets you learn from them now\nwe'll talk about a tool that gives you\nimmediate feedback and chances to learn\nfor every mistake you make in code do\nnot go anywhere number six pilent pilent\nis like having a watchful eye on your\npython code this strong tool checks your\ncode for mistakes make sure you follow\nthe rules for writing code and gives\nideas on how to make your code better if\nyou want to write clean usable python\ncode you have to use this you'll see how\npilent helps you find bugs follow best\npractices and and make your code easier\nto read it detailed reports and ideas\nare very helpful for both new and\nexperienced coders who want to get\nbetter but what if you need a tool that\ndoes more than just look over your code\nwhat if you need one that also helps you\nwrite tests to make sure it works\nperfectly next we'll show you a tool\nthat will make sure your code always\nworks perfectly like having an automatic\ntesting suite number seven kite kite is\nlike having a personal coding assistant\nknowing your coding style as you type\nthis AI powered tool provides clever\ncode compliments and documentation\nsearches it helps you create code faster\nand with less mistakes by analyzing your\ncoding patterns and offering ideas that\ncomplement your particular style kite\nwill help you improve your coding\nefficiency with quick access to\npertinent documentation kite can\nrecommend the next logical lines of code\nfor instance if you're working on a\ndifficult function therefore saving you\ntime spent looking for syntax or method\nnames it even offers demand\ndocumentation so you won't have to leave\nyour Editor to hunt for facts however if\nyou see a tool that not only helps with\ncode completion but also fits very well\ninto your workflow with sophisticated\ndebugging features we will then present\na tool that not only simplifies coding\nbut also debugging and optimizing your\ncode continue watching number eight pie\ncharm pie charm makes your IDE a\nPowerhouse for python development when\npaired with artificial intelligence\nplugins robust features of pie charm are\nwelln when augmented with AI plugins it\nprovides intelligent code completion\nerror detection and automated code\nproduction the these plugins smooth down\nand speed your development process by\noffering real-time feedback and\nsophisticated refactoring features pie\ncharm will help you use tools including\ncode navigation rapid fixes and context\naware suggestions to simplify your\ncoding work for example error detection\nhelps find possible problems before you\never run your code AI driven code\ncompletion can forecast the next actions\ndepending on the situation of your\nproject these elements taken together\nmake coding less prone to mistakes and\nmore effici efficient but you might want\na solution that efficiently manages your\ndevelopment projects and dependencies\ngoing Beyond code writing we will then\ndiscuss a tool that specializes in\nProject organization to guarantee\nscalable and well- maintaining of your\nsoftware number nine codex codex is an\nartificial intelligence model capable of\ncomprehending and creating code in\nseveral programming languages including\npython it is capable of converting\nnatural language explanations into\nuseful code Snippets it is the engine\nunderlying many contemporary coding\ntools from creating code based on basic\ndescriptions to tackling difficult\ncoding challenges codex May assist with\na variety of projects using codex's\nsophisticated features will teach you\nhow to create whole functions or even\napplications with only a few words for\ninstance you can specify a particular\ncapability you desire and codex will\ngenerate code fit for your needs it's\nlike having a really intelligent\nco-coder that can concurrently help with\ncoding and brainstorming curious about a\ntool that transforms coding practice\ninto a dynamic and interactive EXP\nexperience in addition to facilitating\ncode generation we will then explore a\ntool that increases the enjoyment and\nease of learning coding don't skip this\nnumber 10 Jupiter notebooks for python\nprogrammers and data scientists Jupiter\nnotebooks are a must-have adding\nartificial intelligence into these\nnotebooks greatly increases their\ncapacity this strong tool makes\nexperimenting with codes simpler and\nhelps you to get important insights from\nyour data by providing real-time data\nvisualization interactive code execution\nand automated analysis Jupiter notebooks\nwill help you to see how these tools\nsimplify challenging chores the tool\nexecute interactive\nexperiments automatically create visuals\ncatered to your data and offer analysis\nrecommendations this helps you to\nconcentrate on comprehending your\nresults instead of becoming mired in\nhand data processing if you enjoyed\ndiscovering these AI tools subscribe to\nremain up toate on the most recent\ndevelopments in Python Programming got\nany thoughts answer questions regarding\nthese tools please leave a comment below\nI'm eager to hear from you and assist\nyou with any coding problems you may be\nexperiencing continue coding with\nconfidence"
  },
  {
    "video_id": "u3zj0GfLoP8",
    "title": "PYTHON TUTORIAL FOR BEGINNERS IN 11 HOURS (in ENGLISH) || BASIC PYTHON PROGRAMMING || DATA SCIENCE",
    "url": "https://www.youtube.com/watch?v=u3zj0GfLoP8",
    "channel": "Sundeep Saradhi Kanthety",
    "published_at": "2022-04-08T05:00:29Z",
    "description": "Hi Guys \nI found few Mistakes in the video sessions if you find pls comment so that i will add in description so that everyone will be benefited.\n\nMistakes Found\n1. Creation of Empty SET - using set( ) not by giving blank curly braces.\n\nHow to Install Python\nhttps://youtu.be/fEsHK2OzTd4\n\nHow to Install ANACONDA\nhttps://youtu.be/tAdeqn0KUdw\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nTOPIC WISE START TIME\n00:00:00 - Introduction to Python\n00:05:21 - Features & Installation of Python \n00:23:20 - Literals\n00:53:46 - Datatypes & Identifiers\n01:16:14 - Types of Assignment Statements\n01:25:03 - Input & Output Functions\n01:40:57 - Usage of MAP Function \n01:46:30 - Keywords\n02:00:44 - Operators & Precedence\n02:49:38 - Decision Control Statements\n03:29:15 - Iterative Control Statements\n03:49:44 - Break and Continue\n04:07:58 - List\n05:29:37 - Tuples\n05:58:44 - Strings\n06:57:57 - Set\n07:40:05 - Dictionary\n08:57:52 - Functions\n10:17:07 - Files\n\n---------------------------------------------------------------------------------\nPython Programming Using Problem Solving Approach by Reema Thareja Book Link\nhttps://amzn.to/3ZWgIWI\n\n#pythonprogramming \n#pythonintelugu \n#learnpython \n#pythonfundamentals \n\n-----------------------------------------------------------------------------------------------------------------------\nPYTHON OOPS - MODULES - EXCEPTION HANDLING (‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞≤‡±ã)\nhttps://youtu.be/B-Rkxotn9Ok\n\nPYTHON NUMPY TUTORIAL IN TELUGU (‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞≤‡±ã) || COMPLETE NUMPY TUTORIALS IN TELUGU\nhttps://youtu.be/p2k_9I4VGYs\n\nPYTHON PANDAS TUTORIAL IN TELUGU (‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞≤‡±ã) || COMPLETE PANDAS TUTORIALS IN TELUGU || DATA SCIENCE\nhttps://www.youtube.com/watch?v=brgzTJwHIKI&t=4456s\n\nMATPLOTLIB LIBRARY - PYTHON PROGRAMMING (ENGLISH)\nhttps://www.youtube.com/playlist?list=PLLOxZwkBK52BQjsMFcnOB0wjzAUneSNfI\n\nHow to Install Python\nhttps://youtu.be/fEsHK2OzTd4\n\nHow to Install ANACONDA\nhttps://youtu.be/tAdeqn0KUdw\n\nPYTHON PROGRAMS\nhttps://www.youtube.com/playlist?list=PLLOxZwkBK52BC-U5nWzUm6dBsFIFRtQuO\n\nPYTHON DATABASE CONNECTIVITY - MYSQL & MS-EXCEL\nhttps://www.youtube.com/playlist?list=PLLOxZwkBK52CIfeg1YISebeYu2Cfc_6Pl\n\nOPERATING SYSTEM\nhttps://www.youtube.com/playlist?list=PLLOxZwkBK52C0LlaTlu5emckvUrlsG6QY\n\nXML (eXtensible Markup Language)\nhttps://youtube.com/playlist?list=PLLOxZwkBK52A13WlDswibzX9od8_hfLhj\n\nHTML TUTORIALS WITH IMPLEMENTATION || LEARN HTML IN 4 HOURS\nhttps://www.youtube.com/watch?v=a8W952NBZUE&t=1305s\n\nLEARN CSS IN 3 HOURS || CASCADING STYLE SHEETS FOR BEGINNERS\nhttps://www.youtube.com/watch?v=_-tR5OQS5cI&t=13s\n\nJAVA SCRIPT FOR BEGINNERS IN 7 HOURS || LEARN JAVA SCRIPT IN 7 HOURS || JAVA SCRIPT\nhttps://www.youtube.com/watch?v=BTuCzffKh8E&t=4s\n\nETHICAL HACKING\nhttps://www.youtube.com/watch?v=xOHKc9oxCdA&list=PLLOxZwkBK52ASKvoQSZxyj4NbdbLlpwaJ\n\nVI EDITOR BASICS IN LINUX / UNIX || LEARN VI EDITOR COMMANDS || LINUX || UNIX\nhttps://www.youtube.com/watch?v=pCxej5EPID8&t=38s\n\nHOW TO DOWNLOAD & INSTALL MySQL IN WINDOWS 10\nhttps://www.youtube.com/watch?v=6dC0xjdIPZ0&t=302s\n\nDATABASE MANAGEMENT SYSTEM\nhttps://www.youtube.com/playlist?list=PLLOxZwkBK52B6FqMOu6FfU4_5Id2cBStN\n\nC PROGRAMMING\nhttps://www.youtube.com/watch?v=aUqO-dgzMw4&list=PLLOxZwkBK52AE9jFVOGZTJxaiAC_xB8Yy\n\nCORE JAVA TUTORIAL FOR BEGINNERS || LEARN CORE JAVA IN 15 HOURS || JAVA TUTORIALS FOR BEGINNERS\nhttps://www.youtube.com/watch?v=ZFnRvpxpnOc&t=4961s\n\nDATA STRUCTURES USING PYTHON (ENGLISH)\nhttps://www.youtube.com/playlist?list=PLLOxZwkBK52Apt7hZ--6D5q1QY6uQ6vgt\n\n----------------------------------------------------------------------------------------------\nInstagram : https://www.instagram.com/sundeepsaradhikanthety/\n#Python #Programming #Coding #PythonTutorial #LearnPython  #PythonProgramming #PythonTips #PythonProjects #PythonBeginner #PythonAdvanced #PythonTricks #DataScience #MachineLearning #ArtificialIntelligence #WebDevelopment #PythonLibraries #PythonPackages #PythonCode #PythonLearning #PythonCommunity\nFor Python Interview Questions / MCQs you can refer the below link\nhttps://socialtalky.com/python-interview-questions-multiple-choice-quiz/\n\n#Python #Programming #Coding #PythonTutorial #LearnPython  #PythonProgramming #PythonTips #PythonProjects #PythonBeginner #PythonAdvanced #PythonTricks #DataScience #MachineLearning #ArtificialIntelligence #WebDevelopment #PythonLibraries #PythonPackages #PythonCode #PythonLearning #PythonCommunity",
    "has_transcript": true,
    "transcript_preview": "[Music]\nhello friends welcome back to our\nchannel\nso in today's session i would like to\nshare\nsome information\nabout the python programming the general\ninformation\nso all of you know about this python\nprogramming language is a most popular\nlanguage these days so in every\napplications we are using this python\nprogramming\nso in this regard i am getting a lot of\nquestions to my whatsapp or to my\ncomment section so regarding this python\nprogramming so those who want to begin\nthis python program\nso i...",
    "full_transcript": "[Music]\nhello friends welcome back to our\nchannel\nso in today's session i would like to\nshare\nsome information\nabout the python programming the general\ninformation\nso all of you know about this python\nprogramming language is a most popular\nlanguage these days so in every\napplications we are using this python\nprogramming\nso in this regard i am getting a lot of\nquestions to my whatsapp or to my\ncomment section so regarding this python\nprogramming so those who want to begin\nthis python program\nso in this session i would like to\nshare about the things the general\nthings before learning python program\nso the first question i am getting you\nknow these days is who can learn python\nso i'm getting lot of comments that we\nare from mathematical background and we\nare from civil background we are from uh\nmechanical background so whether we are\nit is uh\ni mean is it possible to start our\ncareer in python is it possible to\nlearn python easily and all these\nquestions i am getting these days\nso anyone can learn the python\nprogramming\nthis is this programming language can be\nlearned by anyone so irrespective of the\ndiscipline okay so\neven if the people from mechanical\nmathematical or electrical backgrounds\nthat means other than the computer's\nbackground so anyone can learn this\nprogramming language\nso why we have to choose this\nprogramming language\nsee why we have to choose this\nprogramming language\nso\napart from the c c plus plus in java\nthis is a very simple to read and write\nthe syntax and it is very easy to\nunderstand the syntax\nand definitely the number of lines is\nalso reduced when compared to other\nprogramming languages\nand even if you are not having any prior\nprogramming knowledge\nyou can learn python easily\nso that it is it is a platform\nindependent and it it most over it is a\nopen source software that means you can\nfreely download it from the internet and\nyou can make use of\nuh pro writing the programs\nso this is the main reason why we have\nto choose the python program\nand the next question i am getting is\nhow long it required to learn python so\nin order to\nget the python basics\nso it requires around four or five weeks\nso if you are having any prior uh\nknowledge about programming and if you\nare not having any prior knowledge about\nprogramming so it requires around uh\nseven to eight weeks hardly\nokay and one important thing is you need\nnot have any instructor\nright so just by watching the videos so\nin the youtube you will be having a lot\nof\nsources so you can select the source so\neven our channel is having the python\nprogramming videos both in english and\ntelugu language so you can\nvisit our channel visit our videos also\nso there is a lot of source in our\nyoutube so you just follow the youtube\nvideos and if you are having any\nmaterial you can follow that material so\nyou need not have any instructor to\nlearn python so that is a very user\nfriendly\nright so even you are not having any\nknowledge in the programming you can\neasily understand this programming\nlanguage\nright and if you are having any\nknowledge then it would be very easy for\nyou to learn this language so\nyou can\nlearn this language very fast so if you\nare not having any prior knowledge it\nmay take some time\nokay and one more thing you have to\nspend more time on writing programs that\nmeans a practical oriented so\nimplementations\nso only listening to the videos or only\nreading the books is not sufficient to\nget a knowledge in python so not only\nthe python any any programming language\nyou need to spend more time on writing\nprograms so that will be that is the\nonly\noption\nto be strong in any programming language\nso apart from other programming\nlanguages the python will be very simple\nand the last question so what we can do\nand where we can apply this python\nso log the\nrest of applications in every\napplication we can use this python so\nbasically if you want to develop any\nweb-based applications you can use this\npython and if you want to develop any\ngames you can use this python\nand if you want to uh apply some data\nanalysis analysis on the large data or\nif you want to visualize the data so\nthen also you can use this python uh\nthat field called as a data science\nand also even if you are interested in\nmachine learning and robotics and\nartificial intelligence then this is the\nbest choice the python is the best\nchoice to select the programming\nlanguage because by using this python\nprogram\npython programming\nyou can easily implement all the\ntools of machine learning and\nea\nright so these are the basic questions\narised in your mind uh if you want to\nstart learning python so hope uh all the\nqueries are\ncleared learning language\nso python programming\nso this is also is\nthe programming language which is\nsimilar to our c programming so let us\nsee the features of this python program\nso first one it is a high level language\nso we will use a normal english verse to\nrepresent the\nsyntaxes and everything and second one\nis it is very simple\nin every every aspect that means\nin order to write the code it is very\nsimple in order to understand the code\nit's very simple and\nwhen compared to the c language right\nthe third one is\ngui there is a graphical user interface\nso in easy steps we can\nachieve this graphical user interface\nusing this python programming\nkit sense2 say cases to language just\nsimilar to our c program that means\na is\ndiffer from\ncapital j\nso both are different\nso\nas alphabet voice it is a small letter\nit's a capital letter but in programming\nlanguage this is a separate i mean\nthis small a is different from capital\nplatform independent so this programming\nlanguage can run in any platform so\nwindows linux mac in toast in any\noperating system we can execute this\npython programs\nthe one more feature is no compilation\nand linking is required so\ncoming to the c program in order to\nexecute any c program first the step is\nwe have to convert the\nhigh level language to the low level\nlanguage so in that process we are using\nsome compiler so the compiler will\nconvert this and then we will execute\nthe program but here in this python\nprogram that is\nthe compilation is not required\nautomatically when you write the code\nthe code will be automatically converted\ninto white code\nso no compilation and linking will be\nused i mean there is no chance of\ncompilation and linking in this python\nprogramming\nso directly after writing the code\ndirectly you can execute the programs\nso one of the important feature is it's\nan object-oriented oriented programming\nis also\nso it's not only a structured oriented\nso it's an object oriented also so it\nwill have some oops concepts right\nanother important feature is it requires\na few lines of code than c language so\nwhen compared to the c language the\nnumber of lines of code is very less\nso the worst case complexity of any\nprogram is measured as a lines of code\nright so\nthis programming language will reduce\nthe lines of code\nso another feature is no type\ndeclarations are required so in c\nlanguage\nbefore using any variable in the program\nfirst we have to declare that variable\nso here in this python programming that\ndeclaration is not needed directly\ninitialization of a variable will\nautomatically treat it as a\ndeclaration we'll consider it as a\ndeclaration so for example if if you\nwant to initialize\nsome 5 to a\nin c we have to declare it as a\nthen a is equal to 5. so this is the\ncode for declaring or assigning a value\nof 5 to variable a in python programming\njust simply by writing the single one a\nis equal to 5 automatically the 5 will\nbe assigned to a which is declared with\nan integer type so here no explicit\ndeclarations are required so no data\ntypes are required to declare the\nvariables explicitly directly\ninitialization itself declares a\nvariable with a data type so here a is\nequal to 5 that means\na will be declared as skinned and\nassigned to\n5 that will be done with only one line\nof code so no type declarations are\nrequired\nso these are the\nfeatures of python programming now let\nus see the applications of python\nprogramming so where we can use this\npython programming so in which type of\napplications we can develop by using\nthis python program\napplications\nthe first one is web designing\nsorry\nso by using this python scripts we can\ndevelop web pages we can develop the\nwebsites right\nnext\nso one of the feature graphical user\ninterface so gui development\nso graphical user interface so\nfront end so for any application the\nfront end is\nmore important so that graphical user\ninterface can also be developed by using\nthis python programming\nnext\nso all types of business applications\ncan be developed by using this python\nprogramming\nso games can be developed\nand a 3d graphics can also be\nhm by using this python programming so\nby using this python programming we can\nachieve all these things we can use this\npython programming for web development\ngui business applications games and 3d\ngraphics and also accessing the database\naccessing the database\nand this python programming is a free\nsoftware\nit's a free software see so open source\nso it will be directly available in the\ninternet so we can directly download\nthis python programming and we can\ninstall in any platform that means\neither in a linux operating system in a\nwindows operating system or in macintosh\noperating system so in any operating\nsystem this python programming can be\ninstalled right so we can\ninstall this and you can directly run\nthe programs\nso these are the some of the\napplications of python programming so\nnow\nwe will see how to install the python\nprogram i mean by python software so\nthere are different versions of python\nso\nnow let us see how to install the latest\npython software\nnow uh let us see how to download the\npython software and uh how to install\nthat in our system\nso it's a as i said that\nit is a open source that is it's a free\nof cost it's a freeware so go to the\ngoogle\nso type\npython\ngoogle search so that you will get a\nfirst link that is python.org\npython.org open that python.org this is\nan official site for python so go to the\ndownloads all releases and the latest\nversion of python is 3.7.0\nso there will be different versions\nas we know that so\nby adding some additional features the\nversion will be changed so now the\nlatest version of python is python 3.7.0\nso click on this\nbutton so you can see run save and\ncancel so directly you can run\nto install the software or save it\nbefore installing the software so just i\nwill run the software\nso\nit shows it will take two minutes one\nsecond\naround two minutes to install the\nto complete the installation of python\nso as in a c language the extension of c\nfiles are uh\nusing dot c right all the c files will\nbe having the file extension dot c so by\nseeing that file extension we can know\nthat the\nfile consists of the c programming\nright similarly the python files will be\nhaving the\nfile extension dot py so all the python\nprograms will be saved by using the file\nextension dot p y\nso as i have said uh when compared to\nthe c language it is almost in very very\nmuch simple\nand very simple and easy to\nunderstand and to write the code\nso here no need of using\ndata types\nright i separate data types to declare a\nvariable so there will be a data types\nbut the there is no need of declaring\nthat variable before using that in the\nprogram as we\nas we have\nto do in the c programming right so in\nthe c programming first we have to\ndeclare a variable and then we have to\nuse that variable in the program so here\ndirectly we can assign a value to the\nvariable so that single statement itself\ndeclares a variable with a data type\nright\nso almost it's completed\nit's a 74 percent\nso and also the main feature is that\nmeans the main applications of this\npython programming is so by using this\npython programming so we can uh develop\nthe web websites that means in the web\ndevelopment it will be used and\nin order to develop some games\nso\nbusiness applications and etc we can use\nthis python programming simply we can\nreplace the c programming with python\nprogramming so that the complexity will\nbe\nvery less\nso mainly the complexity of the program\ndepends upon the lines of code that\ni mean the worst case complexity is the\nlines of code and that can be reduced in\npython programming when compared to the\nc programming see now\ni got a pop-up that is run so just i\nwill\nrun that\nso install now\nso directly we can\ninstall the python\nyes\nso it's an interpreter it's not a\ncompiler it's an interpreter so line by\nline execution will be done here\n[Music]\nso in some idlis so we can see that\nline by line executions\nso here no the compiling is not required\nthe compilation is not required directly\nwhile we are typing the program or when\nwe are writing the program that will be\ndirectly converted into bytecode\ndirectly we can run the program so that\nwe can get the\noutputs\nso in order to keywords also\nthe number of keywords are very less\nwhen compared to the c language so we\nknow that c language consists of a 32\nkeywords and here there will be less\nthan 32 keywords\nvery simple and very easy\nit also supports the object-oriented\nprogramming that means it will follow\nthe oops concepts\nso it can by using this python we can\nget the graphical user interface\nso in order to develop this graphical\nuser interface that means the front end\nwe can use this python programming also\nso almost finished\nso this we call it as a interpreter\npython interpreter\nso here we will get the python shell\nso in the python shell we can execute\nthe commands it's an interpreter so in\norder to execute a more number of lines\nof code so we have to open a new file\nand we have to save the program and then\nwe can we have to run that particular\nfile in python shell itself so without\nthe python shell we can't execute the\nprograms\nand one more important feature of this\npython is we can also\nembed the c programs into this python\nprogram so we can use the cpc programs\nin a python program\nsee the\ninstallation is completed now we can see\nthe python\nin my programs see let us see\ngo to all programs\nnow let us search for the python\nsee here you can see python module docs\nideally python so this one is a\ninterpreter\nsee this is the python interpreter as i\nhave said that it's an interpreter the\nline by line will be executed so a is\nequal to 5 so there is no need of\ndeclaring the variable ia so\nthe simple statement a is equal to 5 it\nit implies\na variable a is declared as an integer\nand it a 5 is assigned to a so simply we\ncan\nprint\na\ndirectly the a value will be printed\nright so line by line execution will be\ndone so if you want to write some lines\nof code if you want to write a program\nand then if you want to execute that\njust\nopen this file\nnew file so new window will be appeared\nso here\nwrite the code\nso write the code a is equal to five\nprint here\nsave the file\nso save the programs in any folder\nso we can save the files\nby using dot py\nright\ntest dot py\nnow after saving this\nprogram just up click on run button\nrun\nrun module\nautomatically\nthe python shell will execute that\nparticular program so without python\nshell you can't execute the programs so\nthis is called python shell\nand here itself a line by line execution\ncan be done and if you want to write a\ncomplete program you can\ngo to the file new file and write the\nprogram here and save the file and go to\nthe run command and apply the i mean\nclick on the run module so that you can\nget the\nrun\nright so python 3.7.0 shell so hope you\nunderstood the installation downloading\nand installation of the python software\nso go to the official website that is\npython.org there you can find the\ndownloads and from the downloads you can\ndownload the python 3.7.0 shell\nhope you understood this uh how to\ninstall or how to download the python\nsoftware from the internet and how to\ninstall it in our system\nso first\nhow to execute a program\nso\nthe very first step is we have to write\nthe code that means we have to write the\ninstructions so for writing the\ninstructions we need to open the editor\nso here\nin the previous session we have\ninstalled one ideally\nso you can find this in your system\nafter installing the python so open this\nidli\nright so you will get a window\nwith the symbols so there you can find\nfile menu\nso open this file\nso open the new file\nopen the new file\nand now after opening the new file\nright on the instructions\nwrite down the instructions\nright so instructions are nothing but a\nprogram right so program is a set of\ninstructions so we have to write the\ninstructions\nand then\nsave the file\nwith the file name\nwith extension\ndot\np y\nand after saving the file\nnow directly\nrun the program\nfrom eileen\nso\nfor running the program we can directly\npress\nf5\nall\nor directly you can find the option run\nso click on this one so that you can\nfind the\nrun program so click this run so that\nyou get the the python will be i mean\nthe program will be executed in the\npython\nshell script\nright so this is the procedure to\nexecute the any python program so first\nwe have to open the ideally open the new\nfile write down the instructions and\nthen save the file with the file name\nany file name so with the but the\nextension should be\ndot p y so in the c language the\nextension should be in a dot c here the\nextension should be in dot p y\nand the last step we have to run the\nprogram\nusing the ideally that means directly we\ncan\nclick by using f5\nso this is the procedure to execute the\nprogram\nnow\nlet us look on to the\nlaterals\nso all these are the basics of python\nso lateral constants\nlateral constants\nnow here in this little constants we are\ngoing to focus on two things\none is\non numbers\nanother one is strings\nright so numbers can be\nintegers\nfloating point numbers\nyou can say it as a fractional numbers\nand even a complex numbers\neven a complex numbers\nso strings can be\nsingle character\nor\ngroup of characters\nright so these are the\ndifferent letters we are going to\ndiscuss the numbers integers floating\npoints and complex numbers now let us\nsee one by one first we will move on to\nthe\nnumbers\nso how many ways how many categories are\nhow many ways of i mean different\nnumbers we can use in this python\nso as we know the integers\nso integers are some like 3\n5\n7 100\n3 350 and so on all these are the\nintegers so there will be no fractional\npart only the integral part\nnext\nfloating point numbers\nso floating point numbers consists of\nfractional parts\nso fractional part like 1.4\n5.6\n3.1423\nand so on\nso all these are the floating point\nnumbers\nright\nnext coming to the complex numbers so\nhere right in python we can also use\nthese complex numbers directly where in\nc language we can't use these complex\nnumbers in order to execute this complex\nnumbers we have to\nuse the structures concept to\nperform the operations on complex\nnumbers but in python directly we can\nuse these complex numbers\nby using some data type right so complex\nnumbers\nin terms of uh a plus ib\nlike 5 plus\n3i\nso all these are the complex numbers\nso here\nif we want to store a long integers that\nmeans with large values right so long\nintegers or large values\nso\nsee\nlong integers if you want to store or\nassign a value to the variable as long\ninteger\nwe need to add a suffix\nl\nor\ncapital m\nso any number one two three four five\nsix seven eight nine\nfour five so this number is very large\nnumber and it can be you stored in long\ninteger and\nthis number is represented as a long\ninteger\nif we\nadd l as a suffix to this number\nso in order to represent this long\nintegers\nwe have to suffix the l to the\nparticular number so unless you add the\nsuffix l it will not be represented as a\nlong integer\nright for every long integer this l must\nbe suffixed if it can be in a small case\ni mean lower case or uppercase\nbut the suffix must be added\nright so\nhere\nwe can have\nthe three\npossibilities\nusing these numbers\nso for example\nas i have explained earlier if a is a\nvariable a is equal to 5 is well valid\nis equal to 5.43 is valid a is equal to\n5 4 3 2 7 8 9\n4\n6\nl is valid and a is equal to 5 plus 4 i\nis valid\nright so this is the\ninteger\nthis is a float\nor fractional this is the long integer\nand this is a complex\ncomplex number\nright\nnext so here in this python programming\nthere are\nthree possible cases while performing\nthe argument operations on two members\nso first one\narithmetic\noverflow\nright\naromatic overflow\nproblem\nnext arithmetic\nunderflow problem\nnext\nloss of\nprecision problem\nright so there are three possible\nproblems we can uh\num\nget in this python programming first one\narithmetic overflow problem that means\nif we are\ntrying to multiply two large numbers\nso\nmultiply two long integers right long\nfloating point integers\nyou can simply write it as a two\nlong\nfloating point numbers\nthat means\ninto right so if you want to try to\nmultiply two long floating point numbers\nobviously we can\nget\nthe result as i nf which is called as\ninfinity that means we will get the\nresult as a very long integer right so\nvery long integer or a floating point so\nit's very long so that's why the python\nwill return the value as ilf that is\ninfinity\nso this will happens only when the\ntwo large point large floating point\nnumbers\nare used to multiply\nnext underflow\nso here also\nso if two\nthis\nthis problem will comes in\ndivision\nright\nso\nhere\nif the numerator\nsorry\nif the denominator\nis large\nthen\nnumerator\nif the denominator is larger than the\nnumerator\nthen\nit will results the python will result\ninto result it as 0\n0\nso for example\n1 divided by\nsome\n10 000\nso it will result as 0.0001\nsorry 01.\nso\nthis kind of\nresult the python will give\nthe 0\nright that is almost equal to 0\nso this is one problem that is\narithmetic underflow problem this will\noccur\nwhen\nyou perform the division operation in\npython\nnext loss of precision\nso here also\nthis occurs\nwhen you perform the division operation\nthe division operation so if the\nnumerator is divided by denominator and\nthe result is a never-ending then we\ncall it as a loss of precision so if\nthat for example so i will explain it\nfor example if you perform 10 divided by\n3\nso what is the result\nso 3.333\n[Music]\nand so on\nand so on\nright so there is never any\nso in these cases\nwe will get the loss of precision here\nalso the best example i can say\nso 1 divided by 3\n1 divided by 3\nright\nso\n0.333 and so on\nhere also so in this cases\nso in these cases we will get the\nproblem that is loss of precision here\nthis we call it as a precision so after\ndecimal point the values we call it as a\nprecision so\nthere is no finite\nending above these precisions in such\ncases 10 divided by 3 so in such cases\nthis problem will be arranged so these\nare the three problems may occur in\npython programming\nso by using this aromatic operator\noperations so first one automatic\noverflow that will occur if you multiply\ntwo large floating point numbers so the\nresult will be given as infinity inf\nand automatic underflow problem\nso this will occur when you perform the\ndivision operation\nso if the denominator is large then the\nnumerator\nthen automatically the python program\nwill results into\n0\nand loss of precision problem so this\nwill also occur\nwhen you perform the division operation\nso if there is no limit on precision\nvalue so example 10 by 3 so this is also\none type of problem these are the three\nmajor problems we can\nget in number system\nand also in this python programming we\ncan\nrepresent any number in a hexadecimal\nformat or octal format\nso it will be allowed\nright next\nnext one we will move on to the\nsecond\nlateral that is\nstrings\nstrings\nright\nso strings here we will use\nsingle quote\ndouble quote\ntriple quote so single code is\nrepresented\nusing this one\ndouble quotes are\nthis one\ntriple quotes\nare this one\nso here on in our python programming the\nstrings can be represented in any three\nthat means by using a single code or a\ndouble quote or triple code\nso these two are same single quote and\ndouble code are same so we can represent\nthe string\nin this way\nall\nin this way there is no change\namong these two\ncoming to this triple code we have to\nuse this triple code\nin a multi-line string\nmulti-line string\nright so that means\nfor a paragraph we can simply say that\nfor a paragraph we can use this triple\nquotes that means if any string is\nrepresented in more than one line then\nthat multi-line string can be used that\nmeans a triple quotes so for example\nso if you had a string\nwelcome to python programming so this\nthing is in two lines so we need not use\nsingle quote double quote we have to use\nthis triple code because this is this\nthing appears in more than one line so\ntriple quote using triple quotes\nright\nhope you understood these things\nnow\nnext\nescape sequences\nescape sequences\nso if you want to print\nthe text as what's your name\nsimply by writing the print statement\nthis won't give the\ncorrect output\nit will show the error\nbecause\nthis symbol\nthe single quote symbol\nis not\ncannot be represented in print directly\nso for printing this single code we have\nto use some escape sequences\nright so in order to print the special\nsymbols in the print\ni mean in the on the screen\nwe have to use this sk sequences\nso\nthis we call it as a backslash constants\nin our c language\nright so in order to print the single\ncode we have to represent that as\nbackslash single quote\nbackslash single quote\nright so in order to represent the slash\nslash slash\nso this represents the\nsingle quote\nslash in order to print the slash in\ndisplay screen\nslash slash\nslash double quote\nright slash double quote\nslash n that is for new line that we\nknow in this language some new line\nslash t is a tab space\nthis also we know in the\nc language\nsimilarly slash o is a represent the\noctal value\nright so octal value\nslash x is for hexanal\nexcel decimal value\nright so in order to represent this one\nso just we have to\nrewrite this one so print\nwhat\nslash\nsingle quote yes\nyour name\nso this will print the correct one\nbecause the single quote is represented\nby using\nthe escape sequence slash\nsingle quote\nso these are the different sk sequences\nso we will use more in the programming\nthe slash and then slash t\nrather than this single code slash\ndouble slash and all these things we\nwill frequently we will use these two\nexcept sequences in our programming so\nthis is for new line character that\nmeans uh printing in the new line and\nthen this is for\ntab space\nright hope you understood this escape\nsequences now let us move on to the last\nstring\nraw string\nstring lasting means\nwhatever you are writing on the\nprintf using this printer\nthe same will be displayed on the screen\nso whatever the information you are\nwriting in print\nthe same will be printed on the\nscreen so it will\nnot allow any escape sequences so you\nknow for that we have to\nrepresent\nr in print\nfor printing the last thing\nright so if you represent r in print\nthe text whatever you are writing in the\nprint that will be add\nexactly will be\ndisplayed on the screen\nso for example the same statement so\nthis statement will print the output as\nthis one right because here single quote\nin order to print the single code we are\nwriting slash single quote so\nin the same print i have modified as r\ncomma so i am representing as r that\nmeans rusty\nso i am so user or a programmer\nis insisting the interpreter to consider\nthe complete text as a casting so the\nescape sequence has not been\nallowed so here if you write the same\nwhat\nslash single quote yes\nyour name\nthe output will be\nthe same what\nslash single quote yes\nyour\nname\nso here the interpreter will not\nconsider this as an escape sequence\nbecause here the programmer insisting\nthe interpreter to print the last string\nso for this last string\nwe have to place r in the beginning of\nprint\nright\nthis is all about the\nescape sequences\nnow string formatting\nstring formatting so string formatting\nmeans\njust alignments\nso elements can be\nleft alignment\nright alignment\ncenter alignment\nright\nspider left alignment\nright alignment\nand\ncenter alignment\nso this is\nrepresented as\nless than symbol\nleft justify\nright greater than symbol for right\njustified\nand cap symbol you can observe this cap\nthat means uh inside c language we call\nit as an bitwise or operator xor omega\nright so this is the can this symbol\nrepresents the center alignment let me\nexplain with an example\nso if you want to print\nhello\nright or we can\nsimply by writing\nprint\nhello\ncomma\nsee\ninverted commas\nless than\n30 this implies 30 characters that means\ntotal length is 30 characters and this\nimplies the left alignment\nright\nsorry\nleft justify so\nthe text will be displayed on the right\nside itself from the right most\nso\nhere the spaces will begin from here\nto here the total length is 30\nand the text will be printed here\nright\nand similarly\nprint\nhello\ngreater than 30\nthat is a right justify\nso the text will be on the left side\nso if this is the total length of\ncharacters 30 the text will be printed\non the right side so this is the left j\nso justify\nthis is for justified\nleft to justify\nrights justified so which we can see in\nour\nwords\nwindows world right justification\nso\nby using this justification\nthe space will be\nconsidered right the space will be\nadjusted\nso that the complete text will be in a\nsame alignment so here one more thing\nleft justification means that is not\nimplies the text is printed on the left\nside the spaces will be justified\nright so left justified means the spaces\nwill be justified on the left\nand the text will be printed on the\nright\nand right justify it means\nthe spaces will be justified on the\nright and the text will be\njustified on the\nleft\nnext\nprint\nhello\ncat 30 that is if the total length is\nthis one that means 30 characters\nthe\ncat means center religion so\nthe spaces will be equally justified on\nleft side and right side\nafter\nafter displaying the text\nright hope you understood this is not\nthe this is not alignments of the text\nthis is the alignments of the spaces\nright so that's why we are specifying\nthe total length of the string\nso here this statement implies the total\nlength of the string is 30\nright total length is 30\nand it is the justified this one\ni mean the justification is on\nleft side that means the complete spaces\nwill be on the\nleft side after displaying the text\nand here\nright justification this is the center\ndistribution center alignment so here\nthe right right most spaces and the\nleftmost places are equal after\ndisplaying the text\nso likewise the text will be aligned in\nthe center\nso hope you understood this a string\nformatting\nright\nso let us stop here so we have seen uh\ndifferent\nthese two lateral constant that is a\nnumber constants and the string\nconstants so in that numbers here in\npython programming the the interpreter\nwill accept the numbers integers of\nfloating points and the complex numbers\nand in that\nthree problems may arise while\nperforming the arithmetic operations\nthat is underflow overflow and loss of\nprecision\nso\nunderflow will appears\nsorry overflow will\nmaybe existed\nif the operation is on multiplication\nthat means if we if you are trying to\nmultiply two large for floating point\nnumbers then uh the possibility of this\nthat overflow may occurs\nand coming to this underflow if the\ndenominator\nis a large number than the numerator\nthen that underflow may occur that means\na division if you performing the\ndivision\nand the loss of precision also may occur\nwhen you perform the division\nright if there is no finite\nsteps\nto get the precision value\nso example we have seen and then we will\nmove on to the strings there we have\nseen the string can be represented by\nusing the single quote double quote and\nthe\num\ntriple quotes so here a single character\nwill be also considered resisting so\nthere is no separate characters right so\nevery character is also a string\nso the double quotes and a single quotes\nboth are having the same meaning so we\ncan use a single quotes or double quotes\nfor representing the string\nand\nfor representing this\nmulti-line string we have to use the\ntriple quotes and then we have seen the\nraw string so escape sequences so in\norder to print a special symbols on the\ndisplay screen like single quote double\nquote or a slash backslash and\neverything\nso and a new line character and the tab\nand finally we see the string formatting\nthis justification of the spaces\nso left to justify the right justify and\nthe center gist\nso once you execute this program so that\nyou can clearly understood this\nvariables\nand\nidentifiers\nso as we know the variable\nis an alternate name given to some\nmemory locations so this we have seen in\nc language also\nso in our system everything will be\nstored in a memory and that memory will\nbe having the unique addresses which is\nin numerical form and\nin order to remember this that addresses\nis somewhat difficult\nso that's why we are giving some\nalternative name\nto that particular memory address so\nthat we call it as a variable so as the\nname itself indicates\naccording to the logic according to the\nexpressions or according to the\ninstructions the value of that variable\nmay varies so it's not a constant it's a\nvariable if it is a constant\nthe value in that memory location will\nnot be changed\nas it is a variable the value of that\nmemory location can be varied\nthat means\nso we can assign a value to the variable\nand we can also reassign the value to\nthe same variable so we can update the\nvariable with one more value\nor with the same value\nright so here the one more thing we have\nseen that is the identifiers the name\nitself indicates identifier is used to\nidentify the\nelements\nright so here\nthe variables comes under an example of\nidentifiers\nsimilarly some functions\nobjects classes everything will be comes\nunder this identifies for everything we\nare giving some name\nso by using that name we are identifying\nthat particular object or class or\nfunction or\nthis variable\nright so a variable\nis a\nname\ngiven to\nmemory location\nright\nnext\nidentifiers\nexamples\nvariables\nclasses\nobjects\nmodules\nfunctions\nand also constants\nright so all these are the examples of\nthis identifiers\nright so\nfor any identifier\nwe have to follow some rules while\ngiving a name to that particular\nidentifier\nso which is similar to our c language so\nwe have to give some\nname to that memory location and that\nmust be done\nby following some set of rules\nnow\nlet us see the rules to be followed for\ngiving the name\nnaming of identifier\nrules the first and foremost rule is\nso like the c\nin c language\nhere also there are some keywords so as\nwe have discussed in the c language a\nkeyword is a\nreserved words given by the compiler or\ninterpreter which is having a specific\ntask\nso for every keyword there will be some\nspecific meaning\nand some specific work to be done\nso\nfirst rule is first and important and\nforemost rule is\nthe variable name should not match with\nany keyword name\nso\nthe variable or identifier we can call\nit as both a variable or identify\nvariable name\nshould not\nmatch with\nkeywords\nso in python also there are different\nkeywords so i will explain you later\nright so first we will see the rules so\nvariable names that means identifier\nnames should not match with any one of\nthe keywords\nsecond one\nthe name consists of\nalphabets or\nnumericals that means digits\nright\nso every identifier name should start\nwith either character or underscore\nvariable name\nshould start with\ncharacter\nor\nunderscore the simple underscore\nright underscore symbol so accept this\nunderscore\nwe should not use any other special\ncharacters in the variable name\nand\nthis character can be uppercase and\nlowercase it can be both\nright any one either uppercase or a\nlowercase and also it can start with the\nunderscore and in variable name\nonly accept the underscore\nno other special symbol will be allowed\nthe third rule\nit can be alpha numeric\nright\nvariable name\ncan be\nalpha numeric\nthat means\ncharacters\nplus\ndigits\nnumericals\nright but the variable name should only\nstart with the character and underscore\nit should not start with numbers\nnumericals\nand the fourth one\nright\nit's a case sense two variable names are\na case sensitive\ncase sensitive\nthat means\nexample\nif i write abc\nor simply we can write a name\nright so\nname is a variable\nand it is different from\nname\nbecause here n is capital it is small so\nthese are the\ntwo variables the interpreter will treat\nit as a two variables name and name\nso capital n so it's a case sensitive\nshould follow\nthe\nvariable name right\nand\nso these are the some rules to be\nfollowed by giving the name to the\nvariables or identifiers so we have to\nfollow these rules\nright now\nlet us move on to the data types hope\nyou understood this simple thing so the\nsame we have seen in the c language\nitself\nso if you compare this python with the c\neverything is same\ncoming to the variable and id difference\nnow we will move on to the data types\nsee\ndatabase so when compared to the c\nlanguage here we can see the change\nbecause\ncoming to the\nc language\nso for every data there will be some\ndata type and for every every variable\nshould be declared before they are using\nin the program by using these data types\nright so if you want to declare one\ninteger variable\nso if you want to use one integer\nvariable first we have to declare that\nvariable by using this data type so the\ndeclaration is main\nright so before using them\nhere\nthere are different data types\nthat is\nnumbers\nso in numbers we will get integers\nfloat\ncomplex\neverything we will treat it as a numbers\nnext\nstrings\nhere we will consider character\nand strings\nright so there is no special character\ndata type\nright so like in the c language where we\nwill be having some care\nin order to represent one character data\ni mean one character so here even there\nis a single character we can treat it as\na strength\nand apart from these two there are\ndifferent things that is\nlist\ntuple\ndictionary\nso all these are the different data\ntypes\nright so numbers strings list tuple and\ndictionary coming to the numbers there\nwill be integer numbers floating numbers\ncomplex numbers and strings there are\ntwo categories and strings\nright so\nwe will keep these three\naside\nfirst let us see about these two numbers\nand strings\nnow\nso in c language if you want to declare\nan integer data type\nso what are the steps\nin we have to use a keyword in\na\nthat is the declaration part\na is equal to 5 this is the\ninitialization part\nso\nthis is the declaration\nthis is the\ninitialization\nright initialization means assigning the\nvalue to the variable\nbut\nso this is the c language now coming to\nthis python it becomes very easier right\nit becomes very simple\nso a single statement a is equal to 5\nautomatically includes the\ninitialization and declaration\nright so there is no specific data types\nto declare a variable\nthe assigning value to the variable\nitself treats as a declaration and\ninitialization\nin python programming so these two two\nstraight statements can be replaced with\nonly one statement in python programming\nso this statement implies\na is\nvariable\nto store\nnumeric data\nand\nassign\nfi\nsorry\nassign\nso here the single statement in our\npython programming will\nuse the declaration and initialization\nso there is no specific data types to\ndeclare the variables\ndirectly we can assign a value to the\nvariables\nso if you want to add two numbers if you\nwant to add two numbers\nso\nin c language\nif you want to add two numbers\nin c language simply we have to declare\ntwo variables in the a comma b and also\nthird variable c\nnext a is equal to sum 5 b is equal to\nsum 6\nc is equal to a plus b\nright\ncoming to this python\ndirectly we can declare a is equal to 5\nb is equal to 6\nso that implies two variables are\ndeclared by using the numbers integers\nand directly c is equal to a plus b\nall of these statements so there is no\ndeclaration part in python that's the\nvery most important point\ndirectly we can assign a value to the\nvariable\nit will automatically declare\nit gets the declaration\nso hope you understood this\nthen\nlet us let us take the example\nexamples so name\nis equal to\nitem\nversion\nis equal to\n3.6.5 something\nnext\nprice is equal to 300\nokay next simply we can write\nsome c is equal to 5 plus\n4 i\nright so directly these four statements\nimplies\nthe name the variable name\nis having\nthe value python and version is declared\nas\ni mean this is a declaration string\nthis declared as a\nfloat\nokay 3.6\nand\nprice this is declared as end\nand this is declared as a\ncomplex\ndirectly a single statement will get the\ndeclaration and initialization\nhope you understood this example\nnext\nnext one\ncoming to the\ncomments so how the\nthis can be comments can be used in\npython programming so in seeing so\ncomments\nin c we have to use these\nsymbols so whatever the data which is\nwritten in between these two symbols\nwill be considered as a comment so that\nparticular data will not be executed by\nthe compiler\nso in python\nthe python the comment is represented\nwith\nhash\nso whatever the data which is having the\nhash in\nat the beginning that line will be\nconsidered as a comment it's a single\nend comment\nso it is not used for multi lens right\nif you want to give a comments in two\nlines so you can use two hashes\nsimple\nright now\nin this python\nthe assignment of variable can be done\nin multiple ways so multiple assignment\nin a single line more than one variable\ncan be assigned\nmultiple assignment\nright\nso for example\nsum is equal to 0\nflag is equal to 0\na is equal to 0\nb is equal to 0\nso if you want to declare this one these\nthings we have if you want to assign the\nvalues to these variables this can be\nright\nthis can be written in\na single line\nby using this multiple assignment simply\nyou can write\nsum is equal to\nflag is equal to\na is equal to b is equal to 0\nso the single line statement\nwill give a multiple assignment so\nvariable sum is assigned to 0 flag is\nassigned to 0 a is assigned to 0 b is\nassigned to 0.\nso all the 4 variables are assigned with\na single value that is 0 and that can be\nrepresented by using single statement in\npython\nnext\nif\nsee\nso\nif you want to assign this one\nsum is equal to 0 some flag is equal to\n1\nname is equal to python and version is\nequal to 3.5 if you want to declare\nthese\nfour variables and if you want to assign\nthese four variables with different\nvalues this can also be done by using a\nsingle statement in python that is see\nsum\ncomma\nflag\ncomma\nname\ncomma\nversion\nis equal to\nsee\n0 comma 1 comma\npython\ncomma 3.5\nso this is the single statement where we\nare going to use in python\nfor multiple assignments so here all the\nfour variables are assigned with the\nfour values four different values\nso this is also a valid statement in\npython so it will check the order right\nsum is equal to zero flag is equal to\none name is equal to python version is\nequal to three point five so this\nhappens only because here the\ndeclaration part is ignored so there is\nno explicit declaration part\ndirectly assigning the value to the\nvariable will give the declaration\nso this can be done in python\nright\nhope you understood the multiple\nassignments we can multiple i mean we\ncan assign multiple values to multiple\nvariables using a single line\nright\nnow\nif more than one line to be represented\nin a single line\nso here the most important thing is\nno statement will end with semicolon\nso in our c language every statement\nwill end with the semicolon semicolon\nindicates the termination of that\nparticular line but here python there is\nno semicolon there is no\nway of using this semicolon\nright so simply a is equal to 5\nthat always terminates the\nline so b is equal to 6 it also\nterminates the line there so no\nthis semicolon is not required in every\nline\nok now\nif\nif\nwe want to represent more than one line\ni mean more more than one statement in a\nsingle line that means more than one\ninstruction in a single line so this\nwill be correct right so if you want to\nrepresent more than one instruction in a\nsingle line so a is equal to 5 and b is\nequal to 6 if you if i want to\nrepresent this in a single line directly\nwe can write a is equal to sorry a comma\nb\nis equal to 5 comma 6 this is one way\nand the other another way is by using\nsemicolon\nso if you want to represent\nmore than one instruction in a single\nline so this can be written a is equal\nto 5 same equation b is equal to 6\nsemicolon c is equal to a plus b\nright so in order to represent more than\none instruction in a single line we have\nto use this semicolon\nright so we need not require the\nsemicolon for every line of python\nprogram\nhope you understood this the different\ndata types the variables and identifiers\nand the rules to be followed\nto give the name for identifier and then\nassign assignment so sending the value\nto the\nvariable so no\nspecific declaration part\nand then multiple assignments\nso we can reassign the value so if first\nline consists of a is equal to 5 and in\nthe second line b is equal to 6 third\nline a is equal to 6 automatically this\n5 will be replaced with 6 that means\nreassigning so because here it is a\nvariable we can update the value\nright reassignment is possible multiple\nassignments will be possible in a single\nline and the commands are used by using\nby adding a hash as a prefix to every\nline\nand then\nsemicolon is used to differentiate two\ninstructions right so if you want to\nrepresent a more than one instruction in\na single line you have to use this\nsemicolon\nso hope you understood all these things\nso today's session\ni would like to discuss about the types\nof assignments\nin python\nso let's go with the\nide so i am using this jupyter notebook\nand here we will see how many ways we\ncan assign the values to the variables\nso there are different ways so first one\nis a basic assignment so which we\nnormally use in our programs just giving\nthe variable name\nis equal to operator and giving the\nvalue so that the value will be stored\nin the particular variable so this is a\nnormal basic\nassignment\nokay so i will write here\nbasic\nassignment and there is one more\nassignment that is a tuple assignment\ntriple assignment\nso we can assign a variable\ni mean assign the values\nwith the help of tuple right by using\nthe tuple see for example a comma b is\nequal to so take the two variables a is\nequal to b and you can assign two values\nby using a tuple so give some 10 comma\n20 so that a will be having 10 and b\nwill be having 20. so on the left hand\nside we are giving the multiple\nvariables and we are giving the multiple\nvalues in the tuple format and see if\nyou give this one a comma b two\nvariables and if you give the two three\nvariable three values here\nthree values here so automatically we'll\nget the value error because the number\nof arguments mismatch so too many values\nto unpack\ntoo many values to unpack so how many\nvariables we are giving that many values\nto be assigned okay this is a tuple\nformat and we can use the same thing by\nusing uh by using the list format list\nassignment\nsee\nthe same thing taking the two variables\nand assign the values in the form of\ntuple\nso that a will be holding the 10 and b\nwill be holding the 20. so here also the\nsame way give the two variables and give\nthe three values\nautomatically we'll get the error value\nerror because here also too many values\nto be unpacked so how many variables we\nare assigning on the left hand side so\nthat many values to be given on the\nright hand side\nbut in the form of a list in the form of\na list\nthe next one is a sequence assignment\nsequence assignment that means we will\nascend by we will assign the values\nbut not by using the tuples or list\ndirectly we'll assign the values\nright so this is called a sequence as an\nassignment\nsequence assignment\nright see if i give this values a comma\nb\ncomma c three variables\nif i take the sum three variables i need\nto give the values three values\nso this is called a sequence assignment\nso here we are not using any tuple or a\nlist directly we are assigning the value\nso\nwhatever the variables the variable\ncount we are giving on the left hand\nside\nthat many values should be given on the\nright hand side just by using the comma\nseparated so you can see a holds 10 b\nholds 20 c holds 30\nright so this is called a sequence\nassignment\nand the next one is extended sequence\nassignment\nextended\nextended\nsequence\nassign\nmeant right see for example if you go\nwith a comma b\ncomma c is equal to\nif you go with a high\nthen c\na holds\nh\nb holds\na\nc holds i\nnow\nif the same thing a comma b is equal to\npython\nif you give the same thing okay\nthen we'll get a value error too many\nvalues to unpack similar to our\nwhich we have seen in the previous\nthing a comma b\nis equal to giving more than two\nvariable two values here so 2 comma 30\ncomma 40 so the argument count\nmismatches on the left hand side we are\ngiving two variables and on the left\nright hand side we are giving some three\nvalues so\nwe will get the same error right too\nmany values to unpack so in such cases\nin such case the same thing happens here\nalso a comma b is equal to python so\na holds\nb so here too many values to unpack\nbecause a holds p and b holds y and\nthere are no variables declared on the\nleft hand side for t h o n\nin such cases just\nsuffix the variable star b\nstar b okay is equal to python\nso that you can observe a holds p and b\nholds all the remaining values in the\nform of list only\nin the form of list so if you hope you\nunderstood this is the extended sequence\nassignment\nso it first it will go with the\nvariables assignment normal variable\nassignment a p\ni mean a holds the value p\nand here star b means this variable can\nhold a multiple values\nin the form of list so the all the\nremaining characters will be taken as\ni mean in the form of list and get taken\nso i will go with the previous example a\nis equal to b\n10 20 30 40\nand 50\nright so if you execute we'll get the\nvalue error if i give the star as a\nsuffix and execute you can observe a\nholds a 10 and b holds the remaining\nelements in the form of a list\nright so star b means the variable can\nhold multiple elements in the form of a\nlist\nokay\nthen\nthen\nthe next one is a multiple target\nassignment\nnext one is a multiple\ntarget\nassignment\nso here you can observe so if you want\nto give the same value for multiple\nvariables just go with this one abc is\nequal to sorry a is equal to b is equal\nto c is equal to d is equal to 10\nso automatically a holds 10 b holds 10\nc holds the 10 and similarly d holds the\n10\nright\nc\nif you give the same thing like this a\ncomma become a c comma d is equal to 20\nagain we'll get cannot unpack\nnon-iterable into object so only one\nvalue is here and we have assigned some\nfour variables on the left hand side so\nautomatically we'll get the type error\nso instead of comma you have to use\nis equal to\na is equal to b is equal to c is equal\nto\nd is equal to 20 so that implies the 20\nis the value\nsaved in all the four variables okay all\nthe four variables hold the value 20. so\nthis is called a multiple\ntarget assignment and the next one is\nthe augmented assignments which we have\nseen in the assignment operators concept\naugmented assignment so in order to uh\nif if any variable need to update then\nwe'll go with the augmented assignment\nso simply if a is equal to 10 and if i\nwant to update the variable that means\nchanging the value of a and storing the\nresult in a so then we can go with a\nplus is equal to 2\nthat means a holds 12. so a plus is\nequal to 2 means\nthat implies a is equal to a plus\n2 so not only the addition operator we\ncan also go with the subtraction\nmultiplication division and everything\nwe can use this augmented assignment so\nthese many ways we can assign\nvalues to the variables the first one we\nhave seen is the\nbasic assignment so normally by using\nthe is equal to assignment operator and\nthe next one is a tuple assignment so\nthat the variables on the left hand side\nand the values on the right hand side\nshould match\nand next one is the list assignment and\nthen\na and b so this is\nthis is the list assignment and this is\na sequence assignment\nand extended sequence as well as we have\nseen\nextended sequence and the multiple\ntarget assignment\nand augmented assignment\nso these are the different ways we can\nassign a values to the variables\ninput and output\nso input function\nor statement\noutput function or a state\nso in c language the input function is\nscanf function\nso here the scanf function is used to\nread the input from the user at the time\nof\nruntime\nright so here\nsimilar to the scanf here also we will\nuse a one function for reading the input\nfrom the user at the runtime\nright so that is the input function\nitself sorry\ninput function\nso this is used to read the data from\nthe user\nat the time of execution that is the run\ntime runtime initialization can be done\nby using input function and output\nfunction\nas we have seen in the c language the\nprintf statement is the output function\nhere also there is a output function\nthat we call it as a print\nprint function so eliminate the f right\nso print function and input function so\ninput\nis used to read the input print is used\nto display the\noutput\nright\nso\nsimilar to\nscanf in c\nsimilar to\nprintf in\nc\nright now\nhere so\nin c language so as there is a\ndeclaration before using the variables\nso there are different data types and\nthere are different types of spheres so\nby using those type space pairs we will\nread the data\nand here there are no separate\ndeclaration part so by using this input\nstatement always the user reads the\nstring data\nthat means so always whatever the input\ntaken by the\nuser will be in the form of strings\nso as we know strings have a group of\ncharacters so in our computer\nprogramming\neverything in a keyboard will be treated\nas a character so which we are followed\nin the c language itself\nso alphabets a to z\nuppercase letters and lowercase letters\nand special symbols\nand also the numeric data 0 to 9 and\nenter space and every button and the\nkeyboard will be considered as a\ncharacter\nso obviously the string is a group of\ncharacters\nso here\n55\ncan be a number or a character\nright so here\nif a is equal to 55 this will be treated\nas a number if a is equal to\n55 that means if 55 is enclosed in\ndouble quotes that 55 will be considered\nas a character so five five two fives\nso we should not call it as a 555\nnext\nhere\nin this python programming the input\nfunction\nalways\nreads the string data\nso the input will be\nalways\nstring\nso if you want to perform some addition\nor multiplication or some arithmetic\noperations so we need to convert this\nstring into particular data type\nso that we call it as a type conversion\nright so here also there are different\ntype conversions so there are different\nfunctions so it is very simple to\nconvert this any from any data type to\nany any data\nso type conversion is very simple in\npython so there are all built-in\nfunctions\nright so\nalways the input will be in a string\nso\nhere also in the input\nwhatever the information\nwe are writing in between the double\nquotes will be considered as a normal\ntext\nso\nthe same as a printf statement so\ntext\nin\ndouble quotes\nwill consider as\nnormal text\nand\ndisplays\ndisplay on the\noutput screen\nright for example\nif you want to write\ninput\nsome a is equal to input\nenter number\na is equal to\na is equal to input enter number so here\nthe text is returned in between two\ndouble quotes so\nat the run time\nif the user\nuh\npress some f 5 as\ninput a is equal to 5 will be i mean 5\nwill be assigned to a here 5 is a string\nright here 5 is treated as a\nstring because the input function always\ntakes the string as a input\nright so if the user\nenters some abc\nthis is also a string\nif user enters some 3.4\nthis is also a string\nso it will treat it as a string\nso whatever the data the user enters at\nthe runtime that will be considered as a\nstring\nright\nso\nand whatever the text we are writing in\nbetween the double quotes in the input\nfunction will be directly displayed on\nthe output screen so in the screen\nit will be displayed as enter number\nand if the user prints file if i will be\nassigned to a if user prints abc abc\nwill be print assigned to a if user\nprints 3.4 3.5 will be assigned to a but\nall these three are in string format\nright so in order to change this format\nwe have to use a type conversion\nso we will see the type conversion in\nthe next video\nright so\nwhatever it may be so always the input\nfunction will take the string\nformat\nnext print\nhere also\nwhatever the text displayed\ntext\nin double quotes\nor a single quotes anything\nwill be considered as\na normal text\nand display on keyboard\ni mean monitor\noutput screen\nright so if you want to i mean\nfor example\nsee\nprint\nhello\nautomatically on the display screen\nhello will be printed\njust like our printf so here\nremember so\nthe line should not\nend with semicolon\nright that means we need not mention\nsemicolon at the end of the line\nnext\nif you want to print the value of a\nvariable\nright so if you print the value of a\nvariable on the output screen in c\nlanguage we will use some types of type\nspace pairs\nso if you if you use a percentage d in\nprintf\nuh in the place of percentage d the\nvalue will be printed\nthe integer value will be printed if you\nif you use a percentage f in the printf\nso the float value will be printed at\nthe place of percentage of but here\nif you want to print\na value of a variable\nwe need to\nwrite that variable\nin i mean after the double quotes after\nending the double quotes\nright so whatever the text we are\nwriting\nin the double quotes will be treated as\na normal text and whatever the variables\ni mean whatever the names we are writing\noutside the double quotes that will be\nconsidered as a variable\na simple thing\nso the names writing after the double\nquotes will be considered as a\nvariables\nsee\nfor example\na is equal to 5\nright if you want to print\n5 simply we can write print\na\nso this will print\n5 on the screen\nif you write print\na\nthis will print a that's out\nright so if it is a so here a is equal\nto 5 so direct assignment and 5 is a new\nnumber so a will be of integer data\nright so 5 is a number that is also an\ninteger so 5 can be assigned to here\nhere 5 where it is assigned to a so a is\na variable\nwith integer data type\nnow if a is equal to 5.4\nhere 5.4 is a number and that is also a\nfloating number so a is having a float\ndata type and if you print this\nif you want to print this a directory\nprint here you have to write and\nsecond example let us take text\nsome name is equal to\npython\nso this is also a variable\ninitialization so\nthe variable name\nis equal to python so here python is a\ngroup of characters so that will be\nconsidered as a string so this will be\nconsidered as a character\nnow\nif you want to print this name directly\nwe can write\nprint name\ndirectly we can get\npython as output\nif you want to write hello\nhello\nclose\ncomma\nplus name so if it is a string we have\nto use it plus\nto print the output\nso here we can get\nhello\nright if it is a stream\nwe want to print in the display screen\nwe have to write a plus so if\nthis is the first example let us to\nsecond example a is equal to 5\nright\nif you want to print it print\na is equal to so directly a is equal to\nwill be printed comma\nwe have to write only a we should not\nwrite plus a\nso here the plus is used only for\nconcatenating the string that means\ndisplaying the string\non the\nscreen that is only used for\nstring data\nto print the value of string data\nright so in order to if if the variable\nconsists of a string\nthen we have to use a plus in order to\ndisplay\nright so if you want to display a normal\nnumber\nyou should write just a variable name so\na is equal to\ncomma\na so this prints a is equal to 5\nhope you understood this printf i mean\nprint function output function\nso\nwhile writing the programs we will see\nmore number of options in this print\nfunction and the input function right so\nthese are the just a basic\ninput and output functions basic formats\nof input and output functions basic\nsyntax\nso there are different parameters we can\nuse in print print function and we can\nuse in input function so all the type\nconversions and all the different\nformats used in print function that will\nbe seen in the next video we will see in\nthe next video right hope you understood\nthis one let's say input function and\noutput function input function is\nsimilar to scanf output function is\nsimilar to printf so here input function\nis input output function is print\ninput function always takes the string\nformat data in strings format and print\nprint function always display the data\non the screen so whatever the text\ndisplayed in between the double quotes\nwill be considered as a normal text and\nit will be displayed as is in the screen\nright here the text in double quotes\nwill be considered as a normal text it\nwill be it will also displayed on the\nscreen\nand\nthe data which we are\nassigning to the variable will be\nconsidered as a string\nright next here if you if you want to\nprint the value of a variable we need to\nuse use that variable\noutside the double quotes\nso if you want to\ndisplay the value of a string variable\nwe have to use a plus\nso if you write some text in between\ndouble quotes and if you want to add\nsome varying value of that particular\nvariable if it is a character array that\nmeans a string we have to use this plus\nsymbol\nand if you if your variable consists of\na numerical data and if you want to\nprint that numerical data along with the\nsome text we can use a simple comma to\nprint the output\nso here hello python should we be\nprinted in this format hello\nso double quote send comma plus name\nright and print a print a is equal to in\ndouble quotes comma\nsimple a so here we should not include\nplus\nright hope you understood this is the\nprint and\ninput functions today's session we will\nsee the map function in python so how\ncan we use this map function and where\nwe can use this map function\nso this map function is mainly used to\nmap the function and iterators right so\nfor example you can see if i want to\ntake the multiple values the space\nseparated multiple values under same\nname so i can go with a is equal to so i\nwill go with the input dot split and\nhere we need to give the delimiter if\nyou are not giving any delimiter we will\nget the\nspace will be acting as a delimiter so\nif you execute this one it will\nit will prompt for the input so i can\ngive multiple inputs in the same line\nseparated with a comma\nokay but if you observe all the values\nwill be stored in a in the form of list\nand every input will be in the form of a\nstring\nright so every input is in the form of a\nstring so we need to type convert it we\nneed to type convert it so for this\npurpose\nso we can use the map function to form a\nlist of integers\nwe you which are taking the input in a\nsingle line\nright so if you want to take the input\nin a single line and if you want to\nstore all the elements\nin the form of integers in a list then\nwe will go with the map function not\nonly the integers if you want to go with\nthe float also we can go with the map\nfunction so let me explain it one so a\nis equal to\nokay\nuse the map function so it will create\nan object okay it will create an object\nso if you want to create a list so you\ngive the list inside the list go with\nthe map function and give the integer\nokay i just want to map each and every\nvalue of the interval into an integer\nand now i will go with the input\nfunction\ndot\nsplit so here you can observe input dot\nsplit it will read each and every input\nin\nstring format each and every input in\nstring format so that string format that\nstring will be converted into integer\nand that will be inserted into a list\nokay hope you understood i will execute\nthis one so just i will take the same\nexample so 30 40 50 so execute this one\nso all the elements will be stored in\nthe form of a list in the under the\nvariable name a so if you go with a so\nthese are the integers\nthese are the integers see let me\nexplain a is equal to\ni will show you the difference input\ndot\nsplit\nokay if i take the if i execute this one\nit will prompt here so 10 20 30 40 50.\nso i have to give the inputs with a\nspace separator because here split we\nare giving some space so if you want to\nseparate with a comma here you need to\ngive the comma okay so i will execute\nthis one so there is no error so all the\nvalues are stored in the form of a list\nunder the name a you can observe type of\na of 0 which is nothing but a string\nbut i need them as a integer so instead\nof\ntype converting each and every string\ninto integer i can use this one i can\nuse this one\nokay i can use this map function\nso that\nuse the same form same inputs give the\nsame inputs\nsay 20 30 40 and 50 so automatically a\nwill be having some 10 20 30 40 50. now\nyou can use the type function type of a\nof 0 so automatically it will give the\ninteger\nthe type of a no of 0 will be integer\nnow so the\nthe execution of this one means first it\nwill read all the inputs the space\nseparated inputs in the form of a string\nand each string will be converted into\ninteger because we are using the map\nfunction and the result that means the\ninteger format will be stored in the\nlist so if you want to give a float if\nyou want to read the float values under\na single line just map into a float\nfloat execute so 10\n20 30 40 50\nand so on so execute so you can observe\na will be holding the float variables\nfloat values\nright\nhope you understood this one the math\nfunction so if you want to convert the\niterables into a required function so\nhere float and enter the type conversion\nfunctions so in the type conversion\nfunction we have seen these functions in\nfunction float function htr function\nright so this is the function float\nfunction so whatever the input read from\nthis input function will be converted\ninto a float and it will be taken into a\nlist if you want to create a tuple just\ngo with the tuple\ninstead of list we can go with the tuple\nso that\nwe can read the multiple elements under\na single line space separated elements\nunder a single line\ninto a tuple so 10 20 30 40 50. so if\nyou go with a it will be a tuple\nright if you want to read multiple\nelements in the form of a set\nthen simply\nremove the list and go with the set\nso 10 20 30 40 50.\nso if you go with the a it will be a set\nokay like this we can map the iterables\ninto the required data type\nokay so in most of the competitive\nprograms we are supposed to take the\ninput with the comma separated values\nunder a single line so in such cases we\ncan use this map function\nso as we know that keywords are the\npredefined words given by the\ninterpreter\nso in c language we call it as a\ncompiler\nso these are the some predefined words\ngiven by the interpreter\nand each one is having their own\nidentity and a specific task\nright so the first and foremost\nimportant thing is while creating a\nvariable we are giving a name to the\nvariable the first thing we have to take\ncare is those names should not match\nwith these keywords\nbecause if we\ncreate a variable with\nany one among these names\nthe interpreter automatically identifies\nit as a keyword rather than is a\nvariable so it will treat as a keyword\nso every code word is having\ntheir own task\nso that particular task will be\nperformed\nso the first thing is we should not use\nthese keywords as a variable names\nnow let us see one by one\nso here\nand\nand it can be used as a logical end\noperator so as we know the logical end\nis used to\ncompare\ntwo different simple conditions\nright so for example if you want to\ncheck whether the\ni mean check the large number among the\nthree numbers you need to\ncheck two conditions that is if a\ngreater than b\nand a greater than c\nso if a is greater than\ngreater than both the variables b and c\nthen only we can say a will be the\nbigger so in such conditions there if\nyou want to check two conditions\nso those we call it as a simple\nconditions right if you want to check\nthe two conditions then we can use this\nend\nso logically\nso\nrather than using the symbol you can\ndirectly use this n keyword\nsimilarly break statement so almost\nalmost uh some of the keywords will be\nsame as a the working of keywords will\nbe same as in the c language so here\nbreak and continue so break and continue\nthe same working\nwhich we have seen in the c language the\nsame will be applied in the python also\nso break statement is used to terminate\nthe control from the loop so that means\nwhenever the control\nencounters this break statement\nautomatically the control will come out\nfrom the loop\nso irrespective of the condition even\nthough the condition is false the\ncontrol will come out from the loop\ncoming to the continue\nit will skip the current iteration so in\nwhich this continue has been written\nand it will move on to the next\niteration so that means it will skip\nonly one iteration where this continue\nhas been data so that's that is the\nworking of continue next dl dell\nso this del\nkeyword is used to delete the elements\nfrom the list\nso as we have discussed earlier\nso there are five standard data types\none is number systems\nlist tuples and dictionaries on last\nthree there is a list tuples and\ndictionaries all these three are the\nsequence of elements\nso this the they can consist of a\nmultiple elements of different data\ntypes\nso just like our structures\nright so list can be have more number of\nelements with different data types so\nyou can store the numbers floating point\nnumbers\nsimilarly integer i mean\nstrings or a complex numbers so anything\nit can store in list\nso if you want to delete one element\namong the number of elements in that\nlist we can use this dl\nkeyword\nnext\ndf\ndf is nothing but a defining\nthe user defined function df keyword is\nused to define the user defined function\nright if you want to write your own\nfunction\nso then you can use this def q word\nnext alif\nalif is similar to the elsifiency\nlanguage\nlc so multi-way selections\nso if you want to check more conditions\nthen we can go for this alif else if is\nhe almost equal to lg\nso here the keyword is alif and in c\nlanguage it is a lc we will write as\nelsif\nnext else\nso this is a keyword which are which\nwhich can be used in\ndecision control statements that is we\ncall it as a false block\nso there will be two blocks a true block\nand false block any one block will be\nexecuted the another one will be ignored\nso s block is in\nfalse\nblock exit\nthe accept keyword is used in exception\nhandling in python\nso in python there will be a concept of\nexception handling so in the exception\ncan handling we can use this keyword\naccept\nnext class\nso class is used for\nuser in object oriented programming\nso here the python can implement this\nobject oriented programming also so in\nthat we will use this class a group of\nobjects construct\nthen execute exec\nthat keyword is used to execute the\npython programs dynamically\nso if you want to execute the\ndynamically python programs we have to\nuse this exec\nkeyword\nnext finally so this keyword is also\nused in exception handling\nfirst\nas we know the is in iterative\nstatements so if you want to execute\nmore number of statements multiple times\nwe will go for attractive statements\nin that iterative statements one one of\nthe iterative statement is fun\nnext global\nso as you know the variables can be\nglobal and local so global variables\nmeans\nthat those variables can be used both in\nmain function or\nin the user defined function itself so\nanywhere in the program we can use those\nvariables but\nlocal variables are restricted only\nwhere the variable has been declared\nthat means if it is declared in the main\nfunction that will be executed only in\nthe main function that can be used only\nin the main function that cannot be used\nin the user defined function so if any\nvariable is declared in the user defined\nfunction that that particular variable\ncan be used only in the user defined\nfunction and it cannot be used in the\nmain function so that is the local\nvariable whereas if the same variable\nhas been declared as a global\nthen\nwe can use the variable throughout the\nprogram so either in the main function\nor a user defined function so any\nif there are n number of user different\nfunctions in our program we can use that\nvariable in any user defined function\nso for that purpose we will use this\nglobal\nif if is again the conditional decision\ncontrol statement it is a true block\nelse is a false block if you say true\nblock\nimport\nso here import keyword is used to import\nthe package to the python program\nso for example\nif you want to\nimplement\nsome mathematical functions so there are\ndifferent mathematical functions in c\nlanguage right square root power sine\ncosine\nso likewise so number of user different\nfunctions i mean predefined functions\nare there in\nc language so in order to use those use\nthe predefined functions\nwhat we have to do we have to include\nthe\nmath dot h header file so all the\nimplementations will be residing on\nmath.h header file similarly in python\nso there will be some predefined\nfunctions and these predefined functions\nwill be\navailable in the packages\nso there we call them as a header file\nhere we call them as a packages\nso in order to use those predefined\nfunctions in our program we have to\nimport that particular packages\nright so there are predefined\nmathematical functions are there that is\nfloor seal sine cosine square root\nfactorial so there are different\npredefined functions in python so in\norder to use those predefined functions\none thing we have to do is we have to\nimport\nmath that means math package so all the\nimplementations will be come into the\nmath package so we have to import the\nmath package before using those\npredefined functions in the program\nnext in\nin is a membership operator so that is\nalso used in a sequence of elements\nso like comparing comparing one element\nwith the sequence of elements\nso x in sequence\nx in one two three four five\ny in abcd\nright so likewise comparison of one\nelement with a sequence of elements we\nwill go for this\nin that is\nmembership operator so the additional\noperator in our python\nnext is\nis is a identity operator identity\noperator so if two so these two indentes\ngives the boolean result\nthese two will give the boolean result\nso what is the boolean result so boolean\nresult means\neither true or false so you never see a\nlanguage the true is represented as 0\nand a false is represented as and sorry\n2 is represented as 1 and the pulse is\nrepresented as 0\nso here\nthe true is represented as true itself\nfalse is represented as false itself\nsorry i will forget to write two more\nkeywords false and\ntrue\nthere are two more keywords that is a\nfalse and true so these two are these\ntwo operators that is two keywords in\nand is\nso both will result the boolean result\nthat is either true or false so true is\nrepresented as one and false is\nrepresented as zero here the true will\nbe true false will be false we will get\nthe result as true and false not a one z\none and zero\nand e is the identity operator so\nif\nuh two variables are referencing to the\nsame object\nthen it will return a true if it doesn't\nreference to same object it will return\nthe false\nnext from\nso this from is also used in importing\nthe packages\nimporting the sub packages right so in\nthe import package importing we will use\nthis from keyword\nnot\nthat is also similar to our logical not\nso one becomes zero and zero becomes one\ntrue becomes false or false becomes\ntrue or\nr is also the logical or\npass\npass is a null statement in our program\nso it can be used only for a syntactic\npurpose so it it is almost equal to the\nnull statement\nso nothing will be happens while\nexecuting this pass\npreview so as we know that a print is an\noutput function so which we have\ndiscussed in the previous session\nraise\nrace\nis used in exception handling so raising\nthe exception\nreturn we know that\nreturn is used to return the value from\nthe user-defined function\ntype time is also again used in\nexception handling\nwhy\nso we have seen for here now it is while\nthe another iterative statement\nnext\nwidth\nso\nwidth is also\nused in a sequence of inputs\nright next yield\nyield is used in exception handling\nlambda it is used to create an anonymous\nfunctions and anonymous functions we can\nuse this lambda\nasset\nascent is used to raise the error that\nmeans in order to print the\nerror on the display screen whenever the\nexception rises then we can use this\naccept keyword\nnext false and true those are the\nboolean results true and false which\nrepresents a zero and one here\nit doesn't represent zero and one it\ndirectly represents this true and\nfalse\nright so these are a few keywords that\nthere are many keywords and the working\nof these keywords will be easier while\nuh programming the logics right so\nonce you we move on to the programming\nyou can\nfeel the experience of all the keywords\nright so now so that's why i just give a\nbrief\noverview of these keywords\nso hope you understood these keywords or\nreserved words in a python\nso once again a keyword is a predefined\nwords given by the python interpreter\nwhich is having a specific task or a\nmeaning\nand these names should not be used as a\nvariable names\nbecause if you use these names as a\nvariable names the interpreter will\ntreat that as a non that that has a\nkeyword rather than a variable\nso that's why we should not use them as\na\nvariable names\nright so hope you understood this simple\nkeywords concept\noperators\nso\nfirst\nas we know this\narithmetic operators\narithmetic operators\nthen\nrelational operators\nunary operators\nmidwives operators\nlogical operators\nassignment operators\nmembership operators\nidentity operators so these are the few\noperators\noperators various operators in\npython programming so coming to this\nautomatic operators\nso addition subtraction\nmultiplication division\nmod\nand there are two more operators new\noperators that is\nfloor division\nand\nexponent\nexponential operator so addition\nsubtraction multiplication division\nmodulo\nfloor division and\nexponential so one by one we will see\nnext relational operators\nnot equal to\nequal to\nless than less than or equal to greater\nthan greater than or equal to\nall these are the comparison operators\nso which shows the relation between\nuh two variables so it will give a\nboolean result\nuranary operators\nurinary plus\nand unary minus\nbitwise operators\nbitwise or because n\nxor\ncomplement\nleft shift\nright shift\nso all these are the big base operators\nlogical operators are\nlogical and\nlogical or\nlogical\nnot\nassignment operators are\nis equal to\nand all the shortcuts you know in\noperators plus is equal to minus is\nequal to star is equal to division is\nequal to floor region is equal to\nand so on there are different\nassignment operators simply we can say i\nis equal to is an assignment output\nand there are two more operators new\noperators in python when compared to the\nc that is membership operator and\nidentity operator so membership\noperators are\nin\nnot even\nin and\nnot in\nidentity operators are\nis\nnot is not\nis n is not\nall these are the different operators we\ncan use in python programming now let us\nsee one by one first coming to this\narithmetic operators and relational\noperators\narithmetic operators\nso arithmetic operators are addition\nthat means like a plus b let us take a\nis equal to sum 5 b is equal to sum 3\nthe result will be\n8\na minus b minus\nis a operator so we will get our result\ntwo\nso as we know that multiplication\noperator a into b we will get a 15\ndivision operator a divided by b\nand here the difference will be there\nso in c language\nin c language\nif a is equal to 5 and b is equal to 3 a\ndivided by b will give\n5 by 3 that is actual result will be\n1.6 and so on right 1.6\nbut\nin c language we will get the result as\none\nin the c language we will get the result\nas one but in the python program\nprogramming the result will be the\naccurate result\n1.6\nright\nso it will not it doesn't gives the\ninteger value directly gives the float\nvalue\nso 5 divided by 3 we will get 1.6 as a\nresult in python programming we will get\nonly one in\nsigma current\nnext\nso in order to get the integer division\ni mean integral parts there is another\noperator called\nfloor division\nand this is represented as\ndouble slash so\na slash slash b\nnow it will give one as a result so it's\ncalled floor division\nit will give the only integer part\nnext\nmodulo operator\nthat is\nmodulo so a mod b\nwhich gives the result 5 3 that is 2\nnext\none more operator exponent operator\nexponent operator it is represented as\ndouble star\nso a\ndouble star b that implies\n5 to the power of 3\nexponent a power b\nso we need not use this power function\ndirectly we can use this exponent\noperator 5 power 3 the result will be 5\npower 3 so 125\nright\nso it's a 125\nso this is called the exponent operator\nso these are the arithmetic operators in\npython programming\nnow let us move on to the relational\noperators\nso only a few are\nnew when compared to the c language that\nis\nfloor division\nand\nexponent operator\nand one more\ndifference is\nwhile you perform the division we will\nget the accurate result that is the only\ndifference between the arithmetic\noperators in c language or python\nproblem\nnow coming to the relational operators\nso anywhere these relational operators\nare same\nso the working of relational operators\nare same as we have seen in the c\nlanguage\nso first one\nnot equal to so\nthese relational operators will give the\nresult as a boolean type that means\neither true or false so let us take a is\nequal to 5 again b is equal to 3\nnow\na not equal to\nb\na not equal to b\nthat implies it will result as boolean\nresult so in c language you will get the\nresult either 0 or 1 here we have\nkeywords true and false so it will\ndirectly display either true or false so\na not equal to b\nso true\nso the\nit will give the result as a two\ndouble is equal to a is equal to is\nequal to b\nso five is equal to is equal to three\nit's a false\nso automatically the false will be\nprinted\nnext\nless than\na less than b\n5 less than 3\nfalse\nless than or equal to a less than or\nequal to b\nagain it will return false\ngreater than so a greater than b\ntrue because 5 is greater than 3\ngreater than or equal to a greater than\nor equal to b\nsecond false\nright so these are the relational\noperators not equal to equal to less\nthan less than or equal to greater than\nand greater than or equal to\nso all these we have seen in the c\nlanguage so there is no change about\nthis relational operators\nnext coming to the unary operators\nso unary operators\nso as we know that unary operators means\nthat can be applied only on the only one\nvariable so\nthese only operators means only one\nvariable will be there so there are two\noperators that is unary\nplus\nso which is directly represented as plus\nand unary\nminus\nthat is so which indicates the sign of\nthat variable simply we can say it\nindicates the sign of the variable so\nfor example\na is equal to 5 so you wanna be plus a\nthat means it's a positive number\nminus a which gives a plus five as a\npositive number\nand here we gonna be minus means the\nsign has been changed to\nnegative\nso a is equal to five\nunary minus j means we are changing the\nsign of the particular variable so minus\n5 so 5 is entirely different from minus\n5\nright so this is the\nurinary operators\nso this is also same\nwhich you have seen in c language\nnow\nassignment operators\nsimply is equal to we call as assignment\noperator\nwhich we have seen in c language the\nsame assignment that means a is equal to\nit's an assignment operator that implies\nthe value 5 is assigned to variable\na\n5 is assigned to variable a so 5 is\ninserted into the memory location\noccupied by\na\nright so\nthis can be here\nthere are more number of assignment\noperators shortcut operators we call it\nas so plus is equal to\nso if you want to update the variable\nwhich is on the left side\nso for example a is equal to a plus\n1\nso here\nwe are updating the a value\nright\nand we are storing the same result\nin the same variable\nso a is equal to a plus 1\nso we are updating the a value and again\nthe result will be stored in a itself so\nin such case we have to use this\noperator\nif right hand side\nspecifies the updation of left hand side\nvariable\nand the same\nis stored in the left hand side variable\nitself then we can use this\nplus is equal similarly minus is equal\nto similarly star is equal to\nsimilarly division is equal to so\nlikewise there are different\nshortcut operators but\nthis\nis equal to itself\nwe can say it has a assignment operator\nright\nso let us stop here\nso in this session we have seen\ndifferent\ntypes of operators that is argumenting\noperators comparison operators so\ncomparison operators are also called as\nrelational operators\ncomparison operators\nand then\nunary operators plus and minus which\nchanges the sign of the variable\nand then we have seen\nthis assignment operators\nis equal to symbol is equal\nso let us stop here so in the next\nsession we will see\nabout the bitwise operators and\nautomatic operators and the membership\noperators and identity operators so the\nnext four operators will be seen in the\nnext section\nso hope you\nsimple operators so\nthese are almost similar to the\noperators which we have seen in the c\nlanguage\nso there is there is not no much complex\nin learning these operators\nso bitwise operators so here the name\nitself indicates the this evaluation\nwill be\nin between the bits that means first we\nhave to convert the\ndecimal value to the binary value and\nthese\noperators will be performed only in\nbetween the binary numbers\nso first let us see what are these\nbitwise operators\nso bitwise\nare\nbitwise\nand\nbitwise\nexhaust\ncomplement\nleft shift\nright shift\nso all these are the\ndifferent people's operators so\nthese operations can be done only\nbetween the binary numbers so for\nexample so we know that r means\nif any one is true automatically the\nresult will be the true\nso both are false\nthen only it will return fast\notherwise\ntrue\nend operation if both are true then only\nit will return true otherwise it will\nreturn fast\nboth are true\nit will return true\notherwise\nfalse\nany one operand is true\nthen it will return true\nany one\nis true\nit will be\ntrue\noh sorry\nso we we can write we can slightly\nmodify that so\nboth are\ntrue or false\nit will becomes\nfalse\notherwise\nit will written\ntrue\ncomplement\nif it is true\nit becomes false\nif it is false\nit gives\nnegation\nshift\nshifts the\nnumber of bits\ntowards\nleft\nhere it shifts the\nnumber of bits\ntowards\nright\nright so these are the different\nbitwise operators now let us take an\nexample so that you can\nclearly understood these bitwise\noperators\nso first r which was r is it represented\nas a line\nso\nif a is equal to some\n5 b is equal to sum 3\na or\nb\nso binary representation of a in\n8 bits\n8\ni am giving the 8-bit representation\nsimilarly the binary representation of 3\nright so performing the r\nperforming the r\nas we know\nhere in our if both are false\nthen only we get the false so 0 0 sorry\n1 1\n2 0 1 1\n1 0\n1 0 0 0\n0 0 0 0 0 0 so this is the result so\nhere 1 represents the true\n0 represents the funds\nso here in the r if both are false it\nwill return false that means if both are\nzero\nwe will get the result as zero\nright here one and one so both are true\ntrue\nzero and one one is two so one\none and zero one zero zero zero\nand all these things\nright so the result is\ndecimal 7\nright so\nnext\nhope you understood this\nnext end\nend\nso let us take the same example\nand\nso n means if both are true\nthen only the result will be true\notherwise false\nright so one and one\nso let us write it in a sequential\nright\nso one and one\none\nzero and one so one is false so\nobviously it will be zero one and zero\nobviously zero\n0\n0 0 0 0\nso the result is 1\nso a and b the result will be\ndecimal value\n1\nright hope you understood this now move\non to the\nexhaust\nright coming to the exam if both are\ntrue\nor both are false it will be\nfalse\nboth are true or both are false in these\ntwo conditions it will be false so let\nus take it one and one so both are true\nzero one is true mr is false true one is\ntrue and one is false true both are\nfalse zero both are false 0 0 0 0\na decimal value 6\nso\na x or b\nis nothing but the value 6\nnext\ncomplement\ncomplement so this is a unary operator\nthat means so it can be applied for only\none operand so\nif\nso here the complement means\nnegation\na\nthat means if it is true it will be\nfalse and if it is false it will be\ntrue so coming to the a 0 0 0 0\n0 1 0 1\nright so if\nwe use this negation a\nhere one so the resultant will be zero\nhere zero it will be one here zero here\none\nhere one one one and one\nso the decimal equivalent of this one\nwill be the answer\nright\nso\nlet us take\nso we can add all these things so add\nwhat\nthis one\nthis\nso 128 plus 64 plus 32 plus 16\nplus 8 plus 2. so total 10 26\nso 58\nso 110\n122\nhere it is 122\nso 122\nit will be 0 1\n250. so the result is\nthe decimal equivalent is 250.\nhope you understood the compliment means\nnegation simply we can raise it\nnegation so if it is one it will become\nzero if it is unit will become one\nright next shifting operations\nso this is also an ionary operator it\ncan be implemented by using only one on\nonly one operand first let us see the\nleft shift operator\nso we need to pay\nin i mean we need to specify how many\nbits it should be shifted so for example\na\nshifted with\ntwo bits\nso a two bits should be left shifted so\nfirst a value is\nzero zero zero\nzero one zero one\nso left shifted that means\nthis side\nso all the all the bits should be\nshifted towards his\nleft side\nright so\ndiscard this one\nso these two bits will be shifted so\nzero zero zero\none zero one zero zero so two bits will\nbe added on the right side\nso shift it\nif we shift this\nthese two bits will be shifted so that\nat the end we have to add the two bits\ntwo zeros\nso the value of this one is\nif we shift a value 5 with 2 bits the\nresultant will be 20.\nsimilarly\nright shift\nright shift\nsame\na is equal to 0 0\n0 1 0 1\nright shift that means here we have we\nare shifting 2 bits towards its left\nhere we have to shift two bits towards\nit right so these two bits will be\ndiscarded and now two bits will be\nheaded here\nzero zero zero zero\nzero zero zero one so two bits will be\ndiscarded\nthese two bits will be discarded\nright so the result is one if you\nshift the same file\ntowards its right with the two bits you\nwill get the result as one so hope you\nunderstood this one simple thing\nso these are all the\nbitwise operators so name itself\nindicates this will be performed on only\nbits that means first we have to convert\nthe decimal to binary equivalent and we\nhave to apply these bitwise operators on\nthe binary numbers itself\nnext let us move on to the next one next\noperator that is logical operators\nlogical operators so as we know that\nlogical operators are\nlogical and and it is represented as\ndouble ampersand so these operators are\nsame\nwhich we have we have already learned in\nc language right logical or\nand logical\nnot\nso here also the same procedure\nhere if both are true then only the\nresultant will be true otherwise\nthe resultant will be false\nhere also if both the\nresults are false then\nthe result will be false\notherwise it will be true\nhere negation\ni mean not is almost equal to the\ncomplementary bitwise that means if it\nis true\nthe result will be false if it is false\nthe result will be\ntrue\nand these operators are mainly used in\ncompound condition\nso what is a compound condition\nso if you if you are trying to compare\ntwo simple conditions then we will go\nfor this compound condition for example\nif you want to compare a greater than b\nand a less than c\nor a greater than b or a greater than c\nso this means\nwe have to compare again the two\nconditions\nthis is a simple condition\nand as a whole this is the\ncompound condition\nso in simple condition we will compare\nonly two\nvariables\ncompare two variables in compound\ncondition we will compare\ntwo\nsimple conditions\nhope you understood this\nso\nwhenever we want to compare two\nconditions then we will go for this\nlogical operators so here we can use\nlogical and logical r and again this\nlogical not is\nfor only it's a unary operator it can be\nonly applied for only one condition so\nnot\na greater than b\nright if this condition is true the\nresult will be false if the kind if this\nthe condition is false the resultant\nwill be\ntrue\nright so\nthe same explanation which we have\nlearned in c language the same will be\napplied for this logical operators in\npython\nnow\nlet us move on to the next one that is\nmembership operators\nso two operators are there that is\nmembership operators\nso membership operators are in\nnot in\nso when we have to use this in and when\nwe have to use this morning so both are\na boolean result both will gives the\nboolean result that means the it will be\neither true or\nfalse\nso these are applied in sequences\nthese membership operators are applied\nin sequence sequence of elements so here\nwe have a sequence of elements in three\ndata types one is\nlist\nsecond one is triple\nand the third one is dictionary\nthese are the three standard data types\nwhich can contain multiple elements with\nthe different data types\nso list can contain the multiple\nelements\nduplicate categories are multiple\nelements and dictionaries also contain\nmultiple elements so different\ndeterminants it will accept a different\ndependence so in these three\nwe can use these membership operators\nso we can have a variable\nand we can check whether this variable\nis existing\nin this list or tuple or dictionary so\nin such case we will use this membership\noperator so variable\nin\nsequence\nthis sequence may be\neither list\nor triple or\ndictionary\nright\nso here we have to use this\nmembership operator similarly not in\nso\nhere if exist\nif exist\nit will returns true that means 1\nnot exist\nit will return\nfalse that is 0\nsimilar to the\nmembership operator there is another\nanother membership operator that is\nnothing\nso\nhere also we have to write\nvariable\nnot in\nsequence\nso here again the sequence can be in the\nlist tuple on dictionary\nso\nhere if\nnot exist\nit will return true\nmeans one\nif exists\nit will return false that is 0\nbecause here we are using not in\nnot in so these two are\nmembership operators can be applied on\nsequence of elements\nhope you understood this\nmembership operators\nnext coming to the next one\nthe\nlast one is identity operators\nagain there are two identity operators\nis\nis not\nso here the comparison\nif\ntwo\nobjects or two variables\nreference\nto\nsame\nobject\nit will return\ntrue\notherwise\nit will return\nfalse\nfor example if a is having some value 5\nand b is having a value 6\nso a is\nb\nso here a is referencing to 5 b is\nreferencing to 6 so a is b will result\nas a\nfalse\nsimilarly\nis not\nif\ntwo variables\nnot referencing\nto the same\nobject\nit will return\ntrue\notherwise\nfalse\nfor example\na is equal to 5 b is equal to 6\na is not\nb\nso a references to 5 b references to 6\nso a is not b this statement is true\nbecause a and b are not equal\nright so here if a is equal to 6 and b\nis equal to 6 a is b that means a is\nreferencing the 6 b is also referencing\nto the same object then\nit will result\ntrue\nhope you understood this\nso apart from the\noperators in c language there are two\ndifferent operators that is identity\noperator and\nmembership operators\nand here\nin c language additional to this we have\nalso learned incremented decrement\noperators and conditional operators so\nhere there is no way to use this\nincrement and decrement operators so\ninstead of using this increment and\ndecrement operators we have to use the\nassignment operators so\nin c if you write i plus plus\nin python we have to write i is equal to\ni plus 1 or i plus is equal to 1\nso instead of using\nincrement and decrement operators we\nhave to use\nthe assignment of operand\nand there is no way of\nusing\nthe conditional operator\nright so hope you understood this\noperator's concept so in the previous\nclasses we have seen the arithmetic\noperators\nrelational operators or comparison\noperators unary operator and assignment\noperator\nand in today's session we have seen the\nbitwise operators logical operators\nmembership operator and identity\noperator\nso these are all the different operators\nwe can use in\npython programming\nso now let us see the operator\nprecedence in python programming so here\nthe question is\nwhat is the operator precedence\nso if any expression is having\nmore than one operator\nso\nwhich part should be evaluated first\nright so that can be done by using this\noperator precedence chat\nso every operator is having some\nprecedence that means a priority value\nso we will give a priorities to the\noperators so which one is having the\nhighest priority and then the low\npriority\nand now let us\nlook at the\npriority i mean operator precedence chat\nso the first priority is for\nsee\noperator precedence operator precedence\nthe first priority is\nfor exponent\nso among all the operators this\nuh\nexponent operator is having the highest\npriority\nright\nnext\ncomplement\nplus minus so that means here\nthe complement\nhere minus is not an arithmetic operator\nit's a unary\nplus\nunary\nminus so as as we have discussed that\neuler plus and under minus are used to\nchange the sign of a variable\nright next\nmultiplication division modulo and floor\ndivision\nmultiplication\ndivision\nmodulo\nslow division\nso floor division that means it gives\nthe integer part as a result\nright\nnext\nhere the aromatic operators\naddition\nsubtraction\naddition and\nsubtraction\nnext\nleft shift\nand\nright shift\nleft shift operators and\nright shift operators\nnext\nbitwise\nand\nbe twice\nand\nnext ex xor and or\nbitwise xor\nb twice\nr\nright\nnext\ncomparison operators\ncomparison operators\nright\nand then\nequality operators\nso equally operators are also\nalso part of comparison operator that\nmeans is equal to and not equal\nright then\nassignment operators\nso is equal to\nplus is equal to\ninto is equal to minus is equal to and\nso on\nso\nassignment\noperators\nassignment operators\nso after the equality operators then\nassignment operators\nnext\nidentity operators\nnext\nmembership operators\nnext\nand sorry\nso we can simply write s\nand\nor\nnot\nso logical operators\nright so these are the operator\nprecedence chart so among all the\noperators first preference is for\nexponent\nnext complement you'll replace and use a\nminus\nmultiplication division module and\nflow division addition and subtraction\nleft shift and right shift bitwise end\nbitwise xor and on\ncomparison operators equality operators\nassignment operators identity operators\nmembership operators and the logical\noperators now the question is if the\nexpression consists of\nthe operators more than one operator\nwhich is having the same precedence\nthen\nhow the expression should be evaluated\nright so if the expression consists of\nmultiple i mean more than one\noperator and all the operators are of\nsame residuals then\nhow to evaluate so then we have to\nfollow the evaluation process from\nleft to right\nleft to right\nthat we call it as associativity\nassociativity is from left to right so\nwe should follow from left to right\nright so let us see the example so that\nyou will definitely\nyour doubt will be clarified\nso let us see here left to right and\nwrite down\njust a move\nso associativity is from left\nto\nright\nsee if the expression is some a is equal\nto\n5 into 3\nplus\n4 minus 2\nright\nokay so in this\nwhich operation should be performed\nfirst so here there are three operators\nmultiplication addition separation\nso addition subtraction multiplication\nso among these three which one is having\nthe highest precedence multiplication is\nhaving the highest principle first\nthese two\nvalues will be\nevaluated so a is equal to\n15\nplus 4\nminus 2\nnow again 2 operators are left\nso here addition and subtraction\nsee here addition and subtraction are\nhaving the same procedures\nboth are having the same procedures now\nwe will go to the associativity so that\nis from left to right we have to\nevaluate from left to right so from left\nthe first operator is less so first\nthese two will be evaluated so 19 minus\n2\nnow\nit will be 70\nright hope you understood this\nso if if the expression contains\nmultiple more number of operators which\nare having the same precedence we have\nto follow the evaluation process from\nleft to right so this is the best\nexample for this operator procedures\nwe're going to take one more example\nlet us take this one\nso here there are four operators plus\nmultiplication division and subtraction\nso here the multiplication and division\nboth are having the same precedence so\nfirst\nso if both are having the same\nprecedence we have to follow from left\nto right from left the first one is\nmultiplication so this will be evaluated\nfirst\na is equal to 4 plus\n15 divided by 2 minus 1\nright\nso\nnow the division operator is having the\nsame precedence\nhighest precedence 15 by 2\nin python we will get the accurate\nresult whereas in integers we will get\nonly integer because in python there is\nanother operator to get the integer that\nis a producer here we are applying the\ndivision so\n4 plus\n7.5 minus 1.\nright so again we are having two\noperators so this these two will be\nperformed and now we are having two\noperators plus and minus so in the next\nstep\nwe have to follow from left to right\nthis plus will be evaluated so these two\nwill be available so 7 4 plus 7.5 that\nis 11.5\nminus 1\nand the result will be finally\n10.5\nso hope you understood this example\nright so whatever it may be so there is\nthere is a precedence chat for all the\noperators and we need to follow the\nprecedence chat while evaluating the\nexpressions\nso if if any expression is having more\nthan one where one operator which are\nhaving the same precedence we need to\nfollow the evaluation from left to right\nthis is simple thing\nright hope you understood this one\nso here first of all what is meant by\nthis control structures\nso this control structures means the\nname itself indicates this control\nstructures\nsays\nthe control flow of the statements in\nthe programming language so it will\nshow the control flow\nright\nso you will show the flow control\nright so these are of three types\none is\nsequential\ndecision control\ntry to control so sequential decision\nand iteration\ncoming to this sequential normal\nsequential execution of statements we\ncall it as a sequential\ncontrol\nthat means if you want to add two\nnumbers so that requires the two\nintegers so\nwhere some two integers is equal to five\nis equal to six and uh\nprint\na plus b so here the control flow\nsequentially so first line is executed\nafter that sum five will be stored in a\nand second line is executed after that\nsix will be stored in b and the third\nline the result will be stored that is\nthe result will be displayed that is 11\nwill be displayed on the\noutput screen\nso this is a normal sequential execution\nso line by line execution so that we\ncall it as a sequential control flow so\ncoming to this decision control flow the\nname itself indicates there will be some\ndecision and based upon the decision the\ncontrol will flow in one direction only\nin one direction\nso\nso here there will be some condition\nso based upon the condition\nit will execute either\ntrue block\nor\nfalse block\nso the condition the condition means\nso relation between two operators\nso simply we can say relation between\ntwo operators or we can we can say that\nif the relational operators are used in\nbetween two variables or\nthe logical operators are used in\nbetween two simple conditions then we we\ncall that that as a condition or an\nexpression so based upon the result of\nthis condition or expression the\nparticular block will be executed so if\nthis condition or expression is true\nthen some set of statements will be\nexecuted and the other statements will\nbe skipped and if the condition or\nexpression is false this two block will\nbe skipped and only false block will be\nexecuted so that means\nit will the control will flow only in\none direction either true or some pulse\nnext\nthis is an iterative control structures\nso you try to control structures means\nloops that means\nexecuting\nsome set of statements continuously\nuntil some condition or expression\nbecomes\nfast\nso multiple executions of a same set of\nstatements we call it as an iterative\nright so let us see one by one so first\nwe will cover this decision control\nstructures and then we will move on to\nthis iterative control structures so\nfirst let us see the decision control\nstructures\nright\ndecision control structures so\nhere\nin this decision control structures\nthere are four categories one is\nsimple\nif\nif else\nnested if\nif\nalif\nelse\nso there are four four categories comes\nunder this decision control structures\none is a simple if defense necessity if\nalif ends so in this session let us look\nabout these two concepts and in the next\nsession we will move on to these two\nconcepts\nnow coming to this simple if\ncoming to the simple if here we are\nusing the keyword\nif small letters\nright small letters\nif\nand simply we can say if is a true block\nsimilarly else\nis a\nfalse block\nand as i have said in the previously the\ndecision control structures means\nwe have to check the condition and based\nupon the result of the particular\ncondition or expression the control will\nflow\nso if the condition is true true block\nwill be executed for a if it is false\nfalse block will be executed so here the\nquestion is where we have to write this\ncondition or expression so the condition\nor expression should always written in\nif block right so the condition or\nexpression always it should be written\nin\nif\nright so if it's a keyword and else is\nalso a keyword\nnow let us\nsee the syntax for this\nso here the name itself will get simple\nif that means we will concentrate only\non the true block\nso here if is nothing but a true block\nhere we are using only if that means we\nare only\nmentioning the true god we are just\nignoring the false block so if the\ncondition is true that particular block\nwill be executed otherwise it will not\nexecute anything the sequential\nexecution will starts\nright hope you understood this\nnow\nhow to represent a block of statement so\nhere see first of all let us say the\nsyntax\nif so write this\nlowercase letters\nif followed by\ncondition\nor\ntext expression\nso anything we can call it\ntext expression\ncolumn\nsee it's not a single column it's a just\ncolumn\nit's not a semicolon it's a just or\nnext\nstatement 1\nstatement\n2\nand so on\nstatement\nstatement x\nright\nsee this is a simple\nsyntax for this simple if statement so\nhere also we have to write the condition\nor a text expression and\nin this block so as i have said that if\nis a true block\nso a block can be a single statement or\na multiple statements\nso this block consists of either single\nstatement or multiple statements so that\ndepends upon our logic\nso\nhow to represent a block of statements\nhow to represent this block of\nstatements so in c language simply we\ncan write if\ncondition\nand the block of statements are\nrepresented in this curly braces\nso if you include this curly braces that\nimplies all the blocks are i mean all\nthe statements are\nrelated to this if block\nsimilarly\nelse again we will write curly braces so\nwhere we have where we want to write a\nmultiple statements and whenever we want\nto combine all these multiple statements\nas a block we will just represent all\nthose multiple statements in curly\nbraces in c language but here in python\nlanguage\nso we we need not use this\ncurly braces\nso here everything will be done\nby following the\nindentation so this is very important in\npython\nindentation so indentation means\nalignment so all the\nsame set of statements i mean the the\nmultiple statements which represents a\nblock will be aligned in its equal\nalignment so will be written in an equal\nalignment right so\nfor this indentation\nwe have to include this column\nafter the\ncondition so here\nthis one will call as\nheader\nand these statements we call it as suit\nso every header should end with column\nso if this header is\nend with column automatically in the\nnext line\nthe four spaces will be\nignored and from the fifth space the\nstatement will be written\nso automatically the cursor will skip\nthese four spaces and the cursor always\nstarts from the fifth space\nso immediately after completion of this\nstatement if you press enter again the\ncursor will come\nagain the cursor will uh skip the five\nfour spaces and from the fifth space it\nwill be\ndisplayed so from the fifth space only\nwe are writing the statement so we can\nobserve this so all these multiple\nstatements are aligned in an equal part\nso this follows the equal alignment so\nthis represents indentation\nwhich gives or which specifies the block\nof statements\nwhich specifies the block\nright so here we are not using any curly\nbraces\nso\nthis will be applied for all the\niterative statements or all the decision\ncontrol statements so in python in\ngeneral we have to follow this\nindentation and the indentation\nspecifies the block of statements so how\nto specify or how to represent the block\nof statements and that can be done by\nincluding column at the header of this\ncontrol flow\nso if you put this header i mean\nat the header automatically the\nindentation will be followed\nso whenever you complete this block of\nstatements automatically\npress the backspace so that the cursor\nwill move on to the first line\ni mean\ntowards its left left element will be\ndone and this statement represents\nthe immediate statements after the if\ncondition so\nthat we have to observe by using this\nalignment so if condition\nhere there is an alignment\nright four spaces\nso this represents a block of statements\nand immediately after a\ni mean after completion of all these\nmultiple statements immediately we have\nto press the backspace so that the\ncursor should be moved up to the\nleftmost corner\nand from here it will again we have to\nwrite the statement so this implies this\nstatement is an immediate sequential\nstatement executes after the condition i\nmean after if the condition falls a this\nstatement will be executed\nor if the condition is true after\nexecuting all the statements this\nstatement will be executed\nso this is not an else part because we\nwe didn't write any else part\nonly if condition so this is called a\nsimple if\nright\nso hope you understood so let us see the\nprogram simple program so that you will\ni i mean you will understand\nso let us write a program\nso here\nlet us write a program whether the\nnumber is\nzero or a non-zero\nsee\nso first read the\nvalue so for reading\nwe have to write n is equal to\nhere\ninput of\nenter n\nright so this gives the string right as\nyou have discussed in the input and\noutput statements input statement always\ngives the result as a string format so\nhere we have to check it cell number so\nfor this purpose we have to use the\nconversion type conversion so we have to\nconvert this string to integer so for\nconverting this string to integer just\nadd in\nright as a prefix\nso that this string will be converted\ninto end and that will be ascend to n\nnow m is a numerator\nright now we have to check whether the n\nis a non zero or zero\nso if\nn\nis equal to is equal to zero\ncolumn so this is very very important\nso\nif you include this column automatically\nthe cursor will start from here\nprint\nzero\nright\nokay so this is a simple program so we\nare not writing any else path or just we\nare writing the\nonly if part that means a true part\nnow\nlet us move on to the next one that is\neffects\ndefense\nso here\nin the effects we have to use both the\nkeywords if and else\nso here if is a true block and else is a\ntrue block i mean false block\nso here based upon the text expression\nor the condition\nso the result of the text expression or\na condition only one block will be\nexecuted the other one will be skipped\nso let us write the syntax here so here\nalso we have to follow the indentation\nso if\ncondition\nor\ntext expression\ncorner so this is very important\nstatement one\nso we can write\neither it can consist of either single\nstatement or multiple statements\nstatement two and so on\nagain\nelse so this ends the\ntrue block because here we are writing\nthe l spot from left most corner right\nso this arrangement should be same\nelse again we have to include the column\nso automatically the\ncontrol or the cursor will start ah\nblinking from\nthis alignment that means it will leave\nthe four spaces and it will start\nblinking on the fifth position\nso statement one\nstatement two\nand so on\nstatement x\nsee\nhere\nthis condition or a text text expression\nso\nthis is called a true block\nand this is called a false block\nright so if this condition is true\nautomatically all the statements comes\nunder the true block will be executed\nand this part will be ignored so it will\nnot be executed and if this condition or\na text expression is false automatically\nthese statements will be ignored and\nautomatically the control will move on\nto this else part because it's a pulse\nblock so these statements will be\nexecuted and after completion of these\nif else\nthis statement x will be executed so\nstatement i am writing this statement x\nbecause it is a sequential execution\nit will execute only after completion of\nthis effects\nright so this is a sequential execution\nhere most important thing once again i\nam telling that is indentation so we\nhave to follow this indentation that\nmeans we have to uh differentiate this\nheader and suit with a corner so header\ncolumn it automatically applies the\nindentation\nright so hope this you\nunderstood this one\nand now let us see an example for this\neffects\nso let us\ncheck whether the given number is\npositive or negative\npositive or negative so first again\ncommon we have to read and value\nso input\nenter n value\nso it will return in a string format so\nfor this\nwe have to\ntype cast\nso we have to convert into integer now n\nvalue is a integer\nnow write down if\nm greater than zero\nso if n greater than zero so obviously\nany number if if any number is greater\nthan zero we know that it's a positive\nnumber so write down so if you include\nthis column\nthe alignment will be applied so that is\ncalled indentation so print\npositive\nelse so if it is face that means if the\nn value is less than zero\nprint\nnegative\nright\nso\nthis is a simple a program example\nprogram right for this simple effects so\nhere we are reading the n value and we\nare\nchecking the condition the text\nexpression if it is greater than zero or\nless than zero so if it is a greater\nthan zero automatically we are printing\nit as a positive and if if it fails\nautomatically x part will be executed so\nwe need not write the one more condition\nhere\nright so\nthe important thing is this text\nexpression or a condition should be\nwritten only beside the if statement so\nwe should not write this conditional\ntext expression\nbeside the else part so else part is\nalways the false block\nright so hope you understood these two\nlet us see the decision control\nstatements\nso in this session we will see\nthe nested if\nand the second one\nif\nany\namps\nright so this is nothing but\nelse\nif\nletter\nin c\nsimilar\nso instead of writing l c we will write\nthis alif alif is also a keyword\nso these keywords we have already\ndiscussed in the previous sessions right\nso if is a keyword else is a keyword and\nalso alif is also a keyword\nnow\nlet us see one by one first let us start\nwith the nested\nso here the name itself indicates\nwriting the if condition inside the if\ncondition\nso if the condition is true again in\nin inside the if we will write another\ncondition right so let us see the syntax\nso that you will understood clearly\nnow i will write here\nif\nis it\ntrue block\nelse\nis a\nfalse block\nnext\nindentation\nthat can be achieved by including this\ncolumn\nso this means\na block of statements\nlot of statements now let us write this\nindex here so first\nif\ncondition\nor\ntest expression\ncolon\nso if you introduce colon automatically\nit will\nuse these four spaces it will use the\nfour spaces and from the fifth line it\nwill be\ndisplayed right no\nagain\nso in the place of statements we are\nwriting one second in the if condition\nso if condition\nor\ntext\nexpression\nagain follow the indentation again from\nhere four spaces will be removed\nso here also we can write either a\nsingle statement or multiple statements\nagain we have to write the l spot again\nwe have to include this indentation\nagain right spot here for this\nright\nso\nfirst if this condition is true\nthis completely\nrepresents the true block\nright again\nin the true block again we are comparing\nthe condition right we are checking the\ncondition so\nhere\nthis is the true block\nfor this if\nand this is the\nfalse block\nso this is the\nfalse block\nso this is the inner true block\nin the first one\nright so here we are writing the if\ncondition inside the if condition so\nthis we call it as a nested if nested if\nso if here if this condition is true\nautomatically this part will be executed\nright so this part will be executed and\nif this condition is false all the\nstatements are ignored and directly it\nwill execute the else path that means\nfor example if this condition is false\nautomatically statement one and\nstatement two will be executed\nright so if this condition is true\nthis part will be executed that is that\nmeans again one more condition will be\nimplemented and if there is i mean if\nthe condition is true\nthese two statements will be executed\nand if this condition is false these two\ntwo statements will be executed\nright so this is a simple\nsyntax for this less study so let us see\nan example so that your doubts will be\nclarified right now let us move on to\nthe example for this necessity so we can\ntake\na problem that\nfinding the largest among three numbers\nlargest among three numbers\nso in python all the comments will start\nwith hash so if you include this hash as\na prefix\nfor the for any line that line will be\ntreated as a current right\nnow\nso for this first we have to read three\nelements\ni mean three numbers\nso for reading the three numbers we can\ntake\ne in of that is type conversion\ninput\nenter\nvalue of a\nand similarly b so we should not use a\nsemicolon at the end of the statements\nright so just write down the statement\nand\nexecute\nso\nit gives us very simple\nrepresentations\nso value of b similarly\ni read the value of c also\nright now we are having three values a b\nc\nany integer values so first here uh if\nyou take any input it will be in your\nstring format we are converting into\ninteger so\nnow we are having three numbers now\nwrite a condition\nif\na greater than b\nright if a greater than b now we have to\nwrite the true block\nagain we have to check\nif a greater than c\nthen\nprint\na is\nlarge\nelse\nso\nhere\nif a greater than b\nit's a true\nand a\nis not less than c i mean not greater\nthan c that means false\nso now\nthe control will enter into this part so\nhere a is greater than b but not\ngreater than c so\nobviously the result will be\nc\nc is\nlarge\nnow\nelse\nright so if a is\nless than b\nokay so if a is not greater than b that\nmeans it's a\nfalse start now the condition will check\nhere\nright now condition will goes to here i\nmean the control will goes to here else\nand we have to check the condition so we\ncan write it here\nand leave\nso in the from the beginning i have said\nthat\nthe condition should be written only on\nthe if that means beside the if you\nshould not write any condition beside\nthe else so here we have to check one\nmore condition\nso if a is\nis not greater than b\nright we have to check one more\ncondition then we have to print the\nresult so that's why we have to check\nthe condition we have we can combine\nboth else and if and we can write it as\na leaf\nalif\nsorry\nb greater than c\nb greater than c\nprint\nb is large\nelse so again this is a false part\nprint\nc is\nlarge\nright so this is a simple program for\nfinding the largest among three numbers\nso let us take\nthe trace this one so first let us say a\nis equal to 5 b is equal to 2\nc is equal to 7\nnow\nif a greater than b so\nfive greater than two say true\nso this block will be executed\nnow\nfive greater than\nseven\na greater than c\nfalse so this part will be executed so\nobviously\nit will print\nc is\nlarge\na simple thing\nright so if you want to write one more\ncondition in the spot we have to include\nif in that else part and we have to\nwrite it as a alif\nalif right\nso hope you understood this necessity\nnow let us move on to the next one that\nis\nif alif\nelse\nsee\nif alif ends\nso the syntax is\nif\ncondition or\ntext expression\ncommon this is very important\nwe can write a single statement or\nmultiple statements\nnext again if you want to check one more\ncondition\nwrite the alif\nwrite down the condition\nor text expression\nagain follow the indentation that means\nuse a column\nso we can write multiple statements or a\nsingle statement\nand the false path yes but we can write\nmultiple ellipse right so we can write a\nmultiple if statements and finally we\ncan write this l squared\nso this is a simple syntax for this if\nyes so one more thing it's a cases too\nso these keywords are in the lower case\nletters so just for ah and heading\npurpose i am writing the capital letters\nright so while we are using in the\nprogram we have to write the small\nletters so just to go through the\nkeywords and we have to follow the same\nindex of that keywords\nso as we know that keywords are the\nreserve words given by the interpreter\nand we have to follow the same thing in\norder to implement them in the program\nnow\nso let us see one program a simple\nexample\nfor understanding this if l if else so\nhere the problem is\nfor writing the program\nlet us write\na relation\nbetween\ntwo numbers\nso we will write a program to show the\nrelation between two two numbers\nsee\nright so what is the relation between\nany two numbers\nso only there is there are three\npossible cases\nwhich shows the relation that is\none is either both are equal\n[Music]\nsecond one is either the first number is\ngreater than second number\nand the third one is either the first\nnumber is less than the second number\nso three possible cases so this gives\nthe relation between two variables so is\nequal is equal to less than or a greater\nthan\nright\nnow for this we have to read two\nvariables i mean two variables two\nnumbers\nso\nlet us take a is equal to\ntype conversion\ninto\ninput\noff and the value of a\nb is equal to\nin of\ninput of\nenter value of b\nnow\nwe have two values a and b now we can\nwrite if\na\nis equal to is equal to b\nfollow the indentation so include the\ncolumn\nprint\nboth are\nequal\nagain we have to check one more\ncondition whether it is less than g less\nthan a second number or a greater than\nsecond number\nso l is\na greater than b\nfollow the indentation\nright print the results\nthis implies if this condition is true\na is\ngreater than\nb\nso obviously if if these two conditions\nare false automatically a is less than b\nso then we can write directly l smart so\nwe need to check what the condition uh\none more condition because the remaining\ncondition is simple that is a is less\nthan b so there are no more conditions\nto check so that's why we can write only\nelse part\nelse\nprint\na is\nless than\nb\nthat's it this is a simple program\nto show the relation between two numbers\nand is an example for\nif alif else\nand one more thing we can write that is\ngiving a grade to a students right so we\ncan read a number of subjects\nand we can read a marks of those\nsubjects and we can find out the\npercentage and based upon the percentage\nlevel we can give the grade so if it is\ngreater than 70 we can give as a\ndistinction and in between 60 to 70 we\ncan give we can print as a first class\nand if it is in between 50 to 60 second\ncash and the 40 to 50 third class and\nless than 40 safety so here we need to\ncheck all the conditions so we can write\na number of l errors\nright multiple conditions\nright so hope you understood this uh\nsimple thing if\nyes\nso in today's session we have seen two\ndecision control statements the those\nare nested if and if l if else\nright so here the if represents the true\nblock and else represents the pulse\nblock so in order to check\none more condition in the else path we\nhave to use this\nalif keyword\nso by using this lift keyboard we can\ncheck the multiple conditions\nsee before going to the uh iterative\ncontrol statements first we have to know\nwhich\nsay i mean which statements we call it\nas an iterative control statements\nso whenever a block of statements\nare used to\nexecute repeatedly\nfor number of times that we call it as\nan iterative statement\nright so for\neach\ntime of execution we call it as an\niteration\nso for example if some set of statements\nare need to be executed 10 times\nso that we call it as a 10 iterations so\nevery time we call it as an iteration so\n10 iterations and then\nso before going to that we have to take\ncare about the three things one is\nloop variable\ninitialization\nsecond one\ncondition\nfor termination\nthird one\nupdation of\nthese three things so before starting\nthe loop we have to initialize one\nvariable and the second one is at\nparticular time\nthe loop should be terminated that means\nfor getting the finite number of\niterations so if you fail to write this\ncondition it will go to the infinite\nloop so that loop will not turn red so\nit will continuously the number of\niterations will be increased\nnext application of variable loop\nvariable\nso we need to for every iteration we\nneed to update this loop variable\nso based upon this loop variable we have\nto write the condition\nright so these three things we have to\ntake care about this in a traditional\nstatement so there are two\ntypes of iterative statements one is\nwhile loop\nso these internal statements we call it\nas an loops right while loop\nand\nfor loop\nso in c language there is an another\nloop there is a do while loop here there\nis no chance of third one only two\ncategories are there one is while loop\nand for loop\nso let us see one by one\nsee coming to the while\nso as we have discussed in the previous\nsession\nso here the block of statements will not\nbe represented in between these three\nbraces\nfor every header if you include the\ncolumn as a\nsuffix automatically the indentation\nwill be applied and the cursor will\nleave\nfour spaces on the left side and the\ncontrol will starts then the cursor will\nstarts from\nfifth space that implies\ni mean this alignment implies these are\nthe some set of statements which are\nrepresented for this particular header\nthat header may be if if else or or\nwhile or do i anything right so\nall the statements which are represented\nby using this indentation\nwill represent a block of statement\nright so\ninstead of using this curly braces we\nwill use this\nindentation alignment\nright now let us see the syntax for this\nsyntax for while loop\ny\ncondition\ncoron\nautomatically we have to write from here\nstatement one\nstatement two\nand so on so this may be\na\nsingle statement or multiple statements\nso this alignment so we can see this\nalignment\nrepresents the\nblock of\nwhile\nso that means until this condition\nbecomes false all these set of\nstatements which are aligned will be\nexecuted repeatedly\nso immediately after after the condition\nfails automatically\nthe control will come out from the loop\nthat means the next statement after the\nwhile should be aligned from here\nsee\nso all these alignments will\ncomes under block of while loop and\nwhatever the statement we are writing\nwhich is equal for this while alignment\nthat will be the sequential execution\nthat means this will be executed after\nthe condition becomes false\nright so this is a simple\nsyntax\nfor while loop so let us see the\nexample\nsee\nthis is a comment in\npython print\nin\nnatural numbers\nright\nnow\nfor this first we have to read the n\nvalue\nso n is equal to\nint of\ninput\nenter\nn value\nso n will be\nhaving one value now initialize the loop\nvariable let it be l is equal to 0 this\nis a loop variable\nso we have to remember loop variable\ninitialization\nnext\ncondition\nfor termination\nnext\nupdation now this is the loop variable\ny\ni\nless than\nor equal to n\nso this is the condition where we have\nto stop\nwhat we have to do\nprint i\ni is equal to i plus 1\nright so\nwe can write here print\nend of\nsee this statement implies\nso this is the\nfirst one\nloop variable\ninitialization\nthis one is the condition\nso where we have to stop\nthis one is the\nupdation\nright so here\nso in python there is there is no\nincrement in decrement operators\nso we have to replace those increment\nand decrement operators by using this\naugmented\nassignment\nsimply we can use this assignment\noperator and arithmetic operator so i is\nequal to i plus one we have to write it\nlike this so we we should not write as i\nplus plus because there is no increment\nand decrement operators in python\nright so see first n value so let me\nplan this value is equal to 5 now i is\nequal to zero\ni less than or equal to five zero less\nthan or equal to five true print i so\nprint i means zero will be printed i is\nequal to i plus one so i is equal to one\nn is equal to five one less than or\nequal to five\nprint i so one will be printed n is\nequal to five i is equal to i plus one\nso two two less than or equal to five\ntrue two will be printed three will be\nprinted four will be printed after that\ni is equal to 5\nso here we have written 5 less than or\nequal to 5 this is also true 5 will be\nprinted again i is equal to i plus 1\nnow i is equal to 6\nso 6 less than or equal to 5 here the\ncondition falls\nso automatically the result will be 0 to\nn\nright from 0 starting from 0 1 2 3 4 and\n5. so if you initialize this 0 with\nso\nhere the display will be from one to\nfive\nso i hope you understood the simple\nthing so while loop\nso in this value we have to follow all\nthese three things\nright now let us move on to the second\none that is\nso here also we have to initialize the\nvariable condition adaptation but in a\ndifferent manner\nso here we will write\nfor\ni\nin\nsequence\nso this sequence can be\na tuple\nor a list\nor a dictionary\nor a range so this sequence can be\nanything\nso either it can be a list to pull\ndictionary or range so i will be\nfollowed with all the values in this\ngiven range or in given dictionary or\ngiven triple or given list so all these\nfour are the sequential data types so\nthat means these are the data types\nwhich will accept the sequence of\nelements with the different data types\nright so\nlet us see this range\nso afterwards\nin the coming topics we will uh move for\nthese three let's triple a dictionary\nnow let us stick on to this range\nsee\ni in\nrange\nnow\nlet us see the syntax for this range\nso range\nstart\nstop\nstep size\nso there are three arguments involved in\nthis\nrange function\nso here we have to\ngive the start value from where i will\nbe included\nnext\nwe have to give the stop value where the\ni should be\nend this is the end value\nstart value and value\nand this step size\nis the difference between the first\niteration element and the next iteration\nso this is nothing but our updation\nright so this is a loop variable\nwe are initializing\nthis is the initialization so start so\nstarting value\nstop where to stop this is the condition\nitself here itself is the condition so\nthis stop element is the last element\nand step size is difference between the\nfirst iteration and second iteration\nthat means updation and the start if you\nmention the start that is well and good\nand if you are not mentioning this start\nthe starting will be always 0 by default\nthat means i value in range function\nalways starts from zero\nand this step size here also it's an\noptional thing this should be mentioned\nby the programmer if programmer doesn't\nspecify the step size the default value\nis one\nthe default value is one that means\njust an increment\nso if the i value in the first iteration\nis zero\nthen in the immediate next iteration the\ni value will be 1\nin the next iteration i value will be 2\nthat means the difference will be 1 so\nif this step size is not mentioned by\nthe program\nand stop must be\nmentioned by the programmer itself so if\nthe programmer mentioned n the last\nelement will be n minus 1\nright so if n is the last element\ni mean n is a stop element end element\nthe value is n minus 1 will be the last\nelement so it should it will not include\nthis value n value so that means simply\nrange of\n0 comma n comma 1 this implies\n0 to n minus 1\nwith unit difference\nright from 0 1 2 3 4 and so on and minus\n1\nthis function or else or else\nsimply we can mention only range value\nrange of n\nthis implies\n0 to\nn minus 1\nwith\nunit\ndifference\nbecause here we are not mentioning the\nstart we are not measuring the step size\nso here whatever the match we are\nmentioning is the last size\nso if there is only one argument that\nargument is automatically just top\nelement that is the end element\nso n element if n element is n the last\nelement will be n minus one so i will be\niterated from zero here there is no\nstart so\nautomatically by default it will take as\nzero and here no step size so\nautomatically it will take it as one as\na difference now\nlet us see\nhope you understood this range\nlet us see\nso range\nn or simply\nrange 5\nsorry let us write this index first and\nthen we will move on to the program\ni in sequence\ncolumn automatically the indentation\nwill be applied\nstatement 1\nstatement 2 and so on\nso this is a simple\nsyntax for for loop now let us see an\nexample by using sequence as a range\nso we don't know we need not initialize\nthis i\nbefore starting the formula because loop\nvariable initialization condition and\nupdation everything we are writing by in\nthe range function itself\nrange of m sorry range of file\ncolon\nprint i\nso here only one argument is there so\nthat argument is an end element so by\ndefault it will be i value will be\n0\nand the last element will be\n4 so first element\nand this is the last element and the\ndifference is\n1 because there is no matching of step\nsize so the output for this one\nis\n0 1 2 3 4\nthat's it\nbecause\nwe are giving 5 so 4 up to 4 it will be\nprinted now\nif we mention here the\nstep size from\none to five\nthat implies the first first argument\nwill automatically consider it as a\nstart element\nand five as a\nend element so\nby default the last element step size is\none\nso the output for this one is\nalways start from one so starting\nelement one\nright if you are not mentioned here one\nit will be take it as a zero so one\ntwo three and four\nright\nnext\nif you mention here\n2\nthat means start is 1 last element is 5\nminus 1 4 and the difference is 2.\nnow output for this one is first start\none\ntwo difference three\ntwo difference\nfive so five is not included because the\nlast element is five and only four is\nthe last last element so one and 3 is\nthe output for this\nand\nsimply if you write here\nstart from 5\n0\nminus 1\nright so this is simple output it will\nstart from 5\nminus 1 we are giving so\n4\n3\n2\n1\nokay\nand 0 0 also will be printed\nnext\nso if you use here 2 minus 2\nautomatically\n5\n3\n1\nthis is the output from this thing so we\ncan write ascending in an ascending\norder or a descending order so this\nimplies the updation\nthis implies the condition that means\nthe range is nothing but a condition\nthis is the\ninitialization\nright start stop and difference so this\nis a simple example\nfor using this for loop it's very simple\nwhen compared to our c language right so\nin c language we have to use three terms\nin the for loop first initialization\ncondition and updation and then a block\nof statements so here just we can\nmention it all these three things in a\nsingle function there is a range with\nthe three arguments first one is\nstarting element and the last last\nelement i mean stop element and then\nwith a difference that means a step size\nso this is a very simple thing so these\ntwo comes under our iterative control\nstatements\nbreak\nand\ncontinue\nso break and continue call as\nunconditional jumps\nso here coming to first one break\nso the name itself indicates so mainly\nfirst of all this break and continue\nstatements will be used in\niterative control statements\nright so that means either\nfur\nor\ny\nso either infer or y\nso\nhere coming to this break the name\nitself indicates whenever the control\nreaches this break statement\nautomatically the control will come out\nfrom the loop that means even though the\ncondition is true the control will skip\nall the remaining iterations and it will\ndirectly comes out from the loop that we\ncall it as a break state see\nso syntax just\nwriting the keyword\nbreak say small letters break exists\nindex so whenever the control reaches\nthis break automatically the control\nwill come out from the loop\nsee\nthe syntax\nis for\nvariable in range\nsome statements so common\nif\ncondition\nor expression\nso we can write anything common\nbreak\nright\nso whenever this control reaches here\nit will directly skip all the remaining\niterations indirectly comes out from the\nfurnace similarly while also\nby\ncondition\nor\nstatements\nif\ncondition or expression\ncalled\nbreak\nwhenever this control comes out from the\nloop automatically i mean whenever the\ncontrol reaches this break the control\nwill come out from the loop so whatever\nit may be\nthe break statement will skip all the\nremaining iterations and directly the\ncontrol will be comes out from the\nloop so if it is a nested for loop right\nif it is a nested loop either it may be\na two for loops or two while loops\nsee\nfor\nvariable\nin\nrange\nso\nif\nright if\nthe complete statement is returned in\nthe inside for loop that means inner\nloop\nthen whenever the control reaches this\nbreak automatically the control will\ncomes out from the inner loop and it\nwill execute the outer loop\nhope you understood right so\nwhenever the break statement is used in\nthe inner loop\nthe control will come out from only the\ninner loop that means outer loop will be\nexecuted continuously\nright so this is a simple syntax for\nthis\nbreak statement so let us see an example\nso that\nyour doubt will be clarified\nsee\nuh\nsee\nlet us take this example simple example\nso here i is equal to 1\ni less than or equal to 10 that is 1\nless than or equal to 10 print i\nso in this case\nso let us stress this example\n[Music]\nso i is equal to 1 1 less than or equal\nto 10 the condition is true print i so\none is printed\ni is equal to is equal to 5 that means\n1 is equal to is equal to 5 the\ncondition false\nso obviously\nagain see the indentation so this is the\noutsider loop this statement is outside\nvalue because the index indentation for\nthe indentation so\nif the condition is false we didn't\nwrite any s part so again the condition\nwill be checked sorry\ni have to write the updation so i is\nequal to i plus 1\nso\ni is equal to now 2\nthe condition fails and i is equal to 2\nso i is equal to 2 2 less than or equal\nto 10\n2 less than or equal to 10 condition 2\nso print i so 2 will be printed\nnext 2 is equal to is equal to 5 again\nfalse\nagain i is equal to i plus 1\nnow i is equal to 3\nright so 3 less than or equal to 10\ncondition true\nthen print i so 3 will be printed\n3 is equal to is equal to 5\ncondition false\nso i is equal to i plus 1 i is equal to\n4 now\nnow i 4 less than or equal to 10\ncondition true\nso print i 4 will be printed here\nand then four less than four is equal is\nequal to five condition two false i is\nequal to i plus one now is equal to five\nnow\nfive less than or equal to ten\nthe condition is true\nprint i\n5 will be printed\ni is equal to is equal to 5 5 is equal\nto is equal to 5 the condition is true\ni 5 is equal to is equal to 5 so\nbreak\nbreak means automatically the control\ncomes out from the loop and the\nimmediate statement after the loop will\nbe executed so here the immediate\nstatement after the loop is this print\nstatement now\nthe printing will be stopped and this\nwill be printed loop\nthird x\nso this will be printed\nright so this is the output\nfor\nthis program\nso whenever we are writing the break\nautomatically the control will come out\nfrom the loop and it will continue its\nexecution with the next immediate\nstatement after the loop\nright so similarly we can write this\nbreak statement in for loop also\nthe same\nconcept is implemented by using for loop\nalso\nright now\nhope you understood so that's why we\nsaid that this unconditional jumps that\nmeans a break can continue should be\nused only in iterative statements that\nmeans only\nin for loop or while\nright now let us move on to the continue\nstatements a slight difference between\nthe break and continue so here the\ncontinue will never\nbrings the control out from the loop but\nit will skip the current iteration in\nwhich iteration we have written the\ncontinue statement\nand it will\ncontinue with the next iterations that\nmeans it will just skip only one\niteration in which the continuum is\nreturned\nright let us see that your\nnote will be clarified now let us see\nthe continuous statement\nso continue statement\nso continue is also used in iterative\nstatements that is for wrong y\nso here the syntax\njust write the\ncontinuum in small letters\nthe same which we have written in c\nlanguage\nsee\nthat means it skips\nonly\ncurrent iteration\ncurrent iteration\nand\ncontinue with\nnext iterations\nright it will continue with the next\niteration now\nlet us see the working of continue\nso similar\nfun\nvariable in range\nif\ncondition or expression\ncontinue\nsee whenever this continue\noccurs then immediately it will skip all\nthe remaining\nsteps which are involved in the current\niteration again it will go with the next\niteration so that control will again go\nwith the next iteration so\nit doesn't comes out from the loop but\nit will continue the execution with the\nnext iterations\nsimilarly by using the y also\ny condition\nconditional expression\ncontinue\nso here also whenever the control\nreaches this continue automatically it\nwill move with the next iteration that\nmeans it skips all the remaining steps\nwhich are\nwritten in the current iteration\nright so similar to the for loop also in\ninner\nnested formulas i mean nested loops\nso\nif the continue is written in the inside\nfor loop that means inner loop then the\ncontinuous statement will be skip only\nonly one iteration and you will continue\nwith the next iteration it doesn't comes\nfrom the inner loop\nright so slight difference between the\nbreak and continue\nnow let us see the same example and uh\nlet us taste the\noutput right then we will fill the\ndifference between a break and continue\nsee now let us see an example\nnow let us write this continuing using\nfor loop so that\nwe are covering both the for loop and y\nso we have written a while loop in the\nbreak statement example and now we will\nwrite the for loop in continuous example\nso\nsee\nthis is a simple example the same\nexample printing one to ten elements so\nwhich we have written in the break\nstatement also so now let us state this\none so as we have discussed in the i try\nto control statements in the for loop we\nhave to use a range that means we have\nto use a sequence of values so the\nautomatic updation will be done and in\nthis range function we are using the\nthree fields one is the start second one\nis the end last one is the step size the\ndifference between first element and the\nsecond\nso we are not giving the third element\nso i mean third argument that is a step\nsize so by default it will be one\nso here the starting element is one so i\nwill be\ninitializing with one and the last\nelement will be here ten so n minus one\nis the last statements nine is the last\nelement here so i will be repeated from\n1 to 9 so first one in the first\niteration i is equal to 1\n1 is equal to is equal to 5 that is\nfalse so\nprint i so one will be printed next\nautomatically\nagain i is incremented\n2\n2 is equal to is equal to 5 it is also\nagain false so 2 is printed next i is\nincremented 3 is equal to is equal to 5\nfalse 3 is printed i is equal to equal\nto 4 4 is equal to is equal to 5 second\nfalse 4 is printed i is equal to 5\nincremented so 5 is equal to is equal to\n5 the condition is true so continue\ncontinue means it will skip all the\nremaining elements in the\ncurrent iteration and it will move with\nthe next equation so this print\nstatement will be ignored because this\nthis statement continues the control\nreaches the continue so automatically\nthe control moves to the\nagain problem so again i will be\nincremented with six so nothing will be\nprinted here\nso i is equal to six so six is equal to\nis equal to five again false so six will\nbe printed i is equal to seven seven is\nequal to is equal to five\nright so again the condition fails so\nseven will be printed and i is equal to\neight incremented so eight is equal to\nis equal to five\nright 8 will be printed\nnext i is equal to 9 and 9 is equal to\nis equal to 5 so again condition fails 9\nwill be printed\nright so i value is varies from 1 to\nnine as we have mentioned here in the\nrange function one to ten so always the\nend element is n minus one\nright how about how we understood here\nonly the one element is skipped that is\na five because in the fif i mean in the\nfifth iteration finally i is equal to\nfive so five is equal to is equal to\nfive the condition becomes true so\ncontinuous statement will be executed so\nit will skip all the remaining\nstatements in the current iteration and\nagain it will\niterations so i will be again\nincrementing and then the same procedure\nwill be followed further\nright so file will be skipped and all\nthe remaining elements will be printed\nif here\nwe have written this break statement\nautomatically\nthe program i mean the uh the control\nwill come out from the loop so here\nafter completion of this range\nthis print statement is executed because\nthis printf state i mean this print\nstatement is written after the formula\nbecause see the indentation here\nright so just we have to follow the\nindentation in python while writing the\nprogram\nso\nafter printing the line\nit will print loop\nterminates\nthis will be printed here\nright so hope you understood this break\nand continue statement and\napart from these two there is an another\nunconditional jump statement that is\npass\nin python but this is a\nno operation statement we call it as a\nno operation statement\nso\nit doesn't affect\nany code i mean any part of the code in\nthe python program\nso just a\ndummy keyword\nright so there will be no operation is\nperformed while\nwhenever the control executes this pass\nstatement\nright so\nimportant things are breaking continue\nso hope you understood these simple\nbreak and continue statements in python\nso list is a\nsequence of elements it is a data type\nand it consists of a sequence of\nelements that means multiple elements\nbut\nhere we can use multiple elements of\ndifferent data type so we can combine\nthe numerical values\nas well as the string values or as well\nas the complex values and everything we\ncan combine and form\nthis\nlist\nso similar to our array in c program but\nthe only difference is error is also is\na storage of multiple elements but of\nsame data type but here list is\nthe storage of different elements\nmultiple elements with a different data\nright so here the list\nis represented\nin a square braces so all the elements\nof a list are represented in a square\nbraces so this is very most important\nbecause\nif we use this square braces we call it\nas list\nif we use this\ntransits\nnormal braces that is called tuples\nif we use\nthis curry braces\nwe call it as a dictionary\nright so for everything there is a\nspecific meaning so we must be very\ncareful while representing the elements\nso if you represent the elements in\nbetween these parentheses it will be\nconsidered as a tuple not as a list\nand if you represent the elements in\nbetween these curly braces it will be\nrepresented as a dictionary it is not a\nlist so for every representation\nthat is the most important\nnow list so all the elements of the list\nmust be represented in square braces\nnow how to create a list\nright so by using the direct\ninitialization by using this assignment\noperator so we can write list is also a\nvariable name we can write a variable\nname so\nlet us write a sequence\nis equal to\n1 comma 2 comma 3 comma 4 comma 5 so we\nhave to represent all the elements in\nbetween the square bases where you\nseparating with the comma\nso this is a\nlist of numericals\nso this is a string list a list of with\na single string\nso this is a one horse\nlist\nwhich can have all the different i mean\nmultiple elements with different data\ntypes so here this is a numerical this\nis a string this is a floating variable\nand this is a string\nright so like this\na list can be initialized with multiple\nelements of different data types by\nusing\nseparated with the commas in between the\nsquare braces\nright now\nlet us see how to initialize the list\nat time\nso in c language\nthe reading elements how to read the\nelements of the runtime by using a\nfunction called scanf here we use input\nfunction\ninput function is used to\nread elements\nat\nruntime\nright\nread elements at one time so here\nfor initialization we can use append\nfunction\nappend function so this append function\nis used to insert\nelement\ninto the\nlist\nso first we have to initialize an empty\nlist and into that empty list we have to\nuse this input function and we have to\nread each and every element from the\nkeyboard at the runtime and we have to\ninsert that\nelement\nby using this append function\nright so syntax\nfor this effect is\nlist name\nso that means a variable name\ndot\nappend\nof\nelement\nsimple\nlist name\ndot append of element so it will\ndirectly append this element into that\nlist\nnow let us see an example\nso first\ninitialize the empty list\nso this is the\nempty list\nnow\nuse an iterative statement for i in\nrange of 5 that means we are reading\n5 elements index from 0 to 4\nelement is equal to input\nso this input function will read one\nelement from the keyboard and it will\nassign to element now we have to append\nthis element to sequence\nso\nsequence dot\nappend of\nelement\nright\nso this is a simple example\nfor reading the elements and assigning\nthem to the\nlist so\nthis is the code for reading the\nelements from the keyboard at runtime so\nfor i is equal to 0\nfor i is equal to 0 from the input\nfunction if you enter 10 so initially\nthe sequence is\nembraced\nso i is equal to 0\nright so 10\n10 is the element read read from the\nkeyboard so element is equal to 10\nthen sequence dot append so sequence\nconsists of\n10\nnext i is incremented so i is equal to 1\nwhich is less than 5\nand now the second element if you read\n20 as a second element that element will\nbe assigned to ele\nand sequence not append this function\nwill append this 20 in list\nsequence list\nagain if i is equal to 2 2 is less than\n5 so again if you read the element 30 it\nwill be appended to the sequence 10\ncomma 20 comma 30\ni is equal to 3\nif you read the element i is equal to 40\nnext it will be appended to the sequence\nlist 10 20 30\nand 40\nand if your i is equal to 4\nand if you read the element is equal to\n50 it will be appended to the sequence\nlist so 10\n20 30\n40\n50.\nnow i is equal to 5 so 5 is less than 5\ncondition fails so finally the elements\nin the list\nsequence is 10 20 30 40 and\n50. so this is one method to read the\nelements from the keyboard at the\nruntime and appending into the list\nthere is another method\nfor reading the elements at the runtime\nso let us see the second thing so hope\nyou understood this simple logic\nso there is another method\nthe second method is split\nso by using this split function\nwe can assign all the elements into the\nlist right so simple thing this is a\nsimple thing\nso sequence\ndot i mean sorry\nsequence is equal to\ninput\ndot\nsplit\nso this is a simple single line\nstatement to read all the elements from\nthe keyboard at the run time so it will\naccept all the elements from the\nkeyboard\nseparated with the space we should not\nuse the comma which you we have to read\nall the elements in a single line\nwith separating with a space so it will\nit will consider the space as in one\nelement in the list so for example\nif you write the i mean if you read the\nnumbers like\n10\nspace 20 space 30 space 40 space 50\nso you should not press enter while\nreading the elements\nright you should not press enter button\nwhile reading the elements we have to\nread all the elements in a single line\nseparated with the spaces\nso this split function\nwill\nremove all the spaces and it will\nconsider it as a multiple elements so\nthis implies sequence is equal to\n10 comma 20 comma 30 comma\n40 comma\n50 so 5 elements will be inserted\nright so this is a single line statement\nused to add all the elements into the\nlist so this is one more way to create a\nlist\nso hope you understood the two ways one\nis for by appending another one is split\nand the third one is the direct\ninitialization by using the assignment\noperator\nright\nso one thing we have to remember in this\nsplit function is we have to read all\nthe elements in a single line separated\nwith the spaces so whenever the space is\noccurred automatically that will be\ntreated as a single element\nright let us stop here in the next\nsession we will see how to access the\nelements from the list\nand how to uh\ni mean\nhow to slice the list that means divide\nthe list how to concatenate the two list\nso what are the different operations\ndone on list and what are the functions\nwhat are the methods available in list\ncreate session\nnow let us see how to access the\nelements into the list\nand how to update the elements into the\nlist\nand how to delete the elements in the\nlist\nright now so first let us create a list\nand then we will go with accessing\nupdation and deletion\nso for creating the list so the concept\nis list\nso for creating the list we can use some\nuh\nsequence name list name\nso i will use a sequence is equal to\nso 10\n20\n30\n40. so this is a numerical list it\ndepends all numerical values so i have\ntaken this list the list name is\nsequence\nnow\nhow to access the list\nhow to access the list elements\nso similar to the array concept every\nelement in the list will have their own\nindex values so here also the index\nstarts from\nzero to n minus\n1\nso first element\nin the list the index is 0\nthe second element\nin the list is 1 and so on the last\nelement\nin the list is n minus 1 if the list\ncontains\nn elements\nso if the list contains n elements the\nfirst element index is 0 so this is the\nindex values\nthe concept is similar to the errors\nwhich you have seen in c language right\nso\nhow to\nrepresent the particular element in the\nlist by using this indexes\nsimply by using sequence\nsquare base\nindex\nso this will give the element which\nresides in the\ngiven index value\nso\nsee\nif you take this example sequence is\nequal to 10 20 30 40\nthen that implies sequence of 0 is equal\nto\n10\nsequence of 1 is equal to 20\nsequence of 2 is equal to 30\nsequence of 3 is equal to 40\nright so this is the\nvalues how we can access the elements in\nthe list\nso if you want to access the fourth\nelement this element\nby using this index value we have to\naccess that\nso if the element is 4 the index value\nwill be 3 because so this is 0 1 2 3 so\nthe index value always starts from zero\nso fourth element will be the index\nvalue three the fifth element will be\nhaving the index value four and the nth\nelement index value is n minus one the\nfirst element index value is zero\nso this is how we can access every\nelement from the given list\nnow how to update the list\nlet us see how to update the list\nupdate the list elements\nupdate the list elements\nmeans either we can delete the elements\nor we can add the elements or we can\nmodify the elements reassign the\nelements right so\nsee we can reassign\nand\nor\ntill it\nand this adding can be done by using\nappend\nappend method so which we have seen in\nthe previous session that is append\nmethod so we have to write a sequence\ndot\nappend\nright element\nso by using this syntax we can add an\nelement to the existing list so where it\nwill be added it will be added at the\nlast position so if the element is 50\nso if the element is equal to 50 need to\nbe added into the list so by writing\nthis command sequence dot\nappend\nof 50\nit will modify the list as\n10 20\n30\n40 and 50 so the last the element will\nbe appended at the last so that's the\nmeaning of this method append append\nmeans the data will be concatenated at\nthe end of the list or a string\nit's a general meaning so similarly here\nalso if you use append method the\nelement will be added at the end of the\nlist\nnext\nreassign reassign means changing the\nvalue at the particular index directly\nwe can you but we can\ndone this by using a simple assignment\noperator so if you use\nsequence of\n1 is equal to\nsorry\n50\nsequence of 1 is equal to 50\nso previously sequence of 1 is having 20\nand after executing this command i mean\nafter executing this instruction\ndirectly\nthe list consists of\nright sequence consists of 10\n50\n30 and 40 so here the 20 is replaced\nwith 50. so previously the first in the\nelement in the index value 1 is 20 and\nnow after executing this instruction\nthat 20 is replaced with value 50.\nso the final\nelements in the list after updating is\n10 50 30 40. so this we call it as a\nreassignment\nright reassignment that that can also be\ncalled as updating the list elements\nright this is the reassignment so by\nusing the index values now coming to the\ndelete so how to delete an element so\nhere there is a command called d e l\nd e l d l command\nso this is used to delete a particular\nelement so we have to mention the index\nvalue of an element which is to be\ndeleted from the list\nso if you want to delete the same thing\nsequence of one\nyou have to write delete\nsequence of\none\nso after executing after executing this\ninstruction automatically the element\nwhich exist and the index value one will\nbe removed from the list\nso there are uh two more built-in\nfunctions remove and pop\nso the those two functions we will\ndiscuss in the next sessions right those\nare built-in methods so we will discuss\nin the built-in methods list built-in\nmethods so\npresent\nthis dl command is used to delete a\nparticular element from the list so we\nhave to mention the index of the element\nwhich is to be deleted from the list so\nhere i am have given sequence of 1 so\nafter executing this one\nthe list elements will be\n10 30 and 40. so before instruction\nsequence is equal to\n10\n20\n30\n40. so index value 0 1 2 3 so i have\ndeleted sequence 1 so first index value\nthis will be removed from the list and\nthe finally the list will be 10 30 40.\nso this is the dl command\nright so these are the simple operations\nwe can\nperform on this list i mean these are\nthe simple things we can perform on the\nlist so creating the list\nright inserting the values into the list\nand then accessing the values\naccessing the elements\nand then\nuh\nupdating the list elements that includes\na reassignment of your elements inside\ninto the list\nadding the elements\nand then deleting the elements from the\nlist\nright so these are the basic things we\ncan perform on list now let us see\nsimple list operations list operations\nso hope you understood these things\nright creation insertion and everything\nright\nso for everything\nthe reference is index value\nfor everything there is an index value i\nmean for everything the reference is\nindex one here also the index value\nalways starts from 0 to n minus 1.\nnow\nsee\none more thing accessing the elements\nlet us see the thing\naccessing\nelements so if the sequence consists of\n10 20 30 40 and a 50. so all these are\nthe five elements so index values are\nfrom\n0 to\n4\nright so\nelements\nrepresentations are from sequence of 0\nto\nsequence of 4\nhow do you understand now\nso if\ni access this one sequence of 1\nwhat is the result the first index so\nhere i am writing the index value 0 1 2\n3 and 4 sequence of 1 it's a 20\nnext if you give a minus value\nif you give the minus value so\nif it is a positive value\nthen the index values are countable from\nleft to right\nright so if it is a positive value the\nindex value is a positive the the index\nvalues are valid from countable from\nleft to right\nand if it is a negative value the index\nvalues will be starting from right to\nleft so the first element\nif it is a negative value the first\nelement is -1 the index value of first\nelement is minus 1 if we consider from\nright to left so here sequence of minus\n1 will return\n50\nso minus 1 means from right negative\nmeans\nnegative index\nmeans\nright to\nleft\npositive index\nmeans\nleft to 2\nright\nso here sequence of minus 1 gives you\n50. now sequence of minus 3\nso\nminus 1 minus 2 minus 3 minus 4 and\nminus 5\nso obviously minus 3 is\n30\nso this is the\nnegative index\nthis one is the\npositive index\nright\nnext we can give\nthe range of index values to be\nrepresented in a separate list\nso if you represent sequence of\none two three\nthat implies\nstarts from one and ends with three so\nindex value from one\nmeans\ntwenty last element is 3 that means 3\nminus 1 so here the elements will be\nfrom\nindex\n1 to\n2\nonly 2 elements so 2 is\n30\nhope you understood next i will show you\none more thing sequence of 1 is to\n4\nthat means index values will be from\n1 to 4 minus 1 3\nso last element minus 1 till the last\nelement minus 1 so this implies this\ngives a result the first element is\n20\n30\nand the third index value is 40. so this\nis the result of this thing\nright so if you specify\nsequence of\nfour only the end index so column is\nfor slicing this is called a slicing\nslicing right this is called a slicing\nso\nthis column represents\nright this column represents\nthe beginning of the element index is\nstarting from zero we are not mentioning\nthe beginning index so always starts\nfrom zero\nhere it is a four so from the starting\nindex we have to consider all the\nelements until it reaches the index four\nminus one that is three so index values\nare from zero to\nthree the index values are 10\n20\n30\nand 40\nright this one will be\ndone similarly sequence of\nsee similarly sequence of\none sorry\ntwo\ncolumn so here\ni am not mentioning the\nlast index so the starting index is 2 so\nthe first element of the resultant list\nwill be\nfrom the element index 2\nand we are not mentioning the last index\nso it will\ncontinue with the end element till the\nend element so last element second\nelement is\n13\n40 and 15\nso this one is the result\nso this column represents the slicing\nright slicing means just a sub list\ncreating a sub list\nso for that we have to use this\ncolumn\nso hope you understood this\nlist updations\nright let's say accessing the elements\nlist updations list reassignment and\ndeletion deletion of the list\nis a sequential data type\nthat means it consists of sequence of\nelements\nso separated with the commas and\nrepresented in a square break braces\nso\nfirst\na list\nwill have some variable name so a is\nequal to in square braces we have to\ngive all the elements separated with\nkava\nso just by typing a is equal to square\nbraces one two three four a list has\nbeen created so if you print just a it\nwill print\nthe\nelements of a list so this is direct\ninitialization\nand\none important thing\nabout this list is that items in a list\nthat means elements in a list need not\nme need not be of the same type so a\nlist can contain multiple elements of\ndifferent type that means\nso a list elements can be\neither numerical that means either both\ninteger or a float as well as strings\nsee i will give you one more example b\nis equal to\n1 comma\na\ncomma\nabc\ncomma\n3.4 so here we have given\nfirst one is an integer\nsecond one is a character third one is a\nstring fourth one is a float so\nit will also accept the elements of\ndifferent type in a list so if you\nprint this list b\nobviously you can get all these elements\nright\nnow\nso as we as in the areas\nconcept here also every list element\nwill be having the index value\nso the index value in a list always\nstarts from 0\nsimilar to the arrays right so in order\nto access the elements of a list we have\nto use\nthe index value\nin square branches so that means the\nvariable name that means a list name\nsquare braces and the index so if i want\nto access see\na is equal to 1 comma 2 comma 3 comma 4\n5 comma 6 so total 6 elements i have\ncreated for a list a so just i am\nprinting the elements\nsee so if i want to\nget the four that means fourth element\nso index always starts from zero the\nfourth element will be index 3\nso i have to print\na of\n3\nso that means a of 3 that is subscript\nso here 3 is an index value\nof the elements in a list a\nso automatically it will return the\nelement which exists at the index value\n3.\nso by using this index values we have to\naccess the elements from the list next\nhow to\nupdate the\nexisting list so if we want to add one\nmore element at the end of the list we\nhad a directly append function so by\nusing append function we can append the\nelement new element into the existing\nlist so the element will be inserted at\nthe end of the list see\nthe syntax is\nlist name dot append\nof particular element\nso for example 8\nso 8 is the element to be appended to\nthe existing list here the list name is\na\nso\n8 is appended so just bring this a you\ncan observe the eight\nright so eight is\nappended at the end of the\nexisting list so this is the updation or\nelse you can uh reassign the values of\nelements in into the list by using the\nindexes so simply i will say\na of\nlet us say\nso 0 1 2\nthe index values 0 1 2 3 4\n5 and 6\nso i want to update the sixth variable i\nmean sixth element of the list\nto seven so i am reassigning the sixth\nelement of existing list to seven\nso\nthat means\nsee now print\nthe list a\nautomatically the sixth element is\nupdated that is from eight to seven so\nthis is another way to update the\nexisting list one way is by appending\nanother one is by using the simple\nassignment operator\nnext\nso how to delete an element from the\nlist\nso we can delete the element from the\nlist\nso for that we can\nuse this dl command\ndl\nyou have to mention the index from where\nthe element to be deleted so for example\na of 6\nso the sixth element\nof the list will be deleted so here the\nsixth element is\nseven so seven will be deleted so d l\nf six\nnow print\na\nso you can get only six elements so last\nelement is deleted now delete\na of\nthree that means fourth element so here\nindex value is three it is nothing but a\nfourth element because index starts from\nzero\nso fourth element what is the fourth\nelement four so four will be deleted now\nnow print a or obviously it will give\none two three five and six\nright\nso\nso hope you understood this simple\noperations\nso how to create a list\nso how to\naccess this list element\nnext how to\ndelete an element from the list how to\ninsert an elements into the list\nnow let us see some of the list\noperations\nso we can find the length of the given\nlist so there is a direct command i mean\nmethod so we can use length of a\nit gives the length of the list a ldn of\na it's a built-in function right\nnext we can add a two list so\nthat means here plus\nsee\nplus is for\nconcatenation\nstart for\nrepetition\nright\nso here two operators will be used in\nthis list so one is concatenation\nrepetition concatenation means adding to\nlist repetition means\nrepeat repeatedly displaying the list so\nlet us see this example\nso just i will create two lists\na is equal to 1 comma 2 comma 3\nsimilarly b is equal to\n1 comma 2 sorry\n4 comma 5 comma 6\nso i can add a 2 list so a\nprint a plus\nb\nso the elements of a list a is one two\nthree elements of a list b is four five\nsix\nso here we are performing the plus that\nmeans the concatenation so all the\nelements of a and all the elements of b\nwill be concatenated and groups a single\nlist so the output will be the list\nconsists of both a and b elements so one\ntwo three four five six\nand here one more operator we have seen\nthat is repetition operator which is\nrepresented as star\nso we can multiply the list with a\nnumerical value so here one thing we\nhave to remember that a tool list that\nthis star operator cannot be performed\non two lists so this star operator can\nbe performed on one list and one\nnumerical value that means just\nmultiplying the list with a numerical\nvalue so we cannot multiply one list\nwith another list just we have to use\none list and one\nvalue integer value so let us see\nprint a\ninto two\nso into two means this the elements of a\nlist a will be repeated two times\nsee one two three one two three so if\nyou print\na\ninto\nsorry\na into\nsome file\nso all the elements of a will be\nrepeated five times\nright so here so that's why this star\noperator is called as repetition\noperator\nsimilarly and we can use the membership\noperator in this list also\nthat means by using a for loop we can\nuse this one\nso generally in general\nwe have seen the syntax of a for loop\nthat\nwe have to use a range function we have\nto give some sequence of values so here\ninstead of using the range function we\ncan directly pass this list as a\nsequence of values\nright\nso now\nlet us see the slicing\nso slicing means\naccessing multiple elements with a give\nwithin the given range of index values\nsee\nslicing means elements with given index\nvalues so that is represented by using\nthe\ncolumn in between the subscript so\nfrom left path is a starting index and\nright part will be the last index\nlet us see that so i will am creating\nthe list with the elements\nright so i have created six elements so\nprint\na\nit gives the six elements\nright first find out the length of this\nelements so six so what is the index\nvalues from 0 to\n5\nnow\nso after by giving the slicing\nright so print\na of\nstarting index one\ntwo\nfour\nstarting index one ending index is four\nso the index the element\nexists at index one is b\nand the element at the index is four\nso four is e\nbut here\nthe\nelements will be printed up to n minus\none that means last index minus one\nright so starting index the element will\nbe printed and from the starting index\nto end index minus one last index minus\none so here we are giving four as the\nlast index so after third index it will\nbe printed see i will show you one more\nthing\nprintf i've been print a of\n1\n5\nso here we can see 0 index values 0 1 2\n3 4 and 5\nnow\nit will it will be printed so\nthe element at the index value is 1 is b\ntwo three and a fourth element is e so\nhere we are mentioning five as the last\nindex but the last index minus one\nelement will be printed here\nright so this is called slicing and\nhere\nif you\nnot mentioning\nanything\nat the place of lost index so here in\nthis example see i have given one as a\nstarting index and it didn't give the\nlast index so it will be printed\nfrom the first element index value 1 to\nend of the elements so all elements will\nbe printed from the index value 1\nbecause we have we have not mentioned\nany last index right similarly the quite\nopposite that is a off we are not\nmentioning here the first index\nand we are mentioning here the last\nindex that means 4 that means third\nindex up to the third index it will be\nprinted\nright 0 1 2 and 3\nso\nthese\nare optional\nright so giving the starting index and\nthe ending index are the optional and if\nyou want to access the last element of\nthe list directly\nwe can access by using minus one so\nalways\nfrom the backward the the index value of\nthe last element will be minus one so f\nis a minus one\nright so from there we can get the next\nelement minus 2\nwill be the e\nright here also incrementing 1 but the\nlast element if you doesn't know the\nlength of the element length of the list\nwe can directly access the last element\nas -1\nright so this is about all uh this\nslicing\nof a list\nso here\nsome built-in functions or methods\nwe can see in the list that is we can\ndirectly find the minimum element\nminimum value and the maximum value by\nusing a direct function right so let us\ntake it a is equal to 1 2 3 4 5 6.\nso print a\nso we can get a six elements so now i\nwant to find the largest element in this\nlist\nso\nmax\nof a\nsimply it will give\nlast largest element in the list\nsimilarly minimum of a it will give\nminimum element of the\nlist\nhope you understood this one simple\nthing\nright\nnext\nso if you want to\ntake an input as a string and convert it\ninto list\nso\nsee\nstring to\nlist so input we are taking the string\nand it must be converted into list so\nfor this we can use a speed command see\nso for this we can use\nsplit\nmethod\nso by using split we can convert the\nstring to list see for reading the input\nwe can write a is equal to\ninput of\nsome anything\nso\nit will give\nhello\nwelcome to\npython\nprogramming\nso\nnow\na is a string\nright\nso how to convert this string to list\nsimply a is equal to\ninput directly it will take input\njust use a split command\nso this split command will divide the\nspace\nas a list see\nnow\nprint a you can get\nall these things so it will consider\nspace as a one element so here we have\ngiven a space after hello so hello will\nbe treated as a one element so as i have\nsaid in the early early beginning of the\nsession\na list can contain a multiple elements a\nsequence of elements of different types\nso it can be either character or a\nnumerical or a string so here the\nelements are in string\nso here also we can access the elements\nby using the index values a of 0\nautomatically\nwe will get the element as hello\nso if you want to print\nf\nto 2\nslicing so that means the first two\nwords hello welcome two elements will be\nprinted here hope you understood this\none\nbuilt-in functions\nlist built-in functions\nfirst\nthere are few functions\nwhich will return a value\nbut doesn't change the list\nso there are few functions which will\nreturn some value\nbut it doesn't change the existing list\nfor example\nlet us consider one list sequence is\nequal to 1 comma 2 comma 3 comma 4 comma\n5\nright\nnow let us see some built-in functions\nwhich will return some value but doesn't\nchange in\nthe existing\nlist first one is count\nso the syntax for discount is\nlistening\ndot\ncount\nright count\nthen\nso this count will return\nthe number of occurrence of this value\nin a given list example here the list\nname is sequence\nso\nsequence dot\ncount\nof\nlet it be four\nso this will return the number of\noccurrences of four\nso this will return\noccurrences of\nfour so how many times four is occurred\nin this sequence only one so that it\nwill return the result as one\nif the sequence consists of 1 comma 2\ncomma 3 comma 1 comma 4 comma 1\ncomma 5\nsee now\nif we apply\nsequence say this one\nlet us take sequence one\nsequence one\ndot count\nof one\nso it will count the number of\noccurrences of one in the given sequence\nright here\nwe are searching for\nthis sequence one we are counting the\noccurrence of the given value in the\nsequence one so here the value is one so\ncount this value of uh one in the\nsequence one so one two three so\nthis will result three\nas a value that means the value one\nis occurred three times in the given\nsequence\nhope you understand this count so this\nwill return some value but it doesn't\nchange the existing list\njust it will return a crop value\nright next\nso this is the first one let us see the\nsecond one\nso second one is\nindex\nindex index of\nvalue\nhere also same\nsyntax is listening\ndot\nindex of value\nso it will return the index of\nthis given value the first\nwhich it appears first in the given\nsequence so let us explain you\nso index of four\nso as we have discussed in the previous\nsession here the index values will\nalways start from zero so this is the\nzeroth index first index second index\nthird index and fourteen\nhere this is first set so 0 1 2\n3 4 5 6 so this is the index of\npositions here in for this list and here\nthis is the index positions for this\nlist\nright\nnow\nwe are we want the index value of 4\nin the list sequence so in the list\nsequence what is the index value of 4 3\nso it will return\n3 as a result so\nit will return\nthe index of\ngiven value\nright the index of a given value\nwhich appears first\nin the list so which appears first in\nthe list so that means if we had a more\nnumber of values same value repeatedly\nthe first\nindex value will be returned here\nsee\nlet us take one more example so that we\nwill understood\nindex value of one\nso sequence one\ndot index of one\nsequence one dot index of one so i'm\ntrying to get the index value of this\none from the sequence i mean from the\nlist sequence one so here in the\nsequence there are three positions one\ntwo three three times one has been\noccurred so what will it return it will\nreturn the index of given value that\nmeans index of y which appears first in\nthe list that means zero so it will\nreturn the index position as zero\nright so it will always\nreturns value which appears first in the\nlist\nso in the previous case\nhere only 1 4 is there 4 is not repeated\nsorry so it will directly return the\nindex of that particular\nvalue\nif it is repeatedly done then it will\nreturn only the first occurrence first\noccurrence\nright\nnow this is about the second one index\nso the third one is slight difference\none more argument will be there value\ncomma start\nthat means we have to specify the\nindex value from where we have to\nfind the index value\ni mean we are giving some range\nso from where we have to consider\nfrom from which index value we have to\nconsider so that is a start\nsee\nand also same\nvalue comma\nstarts\nfor example here let us take 4 comma 1\nso the starting index value is 1 it will\nconsider the starting index value is 1\nand from the index position 1 it will\nfind the index for value 4. from the\nindex value 1 will find the position of\n4 that is 3\nthis is obviously perfect because 4 is\nnot repeated only one value but in this\ncase\nbut in this case in the second case\nnow if i\nput here\nsome 2\nthat means\ni i am supposed to find the index value\nof 1\nbut\ni have to consider the list from the\nindex value 2\nright now i am giving the range so the\nstarting index value is 2 from the\nstarting index value 2 i have to find\nthe index of 1\nso now the list is from 2\nso here from\nthis position\nthe\nsearch will be done from this position\nto this position\nnow sequence one dot index of one it\nwill give the index of one which appears\nfirst so from here what is the first\nposition of one three so it will\nobviously return\ntrip three\nand\nif we mention here four\nthat means range starts from\n4 itself we have to consider from 4\nitself so from 4\nwhat is the index of 1\nfrom 4 what is the index of 1 5\nso\nhere\n5 will be right hand\nright\nso how we understood this simple thing\nthe two variants of index\none is with one argument second one is\nwith value and starting argument\nright next\nso these are the three methods\nwe can see in this\nfirst first category returns value but\ndoesn't change as the list that is\naccount\nindex\nnext\nindex of value comma\nstart\nright\nnext coming to the second category\ncoming to the second category\ndoesn't\nreturn a value\nbut\nchanges the list\nit doesn't return the value but changes\nthe list that means this method will\ndoesn't return any value but the list\nwill be changed\nso in that the first thing which we have\nseen in the previous sessions that is\nappend\nappend of value so\nobviously this append value will append\nthe given value at the end of the list\nso append means\nadding the value at the end\nso\nif we want to add some value in here\nso\nlist name dot\nappend of\n6\nso here the 6 will be appended here so\nif you write if you print that sequence\nobviously it will print 1 comma 2 comma\n3 4\n5 and 6\nright hope you understood this\nthis function doesn't return any value\nbut it changes the list\nright so this is the first thing so it\nis already we have seen in the previous\nthing\nnext similarly extend\nextend\nextend\nsee here extend means we can extend this\nlist means adding multiple values into\nthe given list\nso append will append only one value\ninto the list and this extent will\nis used to append more values at a time\ninto the list so here\nthe list name dot\nx 10\nso here we have to mention the list\nwhich we want to extend\nso\n7 comma 8 comma 9\nso if i execute this one 7 comma 8 comma\n9\nand if you want to if you are trying to\nprint this sequence you can get\nthe values inserted in the\nlist\nso one two three four five six seven\neight and\nnine\nso extend means\nadding multiple elements into the list\nso here also it doesn't return any value\nbut the list will be changed\nnow coming to the third one\nright\ninsert\nso a slight change\nwith this\ninsert function that is\nso by using append function\nwe can add the element at the end of the\nlist right by using\nextend function we can next we can add\nmultiple elements into the list but here\nby using this\ninsert function we can insert the\nelement\nat the particular index value\nso whatever index we want we can add the\nvalue at the particular index see\nso sequence\ndot\ninsert\nof\ngive the index 0 comma\n10.\nso this implies\ni want to insert the element 10 at the\nindex position 0\nin this list of sequence so what are the\nelements in the sequence 1 2 3 4 5 6 7 8\n9\nso here one of the index positions 0 1\ntwo three four\nfive six seven and eight\nright now\nafter executing this command\nsequence dot insert of zero and ten at\nthe at the index zero time should be\ninserted so we will get the result as\n10 comma 1\n2\n3\n4\n5\n6\n7 8 and 9\nso at the position 0\nthe value is inserted and all the\nremaining elements will be moved right\nside\nhope you understood there is a slight\ndifference between the insert extend and\nappend functions\nso append will always\ninsert the element at the end of the\nlist\nso here we can mention the index where\nwe want to add\nor insert the element\nright next\nnext function is remove\nnow how to remove the element from the\nlist\nso sequence\nelement we have i mean list we have 10 1\n2 3 4 5\n6\n7 8 and 9\nnow\nremove\nremove function\nso this remove function\nwill remove the value from the given\nlist\nsee\nsequence dot\nremove\n10\nso this implies\nwe want to remove the value 10\nfrom the list sequence so it will search\nfor the 10 and it will remove it so here\nalso the first appearance of that value\nwill be removed\nright so it will removes\nthe first occurrence\nof the\ngiven a value\nfrom the\nlist\nso remove the first occurrence of the\ngiven value from the list\nso see\nif\nif you execute this statement\nautomatically the result will be\nsequence is equal to 10 will be removed\nso\n1 2 3\n4 5\n6 7 8 and 9.\nnow\nsecond case sequence 1\ndot\nremove\none\nso here in this\nso two examples\nhere we are supposed to remove the value\none from the list sequence one but here\nin the sequence one there are three ones\nright in different positions zero zero\nposition third position fifth position\nbut here we are not mentioning the index\nvalue so\nit will remove the first occurrence of\nthe given value that means directly the\nvalue and the first occurrence i mean\nhere it is in index 0 so obviously after\nthe execution this sequence 1 will be\ntwo three one four one and five the\nfirst sequence of one will be removed\nfrom the\nlist\nright so hope you understood this one\nremove function\nso here also it doesn't return any value\nbut the list will be changed\nnext coming to the next one\nreverse function\nreverse function\nso automatically the values of this\nfunction i mean values of the list given\nlist will be\nprinted in the reverse order i mean\nsaved in the reverse order so let us\ntake an example\nsee let us take a sequence\nsequence dot\nuniverse here there will be no argument\nso just a reverse function will reverse\nall the elements from the in the list so\nif you are trying to print this list\nthen\nthis will return sequence is equal to\n9 comma 8 comma 7 6\n5 4 3 2 1 and 10.\nso automatically the elements of the\nlist will be in a reverse order\nright\nnext this is about the reverse function\nhere also no value is written\nbut\nthe list is changed\nnext\ncoming to the next one that is sort\nsort function\nso here as we know that sort function\nis used to\nsort the given elements in the list\nso if you take a list with another\nelements\nso by using this simple sort function we\ncan sort the all the elements in the\nlist\nsee\nlet us take here\nsort\nhere also we will not take any argument\nfor this sort\nlet us take this one\nsequence one dot\nsort\nso if you try to print the sequence one\nso this will print\nsequence one is equal to so here\none\nand there is there are two more ones so\none comma one comma one\ntwo three four\nand five\nso this will be the result of this sort\nfunction so it will sort in an ascending\norder\nright\nso here also no value is written but the\nlist has been changed\nright third one\nnow the last one is\npop function\nlet us take this pop function\nso this pop function always\nremoves the last element\nit removes the last element from the\nlist\nright so\nhere also we are not giving any\narguments in this function so let us\ntake this one this example\nright so sequence\none dot\nform\nso automatically it will return a value\nwhich element has been deleted\nright\nso this element has been deleted now\nso 5 is the last element so 5 element\nhas been deleted if you try to print\nthis sequence 1\nthis will give sequence 1 is equal to\n1 comma 1 comma 1 2 3 and 4\nbecause phi has been removed from the\nlist\nhope you understood the simple functions\nfirst one is loop i mean list\ncomprehension that means we know that a\nlist is a sequential data structure that\nwill accept a more number of elements of\ndifferent type so these are represented\nby using comma i mean separated by using\ncomma and represented in between square\nbraces\nso this is all about the list now what\nis the list comprehension so in order to\nget the elements into the list either we\nhave to insert use the insert command or\nappend command or extent command\nright so first we have to create an\nempty list and by using the iterative\nstatements we have to fill the elements\ninto the list\nso without that\nhere this list comprehension will create\na subsequence of elements that satisfy\nsome certain condition\nso directly by\nsatisfying the condition itself the\nelements will be inserted into list let\nus take an example so that you\nwill get more clarification\nso if i want to create\na list\nof elements\nwith\nsquares\nright now simply we can write it as\nso create a list square is equal to\nso open here directly we can assign 2\ncomma 4\n9\n16\n25\nright\nnow\nthis can be written in a single\nstatement by taking the values right\nsquare\nis equal to\nopen here\nwrite down the condition here\nexpression\nexpression\nfor\nvariable in\nsequence or\nrange\nright so this is the syntax\nwhile using this list comprehension\ndirectly it will take the values\nfrom the sequence\nand it will\nsatisfy this condition and it will be\nadded into the list so the same thing we\ncan write it as square\nis equal to so we need to square the\nelements every element so i into\n2 so as we know this double star is\nequal to is exponential right so this is\nnothing but i square\nfor\ni\nsorry\nfor i in range\ni in range sorry this is not a 2 this is\na 1 ok\nright so we are specifying from 1 so\n1 comma\n25 to\n6\nright so as you know here the range\nfunction will take consider the starting\nelement and end element minus one\nso this loop will be iterated from one\nto five\nso this will result as\nsquare is equal to\nfirst\ni is equal to 1 so 1 is power 2 1\ncomma\nnext second iteration 2 to power 2 it's\na 4\ncomma\nnext third iteration 3\n3 square it's 9\nnext 4 square which is 16\n5 square it's a 25\nright so this will directly give this\noutput\nso like this also we can create a list\nso in the previous sessions we have seen\nhow to create mains by using either\nappend function or insert function or\nextend function so append function will\nalways append the element at the end of\nthe list insert function will insert the\nelement at the particular index value\nand coming to this extent the elements\nwill be extended at the end of the\nso that means we can append more number\nof elements at a time\nso the another way is\nby applying some expression so\nevery\nvariable value within the range will\nsatisfy this\nsequence i mean this expression and it\nwill be inserted into the list\nhope you understood this right\nthen\nnext one is looping in list\nlooping so how to use the looping in\nlist\nso i will show the implementation part\nso that\nyour doubts will be clarified\nnext one is looping\nlooping in list\nso so far we have used only range\nfunction\nin the loop index so that means\nfor\ni in\nrange\nso we have to mention the last index so\nhere we have to generally we have we\nhave to give three indexes one is the\nstarting index the ending index and the\nstep size so if you are not mentioning\nanything for example it will be\nlike\nn\nn\nso\nthe index values will be ranges from\n0 to\nn minus 1\nright so if you print here\nprint i\nautomatically that will be 0 1 2 3 and\nso on n minus 1\nso here\nthis is not a mandatory to use only the\nrange function we may also use the list\nso that means here we have to use a\nsequence of elements so\nin this we have to use\nsequence of\nelements\nso this sequence of elements may be\nby using the range\nlist\nor\ntuple\nor a dictionary anything itself so it\nmust be a sequence of elements so so far\ntill now we are using only the range\nfunction and now we can use or we can\nreplace this range with list\nso i will show you that\nfor example list is equal to\nsome 2\nlet us take odd numbers 1 3\n5\n7\n9\nright 1 3\n5 7 and\n9\nnow\nfor\ni in\nlist\ni in list\nprint i\nthis will give the output as 1 3\n5 7 and 9\nhope you understood this\nright so for i in list print i it will\ngive now here i is not an index value i\nis an element in the list\nright i in\nlist so it will give\nthe same sequence\nhere i is not an index i is an element\nin the list\nhope you understood this one\nright now let us combine these two\nconcepts list comprehension and looping\nin list in one example\nlet us see the\none expression\nso if you want to pay\nan elements\nwhere x is not equal to y\nso for example\nlist 1 is equal to\nlet us take the odd numbers 1 3\n5 7\nlist 2 is equal to\n2\n4\n6\n8\nfor elements\nnow i want to pair the elements that\nmeans\none comma two so that i i have to pay\nthe elements such that x must not be\nequal to y\nthree comma\nfour 5 comma 6\n7 comma 8\nso i have to get the output like this so\nfor this we can use both the concepts\nlist comprehension and\nlooping in list\nsee so pain\nis equal to\nwrite on the page x comma y so we have\nto print this\nthen\nfor\nx in list one\nso this one is this one\nsimilarly\nfor\ny in\nlist two\nthis one\nif\nx naught equal to 1\nhere we have to write the condition\nso that means form a pair x comma y\nconsider x from list 1 y from list to 2\nand\nfrom the pair only if x not equal to y\nso this small statement\nwill give the result as this one 1 comma\n2\n3 comma 4\n5 comma 6\nseven comma eight\nso that means i just want to say that\nhere\nwe can use the list in\nlooping also\nso till now we have we are we are using\nonly the range function so here the\nrange is is nothing but the example of\nsequence of elements\nso we have to replace that range with\nsequence of elements that means\nsequential data structure that may be\neither list tuple or a dictionary so\nanything we can take it\nright so this is all about the list\ncomprehension and looping in list so if\nyou are not mentioning here\nin the\nhere we are not mentioning any list we\nif you are mentioning the range it will\nbe the index value\nright the sequential elements\nand if you are mentioning here the list\ndirectly this represents the elements in\nthe list element in the list\nso hope you understood this one so let\nus see the\nimplementation of this list home\nprojection and\nlooping in list\nhello friends uh now let us see the\nimplementation of list comprehension and\nthe looping of list so hope you\nunderstood somewhat\nwhile explaining on the board so let us\nsee the implementation part right now\nso as we have discussed that the\nlist comprehension means\na list containing the elements which\nsatisfies the given condition so\nnormally the list can contain the\nelements by initializing the elements\nwith a normal initialization\nby using\ni mean separated by commas elements\nseparated by comma\nand represented in between the square\nbraces right so print\nlist\nso if i want to\ncreate a list with only the square of\nelements\nwell we can write in a single statement\nthat\nsquare\nis equal to\ni\ninto into 2\nso here double star represents the\nexponent operator for i in\nrange so 10.\nso here the range will be from 0 to 9 so\nthe square will be consists of elements\nwith a square from 0 to 9.\nnow if you print this\nsquare we can get that\nall the elements\nwith the\nsquares sorry sir\nspell check\nso 0 1 2 square 4 3 square 9\n4 square 16 phi square 25 6 square 36\n7 square 49 8 square 64 and 9 square 81\nso here we are mentioning the\nrange 10 here there is no only one\nargument is there that will be treated\nas a last index so the elements will be\nfrom 0 to n minus 1.\nso if you mention there some\nany other range it will be considered\nlike that so let us take this\nsquare is equal to\ni\nexponent 2\nfor i in range\nfrom 4 to 10\nright so the elements will be\nfrom\n4 itself\nsee\n16 25 26 49 64 and 81\nso like this we can get the elements\ninto the list with a\ni mean following\nthe particular condition satisfying\nparticular condition\nnext looping in list\nso\nlist is equal to\nsome 10 20\n30\n40\n50.\nnow\nfor\ni in list\nprint i\nso it will give the elements in the\nlist see 10 20 30 40 and 50.\nso previously we are giving just\na range function which gives the values\nrange\nsome 10\nprint i it will give the values from 0\nto n minus 1 but here we are replacing\nthe range with a list with some elements\nright\nin list\nprint i it will give\nthe elements in the list\nnow\nlet us combine both this list\ncomprehension and\nlooping in list so we have seen in the\nexplanation\nso now we will see the implementation so\ni want to pair the elements such that\nthe tool list from the tool list\nwhere x is not equal to y satisfying the\ncondition x is not equal to y\nso\nlet us take\nodd list\nis equal to 1 comma 3 comma 5 comma 7\neven list is equal to\n2 comma 4 comma 6 comma 8\nso if you want to\npaste the elements from odd list and\neven list such that\nthe odd list is not equal to even list\nnow let us take that\ntail is equal to\nso pay the elements x comma y\nthen\nfor x in\nodd\nnext for y in even\nif x not equal to 1\nso all the elements will be paid and it\nwill be\nin pay now print the page so that we can\nget all the elements\nwith not equal to\nx not equal to y so we can see 1 2 1 4 1\n6 1 8\ntwo three four three six three eight\nfive two five four five six five eight\nseven four seven seven two seven four\nseven six and seven eight all the\npossible pace will be\ndirectly we can get it into the list so\nlike this we can\ncombine the list comprehension and the\nlooping in list and we can simplify our\ncomplex projects\nso hope you understood this one\nso here the concept of tuples is almost\nsimilar to the list concept so the\ndefinition is also same\nbut there will be a slight difference\nso as we have seen in the list here the\ntuple was also defined as the collection\nof multiple elements of different types\nso this will also\naccept a multiple elements of different\ntype\nso what is the main difference between\nthe list and\nso the elements of a list are\nmutable\nelements of tuple are\nimmutable\nso this is the major difference between\nthe list and tuple\nso here the mutable means\nchange\ncan change\nimmutable means\ncurrent\nchange so\nwhatever the elements available in the\nlist can be changed\nand whatever the elements available in\ntuple cannot be changed\nand here in the list all the elements\nwill be represented by a sequential\nelements separated with the comma\nin between square braces so within the\nsquare braces\nright so here also tuple also it\ncontains multiple elements separated\nwith a comma and represented in\nparenthesis\nturns this right so\nhere\none comma two comma three\nthis is called a tuple because all the\nelements are enclosed in between the\nsquare braces\none comma two comma three\nthis is called\na solid this is called a list\nand this is called a tuple\nthis is called a triple because multiple\nelements separated with the comma and\nenclosed in parentheses this is one one\nthing and these statements can be\nchanged that means these elements can be\nchanged these elements cannot be changed\nthat's the only difference\nsee\nso that means a simple thing change\nmeans we can add more number of elements\ninto a list\nby using some append method\nso here's in different methods happen\ninsert\nand extend\nso by using all these three methods we\ncan add more number of elements into the\nexisting list whereas this cannot be\ndone on tuples we cannot update the\nelements of a tuple so we can\ninstead of updating the same tuple we\ncan assign these elements along with\nsome more elements into another tuple\nso the same tuple will not be changed\nsimilar to our constants\nright so here we cannot change the\nelements of a same tuple but we can\nassign these elements with some other\nelements into another tuple\nso we will see one example so that your\ndoubts will be clarified right so\nso this is the major\ndifference between a listen to\nmutable and immutable\nsee\nhope you understood this basically\nnow\nlet us see how to create a tuple\nfirst\nlet us see\ncreation of a tuple\nright then so here there is no\nquestion of adding more elements so\nthere will be no append method insert\nmethod or any other extend method so\njust we see how to update the elements\nof a tuple\nhow to remove the elements of it too\nright\nnext\nslicing\nthat means\naccessing\nelements\nso these concepts will cover in this\nsession it's a very small concept simple\nconcept first we have to create a tuple\nthen we have to update the tuple and\nthen we have to remove the tuple and how\nto access the elements of a tool\nsee\nlet us start with the creation of a tool\nsimilar to our list here also we have to\nconsider a variable name\nor we can simply say is that a triple\nname\nokay anything is same\nvariable name\nor triple name is equal to\nopen the variances\nwrite on the elements\nclose the balances so this is the syntax\nfor creating the\ntuple\nexample i am taking a as a tuple a is\nequal to one two\nthree\nfour\nfive so this is called a tuple with five\nelements\nto fill with five elements so similar to\nour list here also a tuple is also\nconsists of index values and always the\nindex value starts from 0\nso this is the index\n0 1 2 3 and 4.\nso everything is common in between the\nlist\nand if\nwe assign these elements to the\nparticular tuple\nwe cannot update this tuple\nright\nwe cannot add more elements into the\nsame tuple\nright see\nso this is the\ncreation of a tuple\nnext here one more thing we have to\nremember is how to create an empty tuple\nso\na is equal to empty parenthesis\nthis implies the creation of a\nempty\ntriple\nnext\na is equal to 1\nso this is not\na valid because i mean here 1 is not in\nit 2\nif you write this statement it will\nconsider 1 as an integer and a as an\ninteger\nso here a is not a tuple in this session\na\nis not a\ntuple so the interpreter will treat a as\nan integer\nso by observing we can see that\na is a tuple with only one element but\nthe interpreter doesn't know it has a\none element it will consider it as a\ninteger value so a will not be\nconsidered as a tuple rather it will\nconsider it as an integer so how to\ncreate a tuple with one element so just\nwriting one comma\nthe first element comma so we have to\ninclude\ncomma so so that the interpreter will\nknow that a is a tuple consists of only\none element\nso in the absence of one\nthe interpreter will treat a as an\ninteger right\nokay\nso\none more thing\ndirectly\nby writing a is equal to one comma two\ncomma three\nso this is also it will consider\nresented tuple so we can avoid these\nparenthesis by assigning the values to a\ntuple so here also if you print a\nit will print 1 comma 2 comma 3 so that\nmeans it will consider it as a tuple\nso assigning multiple values to the same\nvariable name\nwill also consider as a tuple\nso if you use this parenthesis\nautomatically it will consider as a\ntuple if you are not using this\nparenthesis and i want to apply more\nnumber of elements to ascending more\nnumber of elements to one variable that\nvariable will all automatically it will\nbe treated as a triple\nso this is an empty tuple and this is\nthe\ntuple with\nsingle element\nso if you insert this one and if you\nwrite type\na automatically we can get a as\nin\nif you use this type a here we can get\nyes\nright so hope you understood the simple\nthing so how to create a tuple how to\ncreate an empty tubule and how to create\na tuple with only one element\nright\nright then next moving on to the\nnext one that is updating a tuple so how\nto update a tuple so as we have\ndiscussed in the previous\ni mean just now we have discussed that\nthe triple elements are\nimmutable that means we can't change the\nelements of a tuple that means not\nchange means we cannot add even add the\nelements into it\nalready existing tuple\nsee\nupdating\na tuple\nso here the meaning of update means we\ncannot update the elements which are\nexisting in the same tuple\nbut we can use the elements or we can\nassign the elements with some media some\nmore additional elements and it can be\nassigned to another tuple that we can\ncall it as an updation see\nfor example a is equal to\n1 2 3 and 4\nb is equal to\n5 6 7 and 8\nso we can't add\nmore number of elements into an existing\nlist right so in both cases we can add\nmore\nother number of elements into a or more\nnumber of elements to b but we can\nupdate these elements and ascend to the\nanother triple that is c\nc is equal to a plus b\nright if you print c c will be having 1\ncomma 2 3\n4\n5 6 7 and 8\nso this we can say that it has an\nupdation because that means if you want\nto add more number of elements to an\nexisting list we have to use this\nconcatenation operator so by using this\nconcatenation operator only we can add a\nmore number of elements and we cannot\nupgrade the same tuple so that we have\nto ascend one more tuple\nso here a cannot be changed and b cannot\nbe changed so we are\nupdating these two\nby assigning the values of these two\ninto third tuple that is c\nso in this tuple's concept this we call\nit as an updating of a tuple\nso in in order to update any tuple we\nneed to ascend that into another tuple\nwith some additional elements\nso we understood it\nright next\nnext\ndeletion of a tuple deleting an elements\nfrom a tuple\nso as i have said that the elements of a\ntuple are immutable so that we cannot\ndelete an individual elements of a tuple\nsee\nso in the list we have seen dl statement\nin order to delete an element or a\nremove statement remove method in order\nto delete an element or a part\nright so these three we have seen\nto delete the elements from the list\nwhereas\nthese three cannot be used in\ntuples\nthat means we can't delete an elements\nfrom the\nsee\nexample a is equal to\n1 2 3 4 and 5\nso if you\nuse a of 1\nf1\nso this is a wrong statement that means\nwe can't delete the element of a tuple\nfor example\nif you use\ndelete of a\nthis is the light so it will delete\nentire triple\nentire tuple so\nwe can't delete the individual elements\nof a tuple but we can delete the\ncomplete tuple at a time\nso by using the same method d e l\nso d l a it will it will delete\nthe tuple e\nwhereas a of 1 it will not delete this\nway\nit will not delete the individual\nelements\nright so\nnext\naccessing the elements of a tuple\naccessing the elements of it to pull\nso as i have said that the tuple\nconsists of\nsee 10\n20\n30\n40\n50\n60\n70.\nso there are different elements of a\ntuple so here\nthe\nnumber of elements separated with the\ncomma represented in paralysis so this\nis a tuple a is a 2\nso if i want to access the elements of a\ntuple\nthis can be done only by slicing\nso this concept also we have seen in the\nlist slicing\nso slicing means\ngiving the\nindex value index range\nindex range so by using this index range\nthen only we can\naccess the elements see so this is the\nindexes 0\n1\n2\n3 4\n5 6 so this is these are the\nindex\nright so\nif it is a list a is equal to one comma\ntwo comma three comma four\nobviously by using a of zero we will get\none\na of 0 it will be 1 and a of 1 it will\nbe 2\nsimilarly here also\ntriple of\na is a triple n so a of 0 this is an\ninvalid so it will not return the\nelement which present at the index value\nzero\nso in order to access the elements we\nhave to use this slicing so slice\noperator is represented as square places\nwith\ncolumn\nsquare braces with column\nso by using this representation we can\naccess the elements of a tuple\nc\nthat means if i want to access\nfirst four elements so i have to write\nit as a of\na of\nhere a is a triple\nsee first of four elements\nfirst of four elements means the index\nstarts from 0\nand the last index is 3\nso\nfor a of 0 4 it will return\nthe elements 20 10 20 30 and\n40\nso the starting index it will be printed\nand the n minus one will be printed till\nthe n minus one so here we have\nmentioning four as the last index so\nfour minus one three index up to three\nindex it will be printed\nsimilarly a\ncolon\nfive\nso here we are not mentioning here the\nstarting index so by default it will be\nconsidered as a 0 from 0 so it will\nreturn 10\n20 30\n45\nthe index value is 5 5 means 5 minus 1\nso up to four it will be printed fourth\npin\n58 will be printed similarly\na of\nsome\nthree\ncolumn\nso that means the starting index is\nthree so what is the element at the\nindex 3 40 so it will start printing\nfrom 40 and we are not mentioning here\nthe end index so it will be\nkind of printing continuously until the\nlast element of the tuple appears so 40\n60 and the 17 so this is the slicing\nfrom the\nfirst element to the last element so if\nyou want to access directly the last\nelement the last element index value\nwill always be minus 1 minus 2 and so on\nso obviously we can use this minus 1 in\nthe slicing operation so to access the\nlast statement\nright so finally\nin order to access the elements of a\ntuple\nthis can be done by means of slicing\noperator slice operator\nright so hope you understood the simple\nthings so how to create a tuple how to\nupdate the tuple and how to\ndelete the tuple\nand how to access the elements of a\ntuple\nso tuple's concept in that\nbasic operations\nso first one is\nlength\nfinding the length of a tuple\nconcatenation\nthe second one\nthird one repetition\nnext membership operator\niterative statements\nmaximum element\nminimum element\nfinding the index\nfinding the number of occurrences\nconversion two\ntwo so\nso these are the basic operations we\nhave to see\nin\ntuples so let us see one by one so first\none is length so by using this one we\ncan find the length of the tuple that\nmeans how many elements are there in the\ntwo\nand the concatenation we know and this\nconcatenation is denoted by using the\nplus operator\nso it will concatenate the two tuples\nand forms the another two\nnext repetition we call it as\nthe repetition operator star so that\nmeans the number of times the same tuple\nwill be repeated and the next membership\noperator so here the membership operator\nin or\nnot in\nso this is the membership operator\nnext iterative statements so instead of\nusing the range function we can use the\nthis tuples in\nit reduce statements right so\nnext maximum so this is used to find the\nmaximum element\nand next minimum so this is used to find\nthe minimum element of a list\nnext index so this is used to find the\nindex of a particular element\nnext count\nso it will count the number of times the\nparticular element occurs\nand the next the last one is conversion\nto tuple so we can convert directly a\nstring into a tuple or any list into a\ntuple right so for this\nwe can use a length command\nright so\njust we have seen in the\nlist right length of\ntriple\nit will give the length of it\nsee\nfor example a is equal to\n10\n20\n30\n40\nb is equal to\n50 60\n70 80\nright\nsee\nlength of a tuple so that means\nlength of\na\nngn of a\nso this will returns that length of a\nthat means\n4\nfor the length of a\nnext concatenation operator so\nconcatenation operator means a plus b\nso a plus b means it will combine both\nthe a plus b so it will give\nthe result as 10 20\n13\n40\n50 60 70 and 80\nright next repetition operator so\na star 2\nthat means all the elements of a will be\nrepeated twice\nthis gives 10 20 30\n40\nagain 10 20\n35\nso all the elements will be repeated\ntwice so if here\nif you give a star 4 all the elements\nwill be repeated 4 times so that means\nthis repetition can be done on between\nonly the tuple and integer so\nthis cannot be done in between two\ntuples\nright compulsory this must be done by\nusing an integer and here the\nconcatenation must be done only in\nbetween two tuples so this this cannot\nbe done in between the\ntuple end and integer value so that\nmeans a plus 2 this is not an invalid\nright similarly a star b this is an\ninvalid\nso\nin between two tuples only we can\nperform the concatenation in between one\ntuple and integer only we can perform\nthe repetition next membership\nmembership means so we can directly uh\nverify whether the element is in the\ntuple or mark for example 10\nin\na\nit will return either true or false\nright so this is a boolean it will\nreturn true or false so it will return\ntrue if the element is\nexisted in the given\ntuple\nif the element is not existing in the\ngiven tuple it will return false so here\n10 in a it will return\ntrue because already the element is\nexisted in a\niterative statements so in order to i\nmean by replacing the range function we\ncan use this tuples so here in the for\nloop we have to use the sequential\nelements so that sequential elements can\nbe either range function or a tuple\nsee\nfor\nright here it is a variable right\nfor element in a print\nsorry\nelement\nso every element of a will be printed\nhere 10\n20\n30 and a 40\nevery element will be printed so we can\nreplace the range function\nby this sequence that is trouble\nso it can also be replaced with list\nalso right right so in the iterative\nstatements in the first statement for\nloop we have to give a sequential\nelements so that can be either range or\nlist or a tuple\nnext maximum\nso directly\nmax of a\nit will return the maximum elements\ni mean maximum element present in a that\nmeans here c what is the maximum element\n40 so it will return 40\nright maximum of a similarly\nminimum of a\nso it will return the minimum element of\na so what's the minimum element of a 10\nso it will return\nnext index\nindex\na dot\nindex of\n10 a dot index of 10 so here we have to\npass element as an argument so it will\nsearch the index value of this\nparticular element in the tuple a\nso you have a dot index of 10 it will\nreturn the index value of 10 what's the\nindex value of 10 0\nif it is 4\nautomatically it will return the index\nvalue as 0 1 2 3 it will return 3 as the\nindex value\nnext count\nsimilarly\na dot\ncount of\n20\nright so if this a\nlist consists of\nthese elements 10 20 30 40 20 now a dot\ncount of 20\nit will give the number of times the\nelement occurs in the a so how many\ntimes 20 is repeated one and two so it\nwill return\ntwo\nif it is ten\nhow many times ten is repeated only one\ntime so it will return\none so it will return the number of\ntimes the particular element\nrepeated in particular tuple\nnext conversion of\na string or list into a tuple see for\nexample\ndirectly for this we have to use a tuple\nmethod tuple method right so here we can\nwrite\ntuple of\nhello\nit will give\nh\ne\nl\nl\no\ndirectly a string can be converted into\na tubule\nso here triple of hello we directly use\nthe tuple with\nfive elements h-e-l-l-o\nall these other individual elements so\nit will convert the string into\nindividual elements\nnext similarly we can convert this tuple\ni mean list into a tuple\nfor example\nsome list is equal to\n1 2 3 and 4\nthis is equal to 1 2 3 and 4\nright now if you write triple of\nlist\ntuple of list it will give it will\ndirectly convert this\nlist into so it will give\n1 2 3 and 4. so the only difference is\nhere it is a list here it is a tuple\nbecause here we are representing in\nsquare braces here we are representing\nin parenthesis\nso this tuple method will directly\nconvert either string or list into a\ntuple\nright so here we can extend the elements\nof the list here we cannot extend the\nelements of a tuple\nright hope we understood these basic\noperations performed on triples so\nlength concatenation repetition\nmembership iterative statements minimum\nmaximum\nindex count and the conversion of\nconversion to triple\nright so the only one thing one major\ndifference between the list and the\ntuple is\nsorry\nso the elements of a list are mutable\nand the elements of tuple are immutable\nso that means the elements of a list can\nbe changed elements of tuple cannot be\nchanged we can delete the elements of a\nlist we cannot delete the elements of a\ntuple we can access the individual\nelements by\nby using indexes here we cannot access\nthe individual elements by using the\nsimple indexes here in this tuple we can\naccess the elements by using the slicing\noperator\nright\nso hope you understood this tuple's\nconcept\nfirst one what is my best string so his\nstring can is known as a group of\ncharacters so here a string can be a\nsingle word or a group of characters\nthat is a line of different words right\nso now\nthis string is represented by using\neither single quotes\ndouble quotes or\ntriple course\nin python programming right\nso usually this triple quotes we call it\nas a comment section\nit's a group of paragraph it's called as\ncommand and we can use these two\nfor representing a string\nright so in c language\nthis is this is represented for\na single character\nthis is represented for\nstring\nbut here in python we can use as single\nquotes or double quotes to represent the\nstrings right\nnow\nfirst of all\nlet us see how to initialize the string\nso here string is also a sequence of\nelements\nso as we know that the sequence of\nelements consists of so far we have seen\nthe list\nso this means multiple elements\nof same\ni mean of different type\nof different\nhere the string is also\nset\nright so this is the first one this is\nthe second one string is also same but\nwhat is the difference between the list\nand string\nso\nlist\nthese elements are\nmutable and these elements are\nimmutable\nso mutable means\nthe elements can be changed\nimmutable means elements cannot change\nso we cannot change the elements of the\nstring\nright so i will give you an example so\nthat you uh it will be clarified this\npoint will decline\nsee\nso as we know\na list\ncan be initialized directly like 1 comma\n2 comma 3 comma 4\nnow if you want to update this list one\nthing is\nlist of\n1\nis equal to 10\nso after executing this this 10 element\nwill be inserted at the index value 1 so\nif you print this list\nwe can get it as 1 comma 10 comma 3\ncomma 4 so that means element of the\nlist the second one i mean the element\nat the index one\nin the list can be changed\nwith the\nnew one\nand if you consider the string\nstr is equal to\nhello\nso if you want to update this one st of\n2 is equal to\nsome yes\nthis cannot be done because we cannot\nchange the elements of a string\nwe cannot change the elements of a\nright so that's why we call this string\nas\nimmutable elements\nstring consists of immutable elements\nlist consists of mutable elements\nso hope you understood so we cannot\nupdate or change the elements of a\nstring\nwe can update or change the elements of\na list so that's the difference between\nimmutable and notable now let us see the\ninitialization of a stream\nso directly this\ninitialization\nso first one is directly write the\nstring name\nis equal to\nuse a double quotes or a single course\nso it can be a line of statements right\nit is not restricted to a single word it\ncan be a line of data\nso\nthis is a simple initialization of a\nstring by using this assignment operator\nso here also\nthere will be an index values so always\nthe index starts from 0 here also the\nindex will start from\n0\nto\nn minus 1\nwhere\nn is a\nlength of\nstring\nand it's the length of the string the\nindex value is 0 to n minus 1 so if you\nwant to represent a particular element\nat the particular index so we can write\nit as\nstring of\nindex value\nin the subscript we have to mention the\nindex value so that it will return the\nelement or a character which present at\nthe index value so this position can be\nindex or\nany mathematical expression\nso we can\nmake represent this index as a\nmathematical expression too\nright i will give you an example so if\nstring\nis equal to\nhell\nso this represents\nstring of\n0 is equal to h\n1 is equal to e\n2 is equal to l\n3 is equal to l\nstring of 4 is equal to o\nright\nhope you understood similarly\neverything is same which we have seen in\nthe list concept so always the last\nelement index value will be\nminus 1\nindex of\nlast element this is also similar to our\nlist right so if you want to if you are\nimplementing this string of minus 1\nit will return\nmore\nright so\nhere\ninstead of using this one\nwe can use the mathematical expression\nstring of\nso let it be i is equal to 1\ni into 2\nright so this will return\nstring of\n1 into 2 that is 2 and it will return\nstring of 2 that is l\nif i is equal to 2 string of 2 into 2 it\nwill be 4 and it will be written\nso that means the index can be a normal\nindex a normal integer value or it can\nbe a mathematical expression which\nreturns only the integer because the\nindex will not have any floating point\nvalues\nso index will always be integers so it\nmust represent only the integer value\nright so this is our string concept so\nhere the string is equal to welcome to\npython program now the index values will\nbe starting from here 0 1 2 3 4 5 6\nand 7 the space is also considered as a\ncharacter space is also considered as a\ncharacter 7 8 9\n10 again the space 11 12 13 14 15 16\nspace 17 18 19 20 21 22 23 24 25\n26\n27\n28\nso the length of the string is\nright the length of the string is\n29\nand the index is from 0 to 28\nso here the string need not be\nrestricted to a single word it can be a\nline of sentence so that can be\nvisualized by using a simple\nassignment operator or we can use the\ninput function\nto read the string at the runtime\nso\nname is equal to\ninput\nso as we have seen earlier in the\nearlier sessions this input function is\nused to read the input from the keyboard\nat the runtime so by default this input\nfunction will read only the integer\nright so\nit will always read the integer\nsorry that by default this input\nfunction will always read the string so\nthat string will be assigned to name\nright\nso if you use this one the name the\nstring will be assigned to the name\nnow\nlet us see\nthe operations\nso as we have seen in this\nlist we can use the concatenation\nright\nand\nrepetition\nso this concatenation is represented as\nplus repetition is represented as star\nso concatenation is represented as\nplus and repetition is represented as\nstar coming to this concatenation we can\nconcatenate two different strings\nright\nso let us take\nstr1\nis equal to\nhello\nstr2 is equal to\nitem\nright so if you concatenate these two\nwe can write\nprint str1\nplus str2\nso automatically it will concatenate\nthese two and it will return\nhello python\nright\nnext\nthis repetition this reputation\nautomatically we know this repetition\nthat means a star as a repetition\noperator that means we can multiply the\nstring with any integer value\nso here there is there are two\nconstraints\ny concatenation\nso not possible with a concatenating\nstring\nplus\ninteger so this is not\nperformed\nso we cannot do this\nso we cannot concatenate a string with\nany integer so only the concatenation\ncan be done between\ntwo strings\nhere the repetition can be cannot be\ndone with two strings\nhere the string\ninto\ninteger this can be done\nso hope you understood this one\nright so two cases string plus in\nstimulus thing so string plus string\nmeans this concatenation operator can be\nperformed only in between two strings\nand this concatenation operator cannot\nbe done in between the string and\ninteger\nsimilarly the repetition can be done\nonly in between string and integer it\ncannot be performed in between two\nstrings\nso\nif you write here print\nstr1\ninto three\nthis will return hello\nhello\nhello\nthat means the string will be repeated\nthe number of times i mean the integer\nwhich represents in the repetition\noperator\nhope you understood this one\nright so these are the main constraints\nright\nso if you use the split function so in\nthe previous sessions i have\ngiven you the example of split\nso split is used to create a list\nin which the elements are represented in\na single line separated by a space\nright so let us\ngive an example for that split and we\nwill stop here\nsome str is equal to\nwelcome to\npython right so if you\nuse this split function\nit will creates a list\nwith elements\nof given string\nseparated\nby\nspace that implies\na list will be created\nnow\nwelcome will be the first element\ncommon\ntwo will be the second element comma\npython will be the third element\nright so it will treat this space as a\ndifference of two elements\nseparation of two elements\nright so\nit will creates a list with string\nelements\nhope you understood this one split\nfunction\nright so let us see the\nimplementation part of this thing so\nthat\nyour notes will be clarified\nhi friends now let us see the strings\nconcept\nso\nhope you understood the strings concept\nexplaining in the board so let us do the\nimplementation part\nso string\nis equal to so string initialization can\nbe directly by using the\nassignment operator so welcome to\npython programming\nso directly this line of code i mean\nlines of string is assigned to a string\nso any text is represented as string\nonly when it is enclosed in between the\nsingle quotes or a double quotes\nor a triple quotes\nnow if you print the string\nwe can get the direct string so\nhow to read the string at the runtime\nso by using the input function so as we\nknow that input function is used to\nread the string at the runtime from the\nkeyboard\nright so by default the inputs input\nfunction will read only the string so if\nyou want to convert into the input\ninteger we have to use the type casting\nso as now we have to read the string\ndirectly we can read the string by using\nthis input function so directly call the\ninput function\nwrite down the\nstring\nright\nlet us\nprint the string so obviously it will be\nlike this\nnow\nhere also there will be an index values\nso if you want to\nget the index positions i mean the\nelements in the index values we have to\nuse these index values in the subscripts\nsee let us take that here also the index\nvalue starts from 0 str of 0\ndirectly it will print only the first\ncharacter that means the character which\npresents at the\n0th index\nnow\nprint str of\n2.\nso l\nprint\nstr of\n3 4 5 6 7.\nso here the 7 is a space because let us\nsee this is a 0th index 1 2 3 4 5 6 and\nnow here seven here the space will also\nconsider as a character\nso this the element which present at the\nindex seven is space so it all it prints\nthe space\nnow\nthe last element will always will be the\nindex value minus 1 as we have discussed\nin the list\nright\ng\nright so we can also perform the\nslicing that means we can give the index\npositions so\nstarting from\n0 to\n9 we can print the elements\nwelcome t\nprint str so we can mention here\n1\n2 10 sorry\nsome 15\nto\nend\nso the index values must be\nrepresented in between the subscript\nright o and space programming i mean the\nindex value\nthe character or the element which\npresents at the index value 15 is o so\nfrom there it will be printed till the\nend\nand we can use the\nif you want to print this string by\nusing the interactive statement see\nlet us initialize a single word so that\nyou will be\nunderstood string is equal to welcome\nso for\ni in range\n10\nsorry\ni n str\nso we can as as i have said in the\nprevious sessions here we can replace\nthe string with i mean range with\nsome sequential sequential data\nstructures\nin the iterative statements right so\nhere i am replacing the range with str\nprint i\nit will print directly\nw e l c o m and e\nright now\nif you want to print with an index\nvalues\nfor i\nin\nrange we don't know the index last index\nso we can directly use the length\nfunction\nstr\nlength of str\nprint if you print i it will give only\nthe index positions str of i if you\nprint this str of i you will get the\nvalues\nright see slight change\ni in range\nlength of\nstr\nprint\ni\ncomma\nstr of i so it will print both the index\nposition and the\nparticular element at that index\nposition\nso hope you understood now\nhow to use this iterative statements\nright\nnow we can use the both the\nconcatenation operator and\nstar operator as we have discussed that\nduring the concatenation that can be\nperformed only in between two strings\nand the concatenation cannot be done in\nbetween string and integer so\nstr1 is equal to\nhello\nstr2 is equal to\npython\nso concatenate the string\nstr1\nplus stf2\nhello python\nnow let us try with one string\nwith integer\nright so you can see the error can only\nconcatenate string\nwithout i mean with only the string but\nnot the integer right similarly the\nreputation operator it will be\nrepresented by using\nstar\nprint\nstr1\ninto three\nnow three times it will be printed str1\nwill be consist of hello hello will be\nrepeated three times\nnow let us check with two strings str1\ninto\nstr2\nerror hope you understood this\nconcatenation and\nthis\nrepetition operator\nright\nright\nhope you understood this uh strings\nbasic concept that is how to initialize\nthe string\nso by using directly\nassignment operator and using the input\nfunction\nso and what are the index values of a\nstring\nso how to represent the string how to\ndisplay the string by using the\niterative statements\nand then\nstring concatenation\nstring repetition\nand then usage of split function\nwelcome friends so\nlet us\nimplement the various built-in functions\navailable on strings\nso there are many functions let us see a\nfew among them\nso a string is a\ngroup of characters so initialization\ncan be done by directly using sum is\nequal to that is that means assignment\noperator\nright so\nlet us initialize one string to a\nvariable let us take that a variable as\nsome a a is equal to\nso as it is a string so this must be\ninitialized in between\ndouble quotes or a single code or triple\nquotes let us take a double quotes so i\nam writing the message\nhello\nwelcome to python\nprogramming\nso this is the string assigned to a\nstring a so let us print and see that\nyes so hello welcome to python\nprogramming\nso first function\nis catalyzed function\ncapitalized function so this capitalized\nfunction means\nso the first letter of the string will\nbe converted into a capital letter\nright so only the first character of the\ngiven string will be converted into\ncapital letter so the syntax for this\none is\nstring\ndot\ncapitalize\nstring dot capitalize it it will\nautomatically it will convert the first\ncharacter of the string\nto uppercase so let us see this so here\na is equal to hello welcome to python\nprogramming now let us apply this\ncapitalized method so a dot\ncapitalize\nsee you can observe this so in the above\na consists of only hello welcome to\npython programming where h is a small\ncharacter that means a lower case\nafter applying this capitalized method\nthe h will be converted into capital h\nand one more thing i would like to say\nis this\nresult of this function will not save in\nany other variable right it will not\naffect on the actual string so if you\nagain print a\nthe old string will be printed so the\neffect i mean the conversion will not\naffect on the original string so if you\nwant to save this result in one more\nstring just assign one more string so as\na result is equal to a dot\ncapitalize\nso if you print this result\nautomatically the conversion of first\nletter will be upper case and the result\nwill be\nassigned to res string\nso hope you understood this one\nright so this is all about this\ncapitalized function\nnext\nthe second one is\ncenter\nso this center function will take two\nparameters\none is width and another one is\nfill character\ncenter width and fill character\nso here it will result that\nthe width represents the complete width\nof the string and fill character means\nit will fill the remaining characters\nexcept the resultant string\nwith a filling character so let us see\nthe example so that you will be\nclarified so here also\nthe syntax is\nstring dot\ncenter\nwidth\nin integer\nand fill character in a string\nright so\nif the width here if the width is 11\nand our fill character is with some\nx\nso the total string will be total string\nwith width will be 11 and all the\nremaining spaces will be occupied with x\nso let us see that\na dot\nlet us take here some b is equal to\nhello\nso here the b consists of a string hello\nso i just i would like to apply this\ncenter\ncenter\nsome width 11\ncomma\nfill the character with x\nright so see\nhere you can see the total width of the\nstring\nis 11\nso you can count here\n1 2 3 4 5 6 7 8 9 10 11 so total width\nis 11\nand the\nactual string will be centered\nand the remaining spaces on left and\nright side will be filled with the given\nfill character\nright so if you apply with the center\non the string a let us see\nso there will be no change because here\nthe width is given as 11 but the actual\nstring\nof a is\nalmost greater than 11\nso there is no change it can be applied\nso here the width we are specifying is\nthe total length of the string\nso for the total length of the string\nthat the string will be in a center\nand the remaining white spaces on right\nside and the left side will be filled\nwith the fill character\nright hope you understood the center\nmethod\nnext let us move on to the third one\ncount\ncount\nthe string so here the com function will\ntake three parameters\nstring\nbeginning index and the\nend index three parameters string\nbeginning index and end index so this\nfunction will count the given string\nfrom the given indexes so it will return\nthen integer value so the count it will\nreturn a count\nso here the string\nthe syntax\nis the string dot\ncount\nstring\nbeginning comma end\nright string beginning and end here\nbeginning and end represents the\nrange of indexes where to search and\nstring is what to be search so which\nstring to be count right so here the\nstring means the input string so let us\ntake here so a dot\ncount off\nso let us count the character o\no\nbeginning index 0 what is what about the\nend index so we don't know the end index\ndirectly we can use a command length\nlength of a string right\nso this automatically gives the length\nof the string that means the end of the\ni mean the end index of the string right\nso it will count it will give the count\nof the given substring in between the\nrange from 0 to length of a so let us\ncount those here 1\nhere it is 2\n3\nhere it is 4 and here is 5. so there are\nfive pos in the given string of a\nright so three parameters should be\ngiven one is string to be set or string\nto be count\nsecond one is the starting index third\none is the end index\nright\nhope you understood this count\nnext one\nends with\nends with\nso here\nhere also it will it this method will\ntake three parameters as arguments one\nfirst one is the string\nto be searched\nnext one is the beginning of the index\nthe third one is the end of the index\nso here here also we have to give the\nrange of indexes so in that range of\nindexes\nthis method will search for the string\nwhether the string is ending with the\ngiven substring\nright the syntax is also same string dot\nends with\nstring\ncomma beginning comma\nend\nso let us see this\nso a dot\nends\nwith\nso let us take g\nthe string as g\ncomma from 0 to len of a so it will\nsearch\nfor the string g whether it is an ending\nstring for the given string right the\nindex range is from 0 to length of a\nit returns a boolean result that is if\nif the string ends with the given\nsubstring it returns the true or else it\nreturns a false let us see one more\nexample\nends with\nsome x\nfrom 0\nto length of a so we can observe in the\ngiven string a the last character is g\nso obviously it should resent result\nfalse\nright\nso here we we have the input of the\nsubstring can be not only the single\ncharacter it can be more than one\ncharacter so let us see one more example\na ends with\ning\n0\nlength of\na yes true because ing is the last\nsubstring of given string\nright so this is the boolean result if\nthe\nstring ends with the given substring it\nwill return true if this\nstring\ndoes not ends with the given substring\nit will return false\nso hope you understood this one\nnext let us move on to the next one\nnext one is find\nfind method so here also this find will\nalso take three parameters as an\nargument so first one is the string\nsubstring and the second one is the\nbeginning index third one is the end\nindex so here also we have to find the\nsubstring in the given string\nso in the i mean the range is will be\nalso be given\nright so it returns the index value of\nthe first occurrence of the given\nsubstring so it doesn't return the count\nvalue it returns the\nindex value of the\nstring occurrence of the first\noccurrence of the given string\nlet us see this\nfind\nright\nso let us implement this a dot\nfine\nso let us\ngo for o\nbeginning index 0 ending index a\nso it will return the index value of o\nwhich is occurred at the first\nfirst occurrence of row in the given\nstring so what is the first occurrence\nof so this is the first occurrence of o\nso the index what is the index value of\nthis one so 0 1 2 3 and 4 so this\nfunction will all\nreturns\n4.\nso if you find one more string\nl 0 comma length of a\nit will return the first occurrence of l\nin the given string\nit will return the index value\nright\nnext\nsimilarly similar to the find function\nthere is one more function called index\nfunctions so this is also working of\nthis function is also similar to the\nfind function here also there are three\nparameters will as in arguments so first\none is the substring to be searched\nsecond one is the beginning index third\none is the end index so it will search\nfor the index of given substring within\nthe range of starting index and end\nindex\nright\nso it will also return the integer value\nthat means the index value\nof the first occurrence of the string\nthe same working of this\nindex value is similar to the find\nfunction\nso\nthe syntax is string dot\nindex of starting beginning and end so\nlet us see this\nso both working are same\nfind\nlet us take l\n0\nlength of a\nobviously the index value of the l first\noccurrence of l index value is 2 so we\ncan also change this\nm\nfrom\n7th position\nto\nlength of a\nso 11 so here the starting index is 7 so\nhere 0 1 2 3 4\n5 6 7 so from here it will be changing\nso here\n8 9 10 11 so m the index value of m is\n11 so it will return the occurrence of\nthe first\ni mean the first occurrence of the given\nsubstring\nright\nso sorry\ni have to implement index right so index\nof\nm\n7 comma length of a\nso there is no change among this\nindex function and the find function\nright so hope you understood this one\nnext let us move on to the next function\nthat is\nis lower\n[Music]\nis lower function\nso this function doesn't take any\narguments so it doesn't have any\narguments\nso the syntax for this one is string dot\nlower\nso it will check whether the given\nstring is in lower case or not\nif any one character of the given string\nis in upper case it will return false\nthat means this function also is a\nboolean function so it will return\neither true or false so if all the\ncharacters of a given string are in the\nlowercase lowercase then automatically\nit will return true and if any one of\nthis\ncharacter in the given string\nis a upper case automatically it will\nreturn false so let us see the\nimplementation\nso a\njust print a so\nhere every character is in lower case\nnow let us check a dot is lower so here\nevery character in the given string of a\nis lowercase so it must be written true\nright\nthen\nso if\nif\nany one of the character is\nsorry if any one of the character is in\nupper case automatically it will return\nfalse so i will let us check it so let\nus initialize hello to c where h is a\ncapital letter so c dot is lower it will\nreturn false because because\namong the string one character is in\nupper case\nthen\nthe next function is quite opposite to\nthis one that is is upper\nis upper\nhere also this function will not take\nany arguments right so this is also a\nboolean function which returns either\ntrue or false so\nhere it will check whether the string\nthe given string\nis completely\nin a upper case letter or not if the\ngiven string is in upper case\nautomatically it will return true\notherwise it will return false even one\ncharacter in the given string is in\nlower case it will return false so let\nus check that one\nso\nhere c\nprint a so a consists of hello welcome\nto python programming every character of\nthis string is in lowercase so if you\napply this upper\nfunction it should return false\nright so let us take one more thing c is\nequal to capital letters hello\nright so if you apply this one\nso as every character of the string is\nuppercase so it will return\ntrue\nsorry i have given capital letters so\nright\nso it is true because c consists of the\nstring with all the characters in upper\ncase\nso hope you understood this one\nright\nnext\nnext function is\nis\ntitle\nis title\nso\nthis is also a boolean function it will\nreturn either true or false so here is\ntitle means title so every word\nof the string should start with a\ncapital letter so it will check for that\none so if any one of the word\nis started with a lowercase letter it\nwill return false\nso if the string consists of more number\nof words so every word\nevery word of the string should start\nwith a capital letter\nright so here the syntax is similar\nstring dot is title\nright let us see this a is equal to\nd is equal to let us see\nhello\nwelcome\nto\npython\nprogramming\nsee if you observe here i have\ninitialized a string to a d\nwhere every word of this this string\nstarts with a capital letter so hello h\nis capital welcome w is capital two t is\ncapital python p is capital programming\np is capital so if you check for this\nyes title\nit will return true because every word\nstarts with a capital letter for example\nlet us initialize something\nso first of all first word it starts\nwith the catalytic and reminding\neverything\nstarts with the normal lowercase\nso if you check this\neach title for this string\nit should return false because here\nevery word of the given string is not\nstarted with\ncapital so it returns directly false so\nevery word should start with a capital\nletter that's called\nthat's the result of this is title\nfunction\nthe next one\nas we know that length length is a one\none function\nit can be applied in everything so\nlength\nof\nstring\nright\nso here the syntax is length of string\nso this will return the length of the\ngiven string so for example\nlet us take a\nso if you apply length of this a\nautomatically it gives the total length\nof the string including spaces here the\nlength includes the spaces\nright so let us take one more example\nf is equal to\nwelcome\nto\npython\nso here you can observe the count 1 2 3\n4 5 6 7\n8 9 10 11 12 13 14 15 16 and 17\nincluding the spaces\nright\nso if you find this\nlength of f automatically we can get the\nlength 17 so\nthis length function will also count the\nspaces\nright\nnext\nso next function is\nlower\nso this function doesn't take any\narguments so this directly\nconverts the string into lower case\nletters so all the uppercase letters\nwill be converted into lower case\nletters so here the syntax is string dot\nlower\nstring dot lower\nright so let us see this some\nso here uh let us see the c c consists\nof hello every character is a capital\nletter now apply this one lower c lower\nso automatically it will return the\nsmall letters so here also the result\nwill not be stored so if you want to\nstore this result assign this function\nresult to the one more\nvariable right for example here we can\nwrite result is equal to c dot lower so\nthis will result\nthe resultant in\nres so hello if you print this c\nautomatically we can get the capital\nhello\nhope you understood this this lower\nfunction will convert the capital\nletters into lower letters lowercase\ncharacters next\nnext function is quite opposite this\nlower which is upper so here all the\nuppercase characters will be converted\ninto\nlowercase gap so sorry lowercase\ncharacter will be converted into\nuppercase characters so string dot\nupper\nright so lowercase will be converted\ninto upper so if you print a\nwe can get the string hello welcome to\npython programming where every character\nis a small smaller i mean lowercase\ncharacter let us apply this upper for\nthis one\na dot upper so every character of the\ngiven string is converted into upper\ncase characters\nright next maximum function\nso there are different functions\navailable\non strings right so maximum function so\nit will return the maximum character of\nthe given string\nso here also this maximum function\ndoesn't i mean this maximum function\nwill take one argument as a\nparameter that is string name\nright so\nmax of string it will return\nthe maximum character in the given\nstring\nsee\nso syntax is max of\nstring name\nright so let us say take this one\nso\nc\nlet us print c\nso that we can know what actual string\navailable in c hello cattle letters\nhello\nif you apply max of a\nsorry max of c\nit will return o because y is greater\nthan all the remaining characters l e\nand\nh\nso it will return the maximum characters\nin the given string so here this\nfunction also\ndoesn't store this result in any other\nvariable unless you assign this function\nto one more variable\nright next\nthe next function is so let us apply for\nthis one\nmax of va right\nprint a\nso\nthis is a\nstring available in a so if you use this\nfunction max of a\nit will return the maximum character in\nthe given string that is y so y is the\ngreater character among all the\nremaining characters right so\nso it will return y\nnow\nnext function is\nquite opposite which is minimum function\nit will return the minimum character in\nthe given string\nright so minimum of\nc\nso\nin c consists of hello\nso here c consists of hello in this\nhello the least character is e\nbecause\nall the remaining characters are greater\nthan character e\nso let us take it let us take this\nand apply for\na function\nsee space space is having the least\npriority than\nany other characters\nso in here we are having the string\nhello welcome to python programming in\nthat we have one two three four spaces\nso among those four spaces i mean so\nfour spaces here the space is having the\nleast priority then all the remaining\ncharacters so it will return the space\nright\nor else so simply consider d is equal to\nprogramming\nso apply this minimum function for\nd\nso it will return a because a is a\nsmaller letter in the given string\nso all the remaining characters are\ngreater than the character a\nright\nnext the next one is\nstarts with so we have seen ends with\nnow we have to see the star speed\nso this function also\nconsider i mean it will take three\nparameters that is string\nbeginning\nand end\nand so here also it will search for the\nwhether the string\nstarts with a given substring in the\ngiven range of indices\nso syntax is\nstring dot\nstarts with\nsubstring\nbeginning\nand\nright so three parameters within the\ngiven range\nit will check whether the string starts\nwith a given substring\nso let us see\nso print a\nlet us check a dot\nstarts with\nhello\ngive the range of index 0 to\nlength of a\ntrue it is a boolean function so because\nhere in a the string is hello welcome to\npython programming so here the string\nstarts with hello and here the substring\nis also hello so automatically it will\nreturn true\nlet us check the one more case\ns starts with\nsome p\nstarts with zero index\nlength of va so here the the starting\nindex and end index will be changeable\nright so it should it cannot be either\nzero it can be any other index values\nthe range can be given by the user right\nso\nhere the string starts with the h but\nhere the substring is jp which is not\nequal to\nh so it returns false\nnext\nor find function\nso here also\nit will\nit will take a string beginning and\nending ending index\nso this is similar to the find function\nwhich we have seen in the earlier cases\nso in the find function\nwhich we have seen in the earlier case\nso it will return the first occurrence\nindex value\nbut here it will return the last\noccurrence of\nthe given string\nright so the index value of the last\noccurrence that means r indicates from\nthe reverse side from the reverse side\nthe first occurrence or we can say the\nlast occurrence of\nthe given string index value of last\noccurrence\nso r fine\nsee\nlet us say take this one so c is equal\nto\nhello\nright as we know\nif you give the find function and if you\nwant to find l\nin the given range that means l zero and\nlength of a\nsorry c\nso we will get the result as\nsorry sorry\nc dot find\nl\ncomma 0 comma\nlength of\nc\nright\nso it will return to because here\nthe h is consists\nh index value is zero\ne index value is one the l index value\nis two the one more l index value is\nthree and o index value is\n4\nright so\nhere the find function will give the\nfirst occurrence so l the first\noccurrence of l is 2 so it will return\n2. so if you apply this r fine function\nfor this same\nso 0\nlength of c\nit will return\nthe last occurrence of given substring\nin the\ngiven string\nright the index value of the\nlast occurrence of substring so here the\nlast occurrence is the index value is 3\nso it will return 3\nright r indic here r indicates the\nreverse side from the reverse inside\nright next similar to\nindex here there is one more thing that\nis r index\nthis is also similar\nstring dot\nr index\nright so here also there is no\nuh\nchange\nc dot index of\nl\nfrom 0 to\nlength of c\nit will give a 2 so if you give r index\nit will return the last occurrence of\ngiven substring\n0 comma\nlength of\nc it will given\nit will return the last index\nright so hope you understood this r fine\nand r index just quite opposite with the\nfinite index so find will\nfind the index value from the starting\nposition\nr find will find the\nindex value from the\nlast position reverse order\nnext\nswap case\nswap case\nso here it doesn't takes any\narguments\nright\nso here the syntax is\nstring dot\nswap case\nso it will convert all the lowercase\ninto uppercase and uppercase into case\nsee let us see\nso a is equal to let us take one more\nthing c is equal to\nso here c is equal to hello welcome in\nthat the letters e l w c and r capital\nletters all the remaining are the lower\nletters so if you apply the swap case in\nthis for this\nc\nso it will convert\nall the uppercase to lowercase and\nlowercase to uppercase\nright so here after applying this the\nletters e\nw\nl\nc\nall becomes a smaller case and all the\nremaining characters will come to\nuppercase right strap case so lower to\nit changes the lowercase character to\nuppercase and get uppercase characters\nto lowercase in the given string so here\nalso it doesn't return or it doesn't\nsave this result so if you want to save\nthis result you have to assign one\nvariable to this function\nright next\nlast one\ntitle\nso as we have discussed in the previous\nuh earlier so there we have seen one\nfunction that is each title each title\nmeans every word should start with a\ncapital letter so it will check whether\nthe every word starts with a capital\nletter or not if if every word starts\nwith a capital letter it will return\ntrue or it will return false so this\ntitle function\nwill convert every character\nof i mean every first character of word\ninto a indirect uppercase\nright so here also the function name\nthe syntax is\nstring dot\ntitle\nso it will convert the the first\ncharacter of every word into uppercase\nso let us take this one so a is equal to\nso let us take\nprint\na\nso\neverything in a smaller case so if you\napply here\nwith a dot title\nso it will convert\nsee you can observe here\nevery character of the i mean every\nfirst character of each word\nwill return\ni mean is converted into uppercase\ncharacter so in hello h is converted\ninto upper in welcome w is converted\ninto upper in two t is converted into\nupper python p is converted into upper\nand the programming p is converted into\nupward\nright so title function will convert\nthe first character of every word into\nuppercase\nright\nso these are a few\nbuilt-in functions or methods on strings\nset\nso set is also similar to the list and a\ntuple\nso it is also a collection of\nmultiple elements of different data type\nbut the only difference between these\nlist and tuples and set is here\nthe elements of a set is\nenclosed in between the curly braces\nseparated with the comma right\nso\nyes is equal to open the curly brace\nwrite down the list elements one\na 2.5\nbbc\nso this is a set a multiple element\nstarts from multiple elements of\ndifferent data type separated with a\ncomma\nand enclosed in between curly braces so\nwhereas in list\nthe elements in square braces\nin triple\nthe elements are in parenthesis\nwhereas in set the elements are in\ncurly braces\nright\nnext\nand\nthis set\navoids the duplication\nit avoids the duplications if you write\nit here s is equal to 1 comma 1\nand if you print the s\nthe result will be only one\nbecause it will eliminate the duplicates\nall the duplicates will be eliminated in\nthe set concept\nso this is the major difference between\nthe list\ntuples and set whereas in the listed\ntuples the duplications will be allowed\nwhereas in set the duplications are not\nallowed it will not consider the\nduplications\nright next\nhow to create a set\nso creation offset is a simple\njust s is equal to open the curly braces\nand write down the elements so these\nelements can be any of any type\nand how to add more number of elements\ninto the set\nso if set consists of\nsee\nthis is an empty set creation of an nc\nmtc\ncreation of\nempty set\nright\nnow\nif you want to add an elements into a\nset directly we can write as\nyes dot\nand so there is a function called add\nopen the\nparenthesis i mean it's a function so we\nhave to give an argument that argument\nis nothing but a value if you implement\nthis one\nthe result will be\n1\nand again if you implement s dot add of\n2\nthe result will be 1 comma 2\nand again if you add\none more element\nthe resultant will be one comma two\ncomma\nso like this we can\nadd the\nelements into a set\nor we can directly update the set with\nanother set let us state\ns is equal to\n1 2 3\nand for example t is equal to 4 5 and 6.\nso s dot update\nof t so here observe s is a set and t is\nalso a set\ns is set t is also inside and here if\nyou print\nyes\nwe can get\none comma two comma three four five and\nsix\nhope you understood so if you want to\nadd a more number of elements directly\nwe can consider a set and directly we\ncan update the set into the existing set\nso if you\nreplace\nthis\nfunction as\nt dot update\nof yes and if you are\nprinting t\nthen\nwe will get 4 comma 5 comma 6\n1 comma 2 comma 3\nright so\nthe update will be done into this set\nhere both are set s and t are sets\nso\nthe update will be done on this set\nhope you understood\nnext\nsee one more example i will explain you\ns is equal to\n1 comma 2 comma 3\nt is equal to\n3 comma 4 comma 5\nand if you update this one s dot\nupdate of t\nand print t\nalso print s\nit will give\n1 2 three\nfour and five so\nthis\none will not be considered into a set\nbecause\nthree is already in set yes\nso\nthis set will\navoid the duplications\nright\nnext\nlet us see the basic operations\nperformed on set\nbasic operations performed on set\nthe first one is\nadd\nso let us take\nhere s is equal to\n1 2\n3 and t is equal to\n3 4 and 5.\nso s dot and\nof\nsix\nit will give\nthe s as\none two three\nsix\nsecond operation\nlength\nlength of yes\nlength of yes so this is a common\noperation performed on\nall the sequential data exactly that\nmeans in either list or a tuple we will\nuse the same data the same function so\nlength of yes means it will return the\nlength of the\nset yes so what is it here length of\nthis s is four\nso it will return four\nnext\nupdate s dot\nupdate\nof t\nso s is essentially t\nso all the elements of t will be\nadded into\nyes\nso s is equal to\n1 2\n3 6 3 is already there\nfour and five\nnext\nyes dot\nremove\nremove\nelement we have to give the element as\nan argument\nsome\nsix\nso automatically we will get s is equal\nto one two\nthree four five\nso this one is an element it's not an\nindex it is element\nnext\nyes dot\nthis curve\nhere the this function also performs the\nsame thing which we have seen in regular\none\nso here also the output will be it will\nremove\none two three four\nright so here also it will remove the\nelement given element so here this is\none also is the element so what is the\ndifference between remove function and\ndiscard function so in this remove\nfunction\nif element\nnot found\nthen\nit will return\nk error\nit will return a key error that means\ns dot remove 6 if 6 is not available in\nthis list i mean set\nit will return here that means c\nif i am removing the element 7\nwhich is not available in set it will\nreturn k error\nwhereas\nhere\nerror will not be raised\nso even though the element is not found\nin the lead set\nthe error will not be raised\nokay so that's the only difference\nbetween the discard and i don't know\nnext sixth one yes dot\npop\nso it doesn't take any argument\nblindly pop will remove the first\nelement of the set\nand it will return the element which has\nbeen removed from the set so here s dot\npump so s is one two three four s dot\npop will remove the one so it will\nreturn only one\nthat means it will return the element\nwhich has been removed from the set and\npower function always removes the first\nelement of the set\nso if you immediately\nif you print yes\nwe will get only two three and a four\nright\ns dot pop\nnext\nyes dot\nhere\nand this function will clear all the\nelements of a set that means\nit will be\nan empty set s is equal to\nan empty set if we clear all the\nelements\nright\nso it's not clear\nso for insertion we are using add\nupdate\nthese two for getting the length this\none\nand in order to remove the elements we\nare using remove discard pop and clear\nremove function will remove the given\nelement from the list i mean\ndiscard function also removes the given\nelement from the set but if the element\nis not found in the set it doesn't raise\nany error\nso s dot pop will always\nreturn the element which has been\nremoved from the zip and the power\nfunction will remove the first element\nof the set\nand so clear we'll remove all the\nelements from the set\nso hope you understood this uh basic\noperations and one more important thing\nwe should remember on set is\nslicing indexing and slicing cannot be\nperformed\nindexing and slicing\ncannot get performed we can't\nperform this indexing and slicing on\nset\nright\nnext\nso apart from these functions there are\na few more let us see that\nhope you understood these basic\noperations it's a very simple concept\nsee next one is\nso let us\nlet us take s is equal to\n1\n3\n2\n4\n6 and 5\nlet us take this one\nso the next one is\nmax function\nmax of yes\nmax of s will return the maximum value\nin the set what is the maximum element 6\nso it will return 6 as a result of this\nfunction\nsimilarly\nmill of yes\nit will return the minimum value which\none is the minimum one\nnext\nsum of set\nsum of yes\nsum of yes means it will add all the\nelements in it will return the sum of\nall the limits so here some of yours\nwill return the sum of all these\nelements see 5 6 11 plus 4 15 17 28 51\n21\nright so directly there is a\nfunction called sum\nso all these are the basic operations so\ni will write the basic operations once\nagain so\ns dot add\nelement\ns dot\nupdate\nof another set\nyes dot remove\nof element\ns dot\ndiscard\nelement\ns dot pop\nyes dot\nclear maximum of yes\nand minimum of yes\nsum of s\nso all this we have seen\nin this one right so for an empty set\ns is equal to\njust open branches\nnext\nno indexing\nand slicing\nand one more\nno duplications\nso these are all the overview of\nset\nso in this session let's have a look on\nsome more important operations performed\non set\nso first one is\nis\nsubset\nis a subset so we know that subset\nand superset let us take two\nsets first one one comma two comma three\nand the second one\none two three four five and six\nso\nsubset here\ns dot\nis\nsubset of t\nmeans yes is a subset of t that means\nevery element of yes\nmust be presented in a\nuh i mean in set d\nso here if you observe set yes consists\nof 1 2 3 and t consists of one two three\nfour five six so here every element of\nset yes\nis available in set t\nso\nit will return\ntrue\nfor example if you consider here\nsome 10\nso\n1 is available in t 2 is available in t\n3 is another 20 and 10 is not available\nin d in this case\nit will return\nfunds\ns is not a subset of t\nso\nright so it returns a boolean research\nand the representation of this one we\ncan implement this by using this one or\nyes\nless than or equal to t\nso we can implement by using s less than\nor equal to t that means s is a subset\nof t\nsecond one\nis\nsuperset\nis superset\nso is supersedent means reverse so every\nelement of t\nshould be presented in yes so here i\nwill write\ns dot is\nsuper set of\nt that means every element of t must be\npresented in set yes so here there are 4\n5 and 6 which are not presented in set\nyes so this will return\nfalse\nif s is equal to\n1 2 3\nand t is equal to\n2 this will return true because\nin set t only 2 is there which is\navailable in yes also so t\nevery element of t is available in yes\nso it will return true in this case\nin this case it will be false\nso this representation can be written as\ns greater than or equal to\nt\ns greater than or equal to t less than\nor equal to t means subset greater than\nor equal to t means superset\nso these are the two operations\nlet's move on to the third one\nhope you understood these two\nsubset and superset\nthe third operation is\nunion\nunion\nunion means\na new set will be created with all the\nelements of s and t\nwithout duplication\nso the one of the major property of set\nis\nduplications are not allowed\nso here if you write yes dot\nunion of p\nit will return\na new set\nit will return a new set\none\ntwo\nthree and again one two three are there\nso duplication shall be removed so four\nfive\nand a six\nright so\none two three four five six so every\nelement of both the sets will be created\ninto another set without any\nduplications\nso this is one and this representation\nis s\nor\nt\ns or\nt\nfourth one\nintersection\nso intersection means\nthe elements which are available in both\nthe s and t\nso those elements must be presented in\nboth the sets\nso simply we can say them as a common\nelements the common elements which are\navailable in both set s and set t\nsee\ns dot\nintersection\nof\nt\nthis will create a new set\nwith all the common elements which are\npresented in both\nsnt so what are the elements in both s\nand t one two three\nso only three elements one two and three\nthe result will be this one\nand\nit can be implemented as yes\nand t\nintersection can be implemented as s and\nt\nright so here the result will not be\nsaved into another set right if after\nthis operation if you print yes\nit will print one two three and if you\nprint t\nit will print one two three four and\nfive and six\nright\nso we can assign this\noperation to one more variable\nor simply we can update the\ncurrent variable we can update the\ncurrent variable\nhope you understood this intersection it\nis represented as yes ampersand t\nnext\ndifference\ndifference\ndifference means\nthe common elements will be removed and\nall the remaining elements will be\nprinted\nsee\ndifference means\ns\ndot\ndifference of t\nthat means all the elements of s will be\ni mean common elements of s and t will\nbe removed and all the remaining\nelements of s will be printed\nright so\nall the elements\nof\nyes\nexcept\ncommon\nwill be\nprinted\nsee see the difference\nso\nt dot difference\nif you implement like this t dot\ndifference of yes\nit will print\nall the elements\nof\nt\nexcept common\nwill be printed\nhope you understood the simple concept\nso if you write s dot difference all the\nelements of yes will be printed except\nthe complements\nif you write t or difference all the\nelements of t will be printed except the\ncolumn elements so\nthe resultant of this one\nwill be\nan empty set\nthe resultant will be an empty set\nbecause\n1 2 3 are the common elements so after\nremoving 1 to 3\ns is having an empty set\nhere the resultant will be\n4 comma 5 comma 6\nbecause after writing after removing the\ncommon elements what are the remaining\nelements 4 5 and\n6\nso this will be printed here\nso hope you understood so this is\nrepresented as\ns minus t\nand this one is implemented as\nt minus s\njust like a minus v b minus here both\nare different\nso here also s minus t t minus s\nright so this is called a difference\nhope you understood so let us move on to\nthe last one that is symmetric\ndifference\nlet us see that\nsimilar to the difference itself\nso last one\nsymmetric difference\nso here the symmetric difference\nwill give\nall the elements of\nboth s and t except the common elements\nso in the previous case we are printing\nonly one the elements of only one set\nhere we have to print i mean the\nresultant will print\nall the elements of both the sets except\nthe common elements like let us write\nhere\nlet it be s is equal to one two three\nfour i mean one two three seven eight\nnine and the set of t is consists of one\ntwo three four five six\nnow\nif i write it as s dot\nsymmetric difference of t\nit will return\nall the elements\nof s\nlt\nexcept\ncommon elements\nit will be\nprinted\nright so all the elements of s and t\nexcept the common\nso the resultant of this one will be\nso what are the common elements one two\nthree one two three so what are the\nremaining elements\nseven eight nine\nand four comma five comma six\nright\nso this is the resultant of this one and\nthis is implemented by using\ns\ncap t\nso we call it is an xor in our c\nlanguage right so x cap\nthis is represented as x square t\nright hope you understood this one and\nthe last one is\nsorted one more operation is there that\nis\nsort\nso we can we have\nthe direct inbuilt operation called\nsorted so which sorts all the elements\nof a set\nsort\nso\ns o r t e d sorted of\nso let us take s is equal to\nso 4\n3\n1\n2\n5\nright\ntake this one sorted of yes\nit will directly sort all the elements\nof set yes so it will return\none two three four and five\nso directly will sort all the elements\nof a set\nright so these are all the different\noperations\nperformed on\nsets see\nat a glance and write everything\nso first one\nwe have seen\nis a subset\nwhich is represented as\ns less than or equal to t\nsecond\nis superset\nwhich is represented as s greater than\nor equal to t\nnext union\nwhich is represented as s or t\nnext\ndifference\noh sorry\nafter the union we have seen\nintersection\nintersection\nwhich is represented as yes\nnext\ndifference\nwhich is represented as s minus t\nnext one\nsymmetric difference\nwhich is represented as yes\nt\nso these are the major uh operations\nperformed on sets\nso hope you understood this is simple\nconcept that is operations on set so in\nthis session let's have a look on\nimplementation of these sets and the\nbasic operations performed on sets\nso let us take one set so a set is a\ncollection of elements separated by a\ncomma and enclosed in between\ncurly braces and the one important thing\nregarding the sets is set doesn't allow\nthe duplication so if there are any\nduplications in that set it will be\nautomatically removed so let's create\none set\n1 comma 2 comma 3 comma 4\nright\nso print the same you can get this set\nthat means enclosed in between the curly\nbraces let us take one more set t is\nequal to\n3 comma 4 comma 5 comma 6 comma 7\nright\nprint\nt\nright so now we are having two sets and\nfrom these two sets we can perform the\nbasic operations first of all\nlength so to find the length of the set\nthe\none method is len of yes automatically\nwe can get the length of the set the\nnumber of elements\nin the set then\nthe second operation is\nhow to add an element to the existing\nset\nso for that we have seen add method s\ndot l s dot add\nsome\nelement five\nso that five will be added\nif you print yes you can observe that\none two three four five so five fifth\nelement i mean the element five is added\nto the existing set yes\nso there is one more thing if you want\nto add more number of elements at a time\nwe can use\ns dot\nupdate\nof t so here we have to pass\nthe set as an argument subset as an\nargument now\nall the elements which are available in\nset t will be added to set yes\nso let us see s dot update\nt\nnow print\nyes\nso you can see one two three four five\nsix seven here three four five uh sorry\nthree four five all these three are\ncommon for both set set s and set t\nso it avoids the duplication and it it\nprints only one two three four five six\nseven\nright hope you understood this one add\nupdate now how to remove the element\ns dot\nremove so if you write a s dot review\nyou\nthe element will be removed from the set\nyes if you write t dot remove the\nelement will be removed from set t\nseven so if you print yes you can\nobserve the 7 is missing in the set\nor\nif you try to remove\nany other element which is not existed\nin the set it will return the key error\nright so if you want if you try to\nremove the element which is not\nthe not belongs to that particular set\nthen automatically it will reduce some\nkey error\nright so\nnext one is\ndiscard\nthis is this method is also used to\nremove the element see\ni am removing the element 6\nso i'm printing here\nso one two three four five\nhere also if you are trying to remove\nthe element by using the discard method\nwhich is not available in the list\nit doesn't return any error that's the\nmain\ndifference between the remove and disk\nso if you want to\nif you are trying to\ndelete an element which is\nnot which doesn't belongs to that\nparticular set\nby using the remove command\nthen you will get an error that is a key\nerror\nif the if you are trying to\ndelete an element which belongs to the\nsay the set\nusing discard method you will not get\nany other error\nright so that is the difference between\nremove and discard now\npop\nyes dot\npop\nso here this function will always delete\nthe first element in the list\nand it will return the element which has\nbeen deleted from the set now s dot pop\nso it returns one as a result here one\nmeans\nthis function removes the element one\nfrom the set yes\nso if you print yes\nyou you can't find the element one\nbecause one is deleted by using the pop\nmethod\nso\nanother one s dot clear this function\nwill clear all the elements in the from\nthe set\nthat means removing all the elements at\na time so if you print this yes\nyou will get\nempty empty set\nhope you understood this one\nthis is an empty set\nright\nnext\nlet us create uh the set\nright now\nmax of yes it will return the maximum\nelement available in set so 4 is the\nmaximum element so it will be returned\nsimilarly minimum of yes it will return\nthe minimum element present in the\nset\nnext sum of yes so it will return the\ntotal sum of all the elements in the\nset see\nsome obvious returns the sum of 1 plus 2\nplus 3 plus 4\nso that is 10\nright so these are the\ngeneral operations in order to insert or\nremove the elements from the list now\nlet us see some more operations\nimportant operations\nthat is first one is is subset\nso let us take here 1 comma 2 3\nnext t is equal to\none two three four five six\nsee first one is is subset\nis a subset of t\nthis means\nit will return true if t is a subset of\ns\nthat means every element of\nsorry sorry s is subset of t if every\nelement of s is presented in t\nyes s is consists of one two three and t\nconsists of one two three four five six\nso every element of s is available in t\nso s is a subset of t\nand the one more way to represent is yes\nless than or equal to t\nthis is also a subset\nright next superset is\nsuper set\nof t the reverse of subset that is every\nelement of t should be presented in set\nyes so here it will return false because\nt consists of six elements and s\nconsists of only three elements\nso it will return false so one one more\nway to implement this one is\ns greater than or equal to t\nright next union s dot\nunion of\nt it will combine both the sets s and t\nso if you print yes\nyou will get only one two three if you\nprint\nt\nyou will get only one two three four\nfive six so\na new set is created but it it is not\nsaved so you can assign\nsome\nvalue or variable to that particular\nunion\nso that\nif you print this result\nthe union of a s and t will be printed\nright so for union you can use yes\nor\nt\ns or t is a union\nright next intersection s dot\nintersection\nof t\nnow intersection means the common\nelements in both s and t\nso what are whatever the elements which\nare presented in both s and t will be\nwritten so s consists of one two three\nt consists of one two three four five\nsix so there one two three elements are\ncommon in both set s and t so it will be\nwritten so the representation we can\nrepresent is s and t\nagain it will return one two three\nright next\ndifference s dot\ndifference\nof t\nsimply\nthe elements\nin s\nminus the elements in\nt\nso it will return an empty set because s\nconsists of only one two three t\nconsists of four five six so s dot\ndifference t that means\ns minus t it will give\nempty set if you write t minus yes so\nthere are three more elements in t so it\nwill be those will be the\nreturn 4 5 and 6 that means which are\nnot\ncommon in both s and t will be returned\nso common elements will be discarded\nright if you write s dot difference\ns minus t will be performed if you write\nt minus s t e elements will be performed\ni mean\nright next symmetric difference\nnow\nit will return\nall the elements of s and t except the\ncommon elements\nso coming to the previous one difference\nwill return only elements of one set\nexcept the common element but here\nsymmetric difference means it will\nreturn the common elements i mean it\nwill return all the elements in both the\nsets\nexcept the common elements so before\nwriting this let us take that one\ns is equal to one two three four five\nand six\nand t is equal to\nfour five six\nseven eight nine\nso let us check this one\nnow\nsee s\ndot\nsymmetric difference\nsymmetric difference of t\nthat means\nthe new set will be kidding both the\nelements of s and t which are not common\nso here s consists of a\nin s and t sets four five six elements\nare common so the result will be all the\nelements except the common element that\nmeans one two three seven eight and nine\nhope you understood this one symmetric\ndifference\nso every element will be printed except\nthe common elements\nnext the last one is sorted so\nautomatically we can\nsort all the elements by using a single\nmethod called sorted method\nso let us take this one\nthree\none two\nsix five\nseven\nfour okay so let us take this is a set\nprint this\nnow apply the sort\nsorted of\nyes\nautomatically it will return all the\nelements in sorted order the list of all\nthe elements in sorted order\nright so ah as i said that these sets\nwill remove the duplications so let us\nexplain that one s is equal to one two\nthree\nt is equal to\n1\n2 3 4 5 and 6 so if you perform this yes\nunion t it will combine both the\nelements of s and t but here it will\nonly displace one two three four five\nsix because one two three is duplicated\nif you combine this both s and t one two\nthree are duplicated so one two three\nwill be\nthe duplicates will be ignored\nright so all these are the different\noperations performed on\nsets\nso hope you understood these\nsets concept\nso in the previous sessions we have seen\nthe sequential data structures like\nlist\nset\ntuples\nright so we have seen a list\nso tuple\nand a set so these we call it as\nsequences\nsequences because it consists of\nmultiple elements so here the dictionary\nis also consists of\nmultiple elements\nbut in terms of\nkey\nvalue pay\nin terms of key value pay so that means\nboth the key in value will be forming a\npay and this will be considered as a\nsingle element in dictionary so we\nshould call it as we should not call it\nas a sequence right so this is\ncalled as\nmappings\nrather than sequences\nright so we should call it as a mappings\nrather than the sequences so\nwe should not call these as a sequences\nright so so here also a key value pane\nand this can be of any data type\nright now let us see\ngroup of\nkey value\npages\nseparated\nwith karma\nand enclosed in\ncurly braces right this is important\ncurly brackets\nso whereas list\nwill enclose the multiple elements which\nare separated with the comma in\nsquare braces\nand tuple\nwill\nuse a parenthesis\nin a set again we will use the\ncurly braces and in the dictionary\nsimilar to the set it will also the\nelements of a dictionary will also be\nenclosed in curly braces but in terms of\nkey value p key value p\nright so this is the definition simple\ndefinition we can say about this\ndictionary\nright so\nlet us create\ndictionary is equal to\ncurly braces\nso here we have to give a key\nfollowed by the value right so\nlet us take an example name\nname is a key\nand\nthese key value page this key value pane\nare separated with\ncolumn\nthis key value pair is separated with\ncolumn\nname\nsome a b c\ncomma\nso this is all one element right this\ncomplete page will be considered as a\none element so left hand side to this\ncolumn will be treated as a case and\nright hand side is treated as a values\nso this forms a key value pair\nour number roll number\ncomma\ndepartment\nso here the dictionary consists of a key\nvalue base\nseparated with a comma\nright separated with a comma enclosed in\na square bracket\nso this is a\nkey\nthis is a\nvalue\nhope you understood this one\nthis is a key this is a value\nright so\nwe are having\nthree elements so here we call the these\nas\nitems\nitems\nof\ndictionary are\nnothing but\nname\nabc\nso it forms a tuple\nokay\ncomma\nr number\nsub 512\ncomma\nd p t\nc s\nright\nso these are the items of a dictionary\nso we should not call them\ncall these as elements we'll call these\nas a items so why items means\nthere is a function called\nitems so there is a method called items\nwhich will display all the elements of\nthe dictionary so we can\ntreat these elements as items so that we\ncan easily implement that thing okay\nnow so how to create a dictionary\nright so we will see how to create a\ndictionary\nright so how to create a dictionary so\nan empty dictionary is created as\nso this is an empty dictionary\nso dict is equal to open curly brace\nclosure clearing this\nso this is how\nwe can create an empty dictionary\nright now\nso\nhow to create a dictionary with elements\ndictionary with items okay so for that\nwe have seen\nso dict is equal to open curly brace so\nwe can go with the\nkey\ncolumn\nvalue sorry i'll write the syntax here\nso key\ncolor\nvalue one\ncomma\nkey 2\ncolumn\nvalue 2\nand\nso on\nso this is the syntax for creating a\ndictionary with a multiple key value\npage\nand\nif you want to write it in a single li\nyou know\ni mean in multiple lines we can also\nwrite it as vact is equal to so write\nthe statement key i mean write all the\nspace\nin this individual lines okay\ncolumn\nvalue 2\nkey 3 column\nvalue three\nso in similar way also we can\nuh create a dictionary so writing the\nkey value pair in single line every key\nvalue variance initially\nright so this key value can be\nany data type\nif it is a string\nwe have to enclose that string in\nbetween the single quotes or a double\nquotes\nso that is a common procedure okay so\nand this is how we can create a\ndictionary and also we can create a\ndictionary by using the dictionary\nfunction\nso this is items this is an empty\ndictionary\nnext\ndictionary function\nso\nthere is a function called dict\nwhich is used to convert into the\ndictionary it forms a key value page\nso we can\nuse this dictionary function to create a\ndictionary so we will see how it will be\ncreated\ndictionary function\nso here we have to give\na pair of\nkey values\nin\ntuple\nsee i will show you that\ndict of\nkey one\nvalue 1\nk2 comma\nvalue 2\nand so on\nso in such a way we have to give\nthe key value base so this function will\ncreate\na dictionary\nthis value will create a dictionary\nwith the given syntax so value 1\ncomma\nk2\nvalue 2 and so on so it forms it i mean\nokay\nright\nso directly we can so we can create a\ndictionary an empty dictionary and we\ncan create a dictionary by specifying\nthe key value pairs in a curly braces in\na single line and we can create a\ndictionary with specifying the multiple\nelements and specifying each element in\na single line and also with the help of\nthis dictionary function\nand next\nwe can also create a dictionary\nusing comprehension\nso we have seen this\nlist comprehension\nso based upon the expression\nthe dictionary will be\ncreated\nso we have to specify\nan expression\niteration\ncondition\nso we have to follow the same order\nso\ndictionary is equal to\nexpression\nspace followed by\niteration\nspace followed by\ncondition\nso this is the syntax for creating the\ndictionary with the use of\nlist dictionary comprehension for\nexample\nlet me explain it with an example\nsome x\npairs with so this is a key value page\nso we have to specify the key\nand\ncolumn and value\nso\nx star 2\nfollowed by\nfor x\nin\nrange\n5\nand here this condition is an optional\nhere the condition is an optional so we\ncan use or we may not use so let us take\n[Music]\nif\nx\nmod 2\nis equal to is equal to 0\nso this implies we have to give the x\npay\nfor all the values of x in between 0 to\n4\nwhich which are nothing but which mod 2\nis not equal to 0\nmeans\nsimply it will fill\n0\nit forms a pay comma\n2 it forms a pay\n4\nand finally 4 it forms a page 16\nso it will give a result as this one so\nx colon x is double star 2 double star\nis nothing but our exponent operator so\nit will be treated as x square\nso 0 0 square 0 2 2 square 4 4 4 square\n16 so because here we are giving the\ncondition x mod 2 is equal to is equal\nto 0 that means whatever the elements\nwhich are modulus 2 is equal to is equal\nto 0 so first the iterations will be\nexecuted and based upon the condition\nthis will be inserted into the\ndictionary so this is called the\ndictionary comprehension so by creating\na dictionary we can specify the\ncondition and based upon the condition\nwe can create an elements into the\ndictionary\nright so if you are not specifying this\ncondition so here the condition is\noptional if you are not specifying this\none so then the result will be\n0 0\n1 1\n2 4\n3 9\n4 16\nso this is the result for\nthis comprehension\nright so first always the iterative\nstatements will be executed then\nbased upon the condition if you are\nwriting any condition that condition\nwill be\nverified and if that condition is true\nthen only the page will be formed and it\nwill be created in the dictionary so\nthis is how\nthe dictionary comprehension will be\nworking so with the help of dictionary\ncomprehension also we can create a\ndictionary\nright so hope you understood this\ncreation how to create a dictionary now\naccessing\nhow to access\nthe elements or items of a dictionary\nso coming to this previous\nsequences like list tuples are set so\nwith the help of\nindex values will access the elements so\nhere we are having keys and values a\npair of elements we will be considering\nas a single item or single element\nso we can access the values of a\ndictionary with the help of keys\nso here there is a no concept of index\nvalues\nright so here we are having the keys and\nvalues\nso\nby using with the help of keys we are\ngoing to access the corresponding values\nsee\nso with the help of keys\nwe can access\ncorresponding\nvalues\nright so we can see that\ndictionary is equal to\nname\nabc\nd u p t\nc s c\nr number\none\nso there are three\nkey value bits okay so this dictionary\nforms three key value pairs if you want\nto access these values that can be done\nwith the help of the corresponding case\nso\nd i c t\nof\nand he also will use the square braces\nfor accessing the elements so in the\nsquare process instead of writing this\nindex values here we will write the keys\nso dictionary of\nname\nsimilarly dict of\ndepd so this is string so we have the\nenclosing square\nquotations\ndictionary of\nour number so this will return abc as a\nresult\nand this will result return cse as a\nresult\nand this will return our number as a\nresult\nokay so this is how we can access the\nelements of a\ndictionary\nso this with the help of the keys so all\nthese are the keys okay so all these are\nthe keys that means the left hand side\nwhich we are writing\nto the column those will be cancelled as\na keys and right hand side are the\ncorresponding values so with the help of\nkey names we will use the\nwe'll get the values of that\ncorresponding keys and also there are\nthree methods so which we are going to\nsee in the further sessions so\nitems is one of one method\nitems is one method which will return\nall the elements all the key value pays\nkey value pays it will return i mean it\nwill display all the key value base of\nthe dictionary\nand values\nit will return all the values of a\ndictionary\nall the values of dictionary similarly\nthere is a methods called keys it will\nreturn all the keys of the dictionary so\nthese methods will see in the\nfurther sessions so just i'm saying for\nthe\njust for an idea so there are different\nmethods like this to\naccess all the elements at a time from\nthe dictionary so items values and\nkeys\nright so this is how we can access the\nelements or items from the dictionary so\nhope you understood these sessions\nso dictionary it's a\nkey value b\nso we have to write the multiple\nelements that means a multiple key value\nbase separated with a comma enclosed in\na curly braces\nso\nkey\ncolumn and we have to represent this key\nvalue pay with the help of a column\noperator so key column\ncorresponding value so key 1 value 1\ncomma\nkey 2\nvalue 2 comma and so on so this is the\nrepresentation of a dictionary\nso\nexample let us take an example\nsome name\na b c\nsome r number\n20\nso let us take only two elements so\nthese are called elements and these two\nare the keys and these two are the\nvalues so how to access all these\nelements so this is how we can create a\ndictionary so this is how we can create\na dictionary and\nhow to access the elements we have to\naccess the elements\nwith the help of\nkeys\nso instead of using the indexes here we\nwill use the keys\nso if you access the with the help of\nthe key the corresponding value will be\nretrieved\nright now in today's session we will see\na few concepts a simple concept that is\nadding\nnew element to the dictionary\nmodifying the existing element\ndeleting an element\nso we'll consider one dictionary then\nwe'll see how to add a one more element\nthat is a new key value pair into the\ndictionary and\nhow to modify the existing element so\nalready we are having a few key value\npairs we will consider some example so\nhow to modify\nand deleting how to delete the elements\nso how to delete a single element and\nhow to delete\nmultiple elements or how to clear all\nthe\nelements right so one by one we will see\nand then we'll go with the\nimplementation part so i will show you\nhow to create how to access and how to\nadd modify and delete in the python\ninterpreter right so\nfirst one is adding\nlet us take an example some d is equal\nto so let us take a\nname\nabc\nnumber\n23\nbranch\ncs right so here we are having a\ndictionary with a three key value page\none is a name number and branch\nso here the keys are\nname\nnumber\nand a branch\nvalues are\nabc\n23\ncse\nright now how to add a new element so in\norder to add a new element simply we can\nwrite the syntax\nas\nd of\nso the dictionary of\nthe key\nis equal to\nvalue\nso these are the\nnew key value pair so these are the new\nkey value base\nso\nwe can write if you want to add one more\nelement into this dictionary you can\nsimply write it as\nd of\ncourse\nis equal to\nbt\nso if you add this one\nso this is a new one so course is not\nthere in the existing keys and the\nbidding is not there in the existing\nvalues so if you write this one and\nafter print this one\nso you'll get all these elements\nincluding\nthe new thing course\nright\nso a simply by using\nas an assignment operator we can add an\nelement into the dictionary\nright so\none one once again i am repeating that\nhere instead of using the index values\nhere we will use the\nkeys\nokay in order to access the elements or\nadding the elements or deleting the\nelements or modifying elements we'll use\nthe keys so the corresponding\nuh values will be modified or updated\nright so this is how we can add an\nelement a new element a new key value\npair into the dictionary now let us see\nhow to modify\nso how to modify\nsimply so in order to modify also we\nhave to use the existing key and that\nwill be done with the help of assignment\noperator\nso\nso existing key\nis equal to\nnew value\nexisting key is equal to new value\nsee\nif you use here in the above example so\nin the error example we are having\nsome\nfour\nkeys now name number branch and course\nso i want to update this\ncourse right\nthen simply d of\ncourse is equal to\nmpeg\nthen if you print this one\nif you print this d\nsimply the course value will be updated\nso for everything\nwe have to use the keys\nokay then\ndeleting the elements\ndeletion so how to delete so here also\nwe can use\ndl method\na dl keyword\nand\nclear function\ndl keyword and a clear function so first\nlet us see the del keyword so if you\nwant to delete any one element or any\none key value you pay from the\ndictionary we can use this delete deal\nso this is used to\ndelete\none or\nmore elements\nand\nthis will delete\nclears\nall the elements\nright so the syntax for this one is\nd e l keyword followed by\ndictionary\ngiven\nkey\nso that that will be deleted that\nelement will be deleted that kind of\nright\nor simply\nso this will delete\nthe given kp\nand dl\ndact it will removes\nthe dictionary\nfrom memory so that means everything\nwill be deleted\nit removes the dictionary from the\nmemory\ndgn dictionary so here we are not\nspecifying any keys so\nit will delete everything\nsimilarly\ndeict\ndot\nclear function\nit will clears\nall keypads\nall key value pages\nfrom\ndictionary\nso three ways we can delete an element\nfrom the dictionary so one is d l\nkeyword so d e l followed by the\ndictionary\nwe have to specify the key\nright so instead of using the index we\nhave to specify the key so that that\ncorresponding key page will be deleted\nand del dictionary it removes the\ndictionary from the memory itself so the\ncomplete everything related to the\ndictionary will be deleted\nand dictionary.clear function it will\ncreate clears\nall the key value page from the\ndictionary\nright so hope you understood this one\nand now we'll see the implementation of\neverything\nin python interpreter so we will see how\nto create a dictionary\nand we will see how to access the\nelements of the dictionary and we will\nsee how to add how to modify and how to\ndelete all these things so dl keyword\nand a clear function so that your doubts\nwill be clarified right\nright now we will see\nthe implementation part of the\ndictionary concept so first we will\ncreate a dictionary\nso we know that the dictionary is a\ncollection of key value pins\nright which are enclosed in between the\ncurly braces separated with a comma\nsee so d is equal to the curly brace is\nopen we have to write the keys\nso\nname and we have to specify the key\nvalue pair with the help of for this\ncolumn operator so key column value\nwhere we have to write\nthe value\nseparated with the comma multiple\nelements will be separated with a comma\nso r number\ncolon\n23\nbranch\ncse\nright\nso this is how we can create a\ndictionary so now a dictionary is\ncreated with a three key value page so\nthat is a name\nr number and a branch so now if you\nprint this d you can get all these\nthings\nokay so\nnow so this is how we can create a\ndictionary\nand\nhow how can access the elements\nthis key value page so in the previous\nconcepts that means if you consider the\nlist concept\nso we will access the elements of a list\nwith the help of a index\nhere\nwe will access the elements of a\ndictionary with the help of\nkeys\nso similarly the same the syntax is same\nbut instead of using the index we will\nuse the keys so if you access the\nname so d of\nprint d off\nyou have to give the name\nthen automatically that particular value\nwill be\nwritten that particular value the\ncorresponding value will be printed\nsimilarly\nprint of\nd of\nr number\nso we can't access the keys with the\nhelp of values\nokay we can access the elements only\nwith the help of\nkeys so here the keys are name\nr number and a branch see i will show\nyou\nso if you access this one\nso it will consider as a key and it will\nreturn an error\nokay key error because here a b c\nwe know that abc is a value but\ninterpreter will consider this as a key\nwhich is not available in this\ndictionary\nso it returns a\nkey error\nso\nthis is how we can create and access the\ndictionary elements\nand if you add one more element in the\ndictionary so that is also with the help\nof\nthis one what is the syntax the\ndictionary followed by the new key\nis equal to new value by using the\nassignment operator we can add more\nelements\ninto the distance\nso just i i will add one more element so\nd of\ncourse\nis equal to\nbtec\nright so already course is not available\nin the dictionary\ncourses are not available in the\ndictionary\nso we are\nnow adding that course into the\ndictionary concept so if you print d\nwill get a four elements name r number\nbranch\nand a course\nand one more thing we have to remember\nthat the keys should be identical the\nkey should not have any duplicates so\nsee if you give a duplicate key\nso d of\nsee here ah\nthis is a way how can we add the\nelements\nokay now we will modify and later we\nwill see the\nduplications\nright so just will modify an element so\nthat is also done with the help of the\nassignment operator\nright so the syntax is same d\ngive the existing thing\ncourse\nis equal to\nempty\nso this will override the value of the\ncourse key\nso if you print this one you can get the\nnew details\nfor the course\nso if you observe here so here we have\ncreated\nan key new key value pair as a course we\ntake\nand in the next thing we are just again\nassigning mtech as a value for the same\ncourse so it will be overriding so no\nduplicates will be allowed here no\nduplicates will be allowed\nright\nnow\nwe will see the deletion how to delete\nso deletion can be done with the two\nfunctions one is a delete operator del\nkeyword and the clear function so if you\nuse a del we have to specify the key\nall right dl\nfollowed by\ndictionary of\nspecify\nthe key\nso it will delete one element\nokay it will delete one element\nsee\nif you print d\nso here we can get only three key value\npage because we have deleted the fourth\none\nnext\nwe will assign this dictionary to one\nmore thing\nso\na is equal to d\nso now all the elements so by using the\nsimple assignment operators we can use\nwe can assign the complete dictionary to\none more variable so now i i am\nassigning the variables i mean the\nelements of d\nto element to a now a is also a\ndictionary with the same elements\nright now let us use a del command e l\nd\nso it will remove the dictionary from\nthe memory now if you print this d\nyou will get an error name d is not\ndefined because\nd is deleted from the memory\nnot and not in it\nnot clears the elements but it will\ndelete completely from the memory\nright so we are having one more\ndictionary a so here we will use a dot\nclear\na dot clear so this will clear elements\nfrom the dictionary but not from the\nmemory so if you print a\nyou'll get an empty dictionary\nokay you'll get then empty dictionary so\nin the previous case if you use a del\nfollowed by the dictionary name it will\ndelete the complete dictionary from the\nmemory so we'll get an error called a\nname error that d is not defined\nand also there is one more method that\nis there so that is a pop we have to\nspecify the key in the pop\nokay so let us create a dictionary with\na duplicate name so that you will\nunderstood some\nname\nabc\nor number\n23\nsome r number\n34\nsee what we have observed so in in the\ncreation we are giving\nname as a key and our number as a key\nand in the name we are specifying abc\nand in the r number we are giving the\ntwo values one is the 23 and one is\nanother one is 34\nso\ntheir\nlast assigned value will be\nassigned to the\nkey so here first we have assigned to 23\nand next we have assigned 34 so only 34\nwill be overrided to the 23 so not both\nso here the one thing we have to\nremember is the keys are\nidentical\nso that means\nthere must be no duplicates in key\nkey should not be repeated\nand the\nlast recently assigned value will be\navailable in that particular\nkey\nso there are different built-in methods\navailable for this dictionary so let us\nrecall the dictionary concept so this\ndictionary consists of key\nvalue pain\nright the key value pay which is\navailable in form of\ntriple\nright and\nthis is a collection of uh this key\nvalue pairs enclosed in the square\nbraces\nuh and separated with a comma right so\nthis dictionary is equal to\nempty square braces this is nothing but\nan\nempty dictionary\nright now we will see different methods\navailable in this dictionary now\nthis is all about the introduction to\nthis dictionary concept we will see the\nmethods\nthe first method\ncopy\nso let us take this d is equal to\ndictionary\nsome name\ncolon\nabc\nsome\nr number\ncolumn one two three\nsome course\ncolumn\nbeating\nso let us take ah\nsee okay\nthis is the dictionary available now\ncopy\nso this will just\ncopy\nthe\nkey value page\ninto\nanother variable\nso that means if you apply this d dot\ncopy\nautomatically have one more copy of this\nkey value face will be available\nso\nthe same thing will be available\nwhatever here that the same thing will\nbe available here and if you assign this\nto another variable\nsuppose a is equal to d\nthen\na will be having the same thing that\nmeans similarly i mean this is almost\nequal to a is equal to\nd\nso all these three key value base will\nbe assigned to a also that means a copy\nwill be created a reference so in python\nthere will be no other memory will be\ncreated so for the same memory one more\nreference will be applied so a will be\nreferenced to the same\nkey value page\nin this case copy\nnow\nclear\nso the name itself indicates\nclear function will clear all the items\nin the dictionary so we call this key\nvalue page in the dictionary as a items\nso it will clear\nor it will remove\nall key value pays\nall the key value pays so after applying\nthis clear so this will be\nd dot\ncopy so that means a dictionary dot copy\nthat's index and this index is d dot\nclear where d is a dictionary d is a\ndictionary right dictionary variable dot\nclear so it will use\nan empty dictionary as a result\nan empty dictionary as a result because\nit will clear all the items of the\ndictionary\nitems\nwe we just now we have seen that this\nkey value pair is called as a item in\nthe dictionary concept so these items\nit will\ndisplay\nall the key value pays\nall the key value pairs available in\ndictionary\nright\nso it will give a complete b d dot\nitems\nd dot items the syntax is d dot items so\nthat means see here we are not taking\nany argument here we are not taking any\nargument here also we are not taking any\nargument so there are no argument zero\narguments just we will call these\nfunctions with the help of\nthis dictionary name d dot items dot\nclaire d dot com similarly\nkeys\nso in the dictionary concept the first\none if we call it as a keys and the\nsecond one we call it as a values so all\nthese first\nattributes we call them as keys so this\nfunction will give all the keys\navailable in the dictionary so\nhere also we are giving\nnothing as a argument zero arguments so\nthis is also called with the help of the\ndictionary name so it will give or it\nwill display\nall the keys\nin\ndictionary\nthe syntax is b dot\nkeys\nso here also there are no arguments zero\narguments\nand the next one is\nvalues\nvalues so the second one in the key\nvalue pair the second one is a value for\nthe given attribute so\nthis values method will display all the\nvalues of the dictionary\nright\nthis will display all the values of the\ndictionary\nand\nhere also we are not giving any\narguments it doesn't take any argument\nzero arguments right\nand it is it is called the help of the\ndictionary name right so it displays\nall the\nvalues in\ndictionary right so this is called with\nd dot\nvalues\nso\nthis will give the same\ndictionary this one and this will give\nthis name only these keys name our\nnumber course right this will use\nabc123 and b date\nright so first i will explain all this\nthing and then later we'll implement\nthis by using the python interpreter so\nthat you will you will get clarified\nabout all these\nuh methods\nright so these are the few methods\nand\nnext we we'll go with the next one\nthe next one is update\nupdate method\nso this update method will take\nan argument\nas a dictionary so this is used to\nadd\none or more key value page into the\ndictionary\nit is used to add\none or\nmore\nitems\ninto\nexisting dictionary\nright so let us take this one example\nso this syntax is\nfor this update is so update\nsorry d dot update so here this is a\ndictionary name\nso d dot update\nopen the curly brace and here you can go\nwith the key value piece which we want\nto add for the existing one\nso\nhere i will take a branch\nright\nand also i will take\nsome\nplace\nright see here i have taken\nthis\ntwo items which are not available in the\npresent dictionary so here we are having\na dictionary with three chemistry values\npage name odd number course and branch\nand place are not available in the\ndictionary now by using this update we\ncan add these two key value pages into\nthe existing dictionary for that we have\nto take we have to pass this dictionary\nas a parameter to the update method\nright and see here we have to give the\nkey value pace\nplaced in curly braces this is very\nimportant\nso we have to place this one in curly\nbraces then only this update method will\nbe\nvaried\nokay so this one is a\nsay d dot update\ncurly brace\nkey\nkey one\ncolumn\nvalve one value one\ncomma\nk two\ncolumn\nvalue two comma and so on\nclose this curly brace this one so this\nis the syntax for\nthis update method so hope you\nunderstood this update method so this is\nused to insert more one or more items\ninto the existing dictionary now we got\nwith the another one\ndelete so how to delete an item from the\ndictionary\nso for that there are two methods that\nis a pop and pop item\nso first let us see this pop right pop\nfunction so this is used to\ndelete or remove an item\nfrom\ndictionary\nand it will return\nthe\nitem or the value\nreturn the value\nwhich is removed\nright it will return the value which is\nremoved so value\nof a key\nwhich is\nwhich was removed right so here there\nwill be one argument that is\nkey so there may be two arguments so\nsyntax i will give you the syntax for\nthis uh pop so d dot\npop you can give a key comma\nvalue so we can give it to both the key\nand value and this value may be optional\nso that the value may be given or may\nnot be given so if you give only the key\nthen automatically that particular item\nwill be deleted and that particular\ncorresponding value will be returned as\na result\nright so if you delete deep dot pop off\nlet us take a course\ni'm just giving only one\nargument that is also a key\ncourse is a key so the result of this\none is\nbeat it\nit will return the value of\nvalue corresponding to the\ngiven key it will return the value\ncorresponding to the given key which was\nremoved now if you immediately\nprint this d\nwe'll get only\nthe two\nitems that is named\nabc\nand our number\none two three only two items will be\navailable\nright the third item is removed and that\nvalue will be returned so this will be\nthe result for this method\nokay you can use the value or you may\nnot use the value so this is an optional\nargument it is an\noptional\nargument\nwe can specify we mean we may not\nspecify\nright so this is all about this pop pop\nfunction it will take two arguments and\nthe next one is\ntop item so if you don't know about the\nexisting\nkey values or existing items available\nin the dictionary\nif you don't know about the\nexisting key value page in the\ndictionary then directly we can go with\nthe pop item so it will remove\nthe recently\ninserted item\nthe recently inserted item so in this\nexample what is the recently assigned\nitem this course btec is recently as\nit's an assigned item right so name will\nbe seen second one is our number the\nthird one is a course b day so this item\nis the recently inserted item in the\ndictionary so this will be deleted and\nthe same thing the value will be\nreturned\nso the\nthank value\nright so the value of remove key value\npaid will be returned\nso simply the syntax is\nso here we we are not giving any\nargument so we don't know about the keys\nwe don't know about\nwhat are the keys available in the\ndictionary then we will directly go with\nthe pop item\nso d dot\ntop item so no arguments are given so\nimmediately what is the result here\nthe result is\nbeaten\nbecause the recently added item is\ncoarse bitten\nnow\nif you bring the d\nthen we will get\nonly the two\nitems\nonly two items we will be getting\nonly two items will be getting\nright so these are the\nthis is a\nuse of pop item method now\nwe will go with another method\nget method\nget method means\nit is used to\ndisplaying the corresponding value so\nhere it will take one argument\nthat is\nkey\nthat is a key\nright so the syntax is d dot\nget off key so automatically it will\nretrieve the value of the given key\nit will display\nthe value of\ngiven\nkey\nright so here it is then only one\nargument so example\nif you use some d dot\nget\nr number\nd dot get r number so\nin the dictionary d what's the value of\nthis r number one two three so it will\nreturn one two three as a result so get\nmeans retrieving the values of a\ngiven argument key it will here key is\nonly one argument taken\nright next\nfrom keys\nfrom keys so here it will take two\narguments one is a tuple of keys so here\nremember\nall the keys can be formed as a tuple\nbecause a tuple is a constant\nright so it is a\nimmutable so we can't change the values\nof keys so\nall the keys can be formed as a tuple\nand we can pass that triple as in one\nargument and the second argument is a\nvalue which will be applied for all the\nkeys in the triple let me explain here\nso\nhere the two arguments\ntwo arguments\none is a tuple\nwith the keys\nanother one is a value\nfor all keys\nthe same value for all keys\nthe syntax for this one is\nso first let us form a tuple\nlet us form a to pull so\nlet it be\nt is equal to\na\nb\nc\nt is equal to a b c\nright and\nlet it be the same value to be assigned\nfor all these three keys so a value can\nbe v\nv is a value that can be zero so we have\nto initialize a zero for all the keys\nokay we have to initialize the value\nzero for all the keys then\nyou can go with d dot\nfrom keys\nd dot from keys\nfirst one is a tuple\nor a sequence\nso we can also give the sequence\nright so we can also give a string\nright now here we are giving a tuple so\nin in between the parenthesis we are\ngiving the three characters so it is a\ntuple so we can pass this t comma\nthe value\nv so that means 0\nvalue 0\nso this will give a dictionary\nwith key\n0 comma\n0 comma\n0\nso this will give the same value for all\nthe keys in the given sequence\nso here the sequence is triple we are\ngiving so here in the tuple we are\ngiving the three values three elements\nthese three elements are keys and we are\nassigning only one value for all these\nthree elements so\nthis result d dot from keys t is 0\ngives t is having three elements so a\ns 0 b\n0 c as in 0\nso this is the key this is the value if\nyou want to give the same value for all\nthe keys we can go with this from keys\nright then\nand the last method is a set default\nso last method is a set default\nso this is will also take\ntwo arguments\nfirst one is the key\nsecond one is a\nvalue\nif the key is already existed in the\ndictionary there will be no change\nand if this key is not available in the\ndictionary this newly inserted\nkey will be\napplied to the dictionary see\nd\ndot set default\nand giving our number\none to three\nright so this is the syntax for this one\nset\ndefault\nkey comma\nthen\nso set default key comma value so here i\nam giving our number one two three\nsorry four five six\nr number four five six first\nthis function will check for this key\navailable in the dictionary if this key\nis available in the dictionary then this\nvalue will not be changed and this will\nbe the result 123 will be the result\nokay that value will not be changed\nif the key is available in the\ndictionary\nand if this key is not available in the\ndictionary\npercentage\nthen this will be inserted into the\ndictionary right now 90 will be written\nand if you print d\nyou will get\nname is equal to abc\nour number is equal to one two three\ncourse\nis btec\nand now the percentage\nis\n90\nthis will be inserted with the given\nvalue\nthis will be inserted with the given\nvalue so this is a set default\nso if this key is available in the\ndictionary there will be no change and\nthat value will be returned there will\nbe no change nothing will be done\nand if this key is not available in the\ndictionary\nthen\nthat will be inserted into the\ndictionary\nin such a way\nright so this is all about this\ndictionary methods a few methods so we\nhave seen a copy clear\nnext items keys values\nget\npop\npop items\nupdate from keys\nand\nset default so all these are the\ndifferent methods available in the\ndictionary\nso now we have seen the syntax for all\nthese methods and the working of all\nthese methods and now we'll see the\nimplementation how actually the work is\ngoing to be done while implementing\nthese methods by using the interpreter\nso let us move on to the interpreter\nhello friends\nuh just now we have seen different\nmethods available in the\ndictionary\nnow we will see the implementation of\neach and every method\nfirst of all\nlet us create a dictionary so i will\ncall it as d is equal to\ncurly braces so we know that dictionary\nelements will be a key pair values a key\nvalue page separated with the comma\nenclosed in a curly braces so so i'm\njust taking an example name\nsome abc\nsome r number\nsome one two three\ncourse\nyes so just now i have created a\ndictionary now let us check it once\nprint of d so this is a key value pair\nwe know that this name r number and a\ncourse all these are the keys and a b c\none two three and b tag are values now\nlet us check one by one first of all uh\ni will show you the copy function so it\nwill create a copy of this dictionary so\nsome\nb is equal to\nb dot\ncopy\nso that so a copy of d will be assigned\nto variable b\nnow\nlet us print b\nso\nit's a copy of g\nthat's nothing but b is equal to t\nright it creates a copy of a given\ndictionary and if you are assigning\nit to the any value or a variable so\nthat will be assigned to that particular\nvariable right now clear so it will\ncreate all the elements of the\ndictionary now i will give you an\nexample b dot\nclear\nso it will create a clear all the key\nvalue page\nfrom the dictionary so if you\ntry to print this b you will get an\nempty dictionary because previously\nwe had a three key value pairs in the b\nand after executing the b dot clear we\nare having the empty dictionary\nright next so we call each key value\npage as items so if you want to display\nall the items from the given dictionary\nwe have to use the method called d dot\nitems so it will give\nthe dictionary items\nin form of tuples the key value pair\nwill be in form of tuples so here name\nand abc both are in a tuple our number\none two three both are in a tuple and a\ncourse and b tag both are in a tuple\nright so here the first one is a key and\nthe second one is the value\nright and if you want to access only the\nkeys then we have to use the method\ncalled keys\nright d dot keys so then it will give a\nlist of all the keys available in the\ndictionary\nright if you want to access only values\nthen d dot\nvalues it will give\nthe complete values of them so abc one\nto play and b data all these three are\nthe\nvalues of the given dictionary so if you\nobserve this\nd you can know that the key value pair\nname ivc are number one to the course\nbeta\nthen if you want to get a value for a\nparticular key then we have to go with\nget method\nso d dot get off here we have to place\nthe key so if you want to access the\nname\nso just\ngive the argument as name right then\nwe'll get the value of the particular uh\ngiven\nkey right here we have given a key as a\nname so we have to get the value for the\ngiven key so abc is the value for the\ngiven\nkey name\nright next\ntop function\nright top\nso get sorry sorry d dot\npop here we have to give\nthe\nwhatever the key value pair which we\nwant to delete that should be given so i\nwill give you\ni will give\nsome course\nsorry this is a\ncourse\ncomma what's the value here\nbeat it\nso it will\ndelete the particular\nkey value paid and it will return the\nvalue which\nwhich was deleted here if you try to\nprint this again after deleting you you\nwill get only two items so before we had\nwe have this three items name our number\nand a course and then we are applying\nthe pop operation part means ability so\nhere it will take two arguments as a\ninput one is a key second one is the\nvalue\nso whatever the\ngiven key value pair in the pop that\nwill be deleted and the value will be\nreturned\nright next\nif you don't know about\nthat particular key value pays you can\ndirectly go with pop items\ntop item so this method will delete the\nrecently inserted\na item\nsee what is the recently inserted item\nour number one two three so first we\nhave uh created name then our number\nthen course so already we have deleted\nthis course then recently added or\nrecently inserted uh item in the\ndictionary is r number so it will be\ndeleted and that will be returned so if\nyou print this\nafter a pop item you will get only one\nkey value pair\nright hope you understood this one also\nthen we'll go with the\nfrom keys\nso d dot\nfrom keys\nhere also we have to give the two\nparameters one is the key\nanother one is the value\nright so\nhere\nit takes this first one as a key and\nsecond one as a value\nright\nthe first one as a key and second one as\na value so here it forms a dictionary\nwith all the keys with the same value\nsee\nm\na m e here it creates a four items with\na different values or with the same\nvalue right the same value will be\napplied for all the keys\nsee\nlet us take\nexample\nsome a is equal to\nwe have to consider these keys\nin\ntuple right so i will consider it as a\nb\nc\nright\nsorry i have taken a so let us take d d\nb sorry\ne b c\nright so if i want to give the same\nvalue for all these keys d dot\nfrom keys\na\ncomma\nabc\nso it will give\nthe page so it will form a page\nright so whatever the case we are giving\nin the tuple\nfor all the items it will give the same\nvalue so abc will be available i mean\nabc is defined for all the keys\navailable in this tuple a\nright\nso if you want to give the same value\nfor all the keys then we have to go with\nfrom keys\nnext set default so we have to set a\ndefault value so if the key value page\nis available so first let me uh we will\nuse the update method so if you want to\ninsert more number of\nitems so here we are having only one\nelement\nso print of d\nwe are having only one thing so d dot\nupdate so here we have to take\ncurly braces and you have to give\nthe\ny key value pair\nso 1 2 3\nso comma\nnext\ncourse\nwe take\nright\nclose\nso i have completed\nthen\nso if you observe here so we have\nupdated the d with\nagain a few more elements so previously\nwe are having only one item one key\nvalue there that is only name and after\nupdating this r number and course now\nthe d is having the three key value page\nright so that by using this update we\ncan update a more number of items into\nthe existing display now we can set a\ndefault value for the key specified so d\ndot\nset default\nhere we have to give the key and value\ntwo parameters so let us let us take our\nnumber\ncomma give the value so let it be\ntwo five\nfour\nso already this r member is available in\nin in the dictionary right our number is\navailable and the value of part number\nis one two three in such case it doesn't\nchange anything\nthe set default will doesn't change\nanything if this r number is not\navailable so see i will just\ndelete that one\npop\nr number\ncomma\nso it will delete it right so the second\nvalue\nthe second argument that is a value is\noptional and just giving the key number\na key key name so that it will be\ndeleted now if you observe this print\nso we are having only two things there\nis no r number now i will apply the set\ndefault method\nset default\nright now i i just want to give a\ndefault r number as\n254 so now our number is not available\nin the dictionary so it will be created\nnow\nit will be created now so if you print\nthis d now you can get the r number\ninserted at the last with the given\ndefault value so by using this set\ndefault also we can\nadd the new\nkey value pair\nso if this key value i mean if this key\nis available in the dictionary the old\nvalue will be remain same that means it\ndoesn't change anything\nright so these are the different\nmethods we have seen in the today's\nsession that means that means\nthese are the methods can be applied for\nthe dictionary\nso the\nmajor usage of writing these functions\nis reusability in order to achieve the\nreusability\nso reusability means once we write any\nfunction that function can be called a\nnumber of times that means we can use\nthat function in many programs right so\nso in order to rewrite any logic we can\nwrite a single generalized function and\nwe can make use that function number of\ntimes\nand also\neasy debugging that means\nthe finding and rectifying the errors\nwill be easy for the user if we write\nthese functions\nso in the absence of functions\nif any program\nneeds more lines of code\nor more complex logic then it would be\ndifficult to find the errors in case of\nlogical error it is somewhat difficult\nto find the logical errors right so if\nthat can be written in functions then\nautomatically\nthis debugging process will be easier\nfor the user\nright\nso\nthe major reasons to writing the\nfunctions is reusability and for easy\ndebugging\nnow\nso\nsimilar to the variable in c language we\nhave seen the function\ndeclaration\nnext function call\nnext function definition\nso this we have seen in c programming so\nhere\nwe can avoid this declaration\nbecause\nso first we have to start writing the\nfunction definition and then we will\nwrite the actual program so here we are\nnot writing the many main functions so\ni i am\njust mentioning as a\nactual program right instead of using\nthe main function and i am using the\nactual program so first we have to write\nthe function definition and then we have\nto write the actual program where this\nfunction call is included so that's why\nthis function declaration is not needed\nin python programming\nright so\nhow this function definition can be done\nso here in the function definition so\nlet us see that\nso what are the parameters involved in\nthe function definition\nfunction definition so first one is\nevery function\nshould start with\ndef keyword\nso we are having the def\nkeyword so all the function functions\nshould start with df keyword and\nevery function\nshould have a name\nshould have a name\nnot\nequal to\nany keyword\nso the same rule we have applied in c\nlanguage right so we have to give one\nname specific name to the function\nbecause this is the user defined\nfunction\nso the user is writing the function so\nwe should give some name and that should\nnot be equal to any one of the keyword\nso\nwe have discussed the keywords in the\nprevious session so just go through that\nkeyword session so this name should not\nmatch with any one of the keyword\nnext one is parameters\nor we can call them as arguments\nso parameters or arguments are nothing\nbut the inputs given to that particular\nuser defined function\nso this is an\noptional this is an optional so every\nfunction\nmay have the\nparameters or arguments or may not have\nthe parameters or arguments so it can\nhave zero or more parameters or\narguments and this should be\nincluded\nin between\nparentheses\nright so first we have to\nwrite the definition i mean def keyword\nthen we have to write the name and then\nwe have to write the parameters or\narguments\nin between the parenthesis\nright this one is an optional next\nfourth one\nevery function name\nwith or\nwithout arguments\nshould end with\ncolumn\ncorner so because in our c language we\nare not using the curly braces so\ninstead of representing the block of\nstatements that can be done only by\nusing the indentation so here to achieve\nthe indentation we have to use this\ncolumn\nright\nnext\nevery function will be having some\nreturn so that return can be any value\nwritten or\nan empty return so finally the control\nwill return to its calling function\nso every function will return to its\ncalling function that may be an empty\nreturn or\nin any\nvalue return right\nso return\nright it can be\nempty or a value return\nso in c language every function will\nreturn only a single value\nright it cannot\nthat means a function cannot return the\nmultiple values\nbut here in python programming\nso function can return multiple values\nto the calling function that is done\nonly by using tuples\nin the form of tuples right so\nin case of returning the multiple values\nthat will be done only by using triples\nso here\nthe multiple\nreturn can be accepted\nmulti-value return\ncan be\ndone\nusing tuples\nright so these are the some important\npoints while writing the function\nfunction definition right so first it\nshould start with the def keyword next\nit it should have some name which is\nwhich does not match with any one of the\nkeywords and then we have to write the\nparameters that means inputs to the\nfunction that may be an optional thing\nand these parameters or arguments must\nbe included in between the parenthesis\nand after the parenthesis every function\nshould end with\ncolumn so this gives the indentation\nthat means a block of which represents\nthe block of statements\nnext\nevery function will return the control\nto its parent function calling function\nso that may that can be an empty return\nor a value return\nhere the multi-value return can be done\nthat means one function can return\nmultiple values and that can be done\nonly by using triples\nso hope you understood this function\ndefinition right now let us move on to\nthe function call\nfunction call so\nas we discussed in the c programming\nwe have to write this function call in\nthe main function or some parent\nfunction that is called as calling\nfunction\nright so here also while writing the\nprogram we have to\ndeclare this function call and by\nwhenever the control executes this\nfunction call automatically the control\nmoves to the function temperature\nright see\nso here the function call also have\nfunction name\nhere also the function name\narguments\nor parameters\nokay the only thing is these function\nname and our parameters should be\nequal\nto the function\ndefinition\nright so this one the same function name\nshould be written in function definition\nand the same number of arguments or\nparameters should be written in\nfunction definition\nright the number of arguments should be\nequal in both the function call and\nfunction definition and the function\nname should also be equal in both\nfunction name and function definition\nright and this function this function\ncall will be written and whenever the\ncontrol becomes executes this function\ncall automatically the function\ndefinition will be executed so let us\nsee an example so that you your\nthe doubt will be clarified right\nand as i said before\nhere there is no question of function\ndeclaration because the function\ndefinition will always start at the\nbeginning\nso first we have to write the function\ndefinition then only we have write the\nactual program see\nfunction\nto add\ntwo numbers\nfunction to add\ntwo numbers\nso first we have to write the function\ndefinition right so function definition\nwe have to write df\nsome add\nwriter parameters some a comma\nb\nuse the column because this represents\nthe indentation now here we can write\nsum is equal to\na plus\nb\nand next we have to write right term or\ndirectly we can write a plus b and\nreturn right\nwritten\nsum\nright now write the actual program\na is equal to\ntypecast because the input function\nalways take the string\nenter\nfirst\nnumber\nnext b is equal to\nso reading the two values input values\ninput\nenter\nsecond number\nnow\nwrite the function call\nresult is equal to\nadd of\na comma b so this is a function call\nhere c the function name in both the\nfunction definitions are equal the\nnumber of parameters in both the\nfunction definition function call are\nequal so here we are passing two\narguments here we are calling the two\narguments\nnow\nprint the result\nprint\nresult\nis equal to\nis\nso this will give\nour\nresult right first we will need two\nelements so\nthis i am calling as a actual program\nactual program\nthis i am calling\nthe user defined\nfunction\nuser defined function and the actual\nprogram\nright so we have to write the function\ncall in actual program and the function\ndefinition at the beginning of the\nprogram\nright so there is no question of\nfunction declaration\nso hope you unders hope you understood\nthis simple concept the introduction\nbasic introduction of functions in\npython\nsee the main difference between the\nlocal and global variables is\nscope scope of local variables\nwill be\nonly within the function\nwhere the variables have been declared\nso here we we can call it as declare dot\ninitialized right\nnext\nglobal\nscope will be\nand\nthroughout the program entire program\nright so how this variable can be\ntreated as a global variable how these\nuh\nvariables can be treated as a local\nvariables\nsee\nso in c language we have seen that what\nwhatever the variables we are declaring\nabove the main function will be\nconsidered as a global variables so here\nalso\nthe topmost variables that is above the\nuser defined functions are treated as a\nglobal variables see\nexample let us take an example\na is equal to some 20\nright\nnext\nso\nas we have seen in the previous\nsession\nevery user defined functions should\nstart with def keyword bef followed by\nfunction name\nright\ndisplay\nso here there are no\ncurly braces so\nwe have to represent a block of\nstatements by using indentation so that\ncan be done by\nplacing the column after the header\nnow let us write the\nprint\na\nso this is this ends the\nhere's a different function so here i am\nwriting the normal function that is\ndisplay so let us write here\ninside\nuser defined\nfunction\na\ndisplay just this is a function call\nnext i am writing the print\ni am printing the\noutside the\nuser defined\nfunction\nright\nso this is a small program\nwhich gives an example for\nglobal variables see here\nalways a function that is a user defined\nfunction should be written\nat the top most right so after the user\ndefined function only we have to write\nthe function call\nso here\nthe variables which are initialized\nabove the user defined function are\ntreated as a global variable so this one\nwill be treated as a\nglobal variables\nand after the user defined function the\nfunction call should be written\nright so this is the function call so\nthis is the inside the user defined\nfunction now a is written just above the\nuser defined function so a is a global\nvariable so a value can be used in the\nentire program that means it can be used\nin both the user defined function and\nthe main function\nright so for easy purpose just we call\nthis program as a main function right\nthis is the main function and this is\nthe user defined function\nright so here what is the output\nfirst it will display inside the user\ndefined function\n20\nand next it will print outside the user\ndefined function 20.\nso here in the\nuser defined function we are not\ndeclaring or initializing any variable\neven in the main function itself we are\nnot declaring any variable we are\ndeclaring and initializing a variable\njust above the user different function\nwhich will be considered as a global\nvariable and that value can be used in\nboth user defined function and the main\nfunction\nright so hope you\nlocal understand so whatever the\nvariables which are declared in within\nthe function either it may be user\ndefined function or it's a main function\nso that scope will be limited to that\nfunction only\nso in which function we have declared a\nvariable that will be\nonly used in that particular function so\nfor example here let us take\nsome b is equal to 20\ndisplay b is equal to 20\ninside the user defined function\nlet it be right here\nwrite one more print function\nprint\nlocal variable\nb\nright so\nwhat is output here first\ndisplay function will be called the\nfunction call will be executed so that\nso b is equal to 20 print inside user\ndefined function a is equal to 20 will\nbe printed\nright let us take b is equal to 30 next\nprint local variable so local variable\nwill be printed as 30 and then outside\nthe user defined function a will be\nprinted as 20.\nif if\nwe write the same statement here\nlocal variable\nb\nso it will result an error because here\nthe b is not initialized in the main\nfunction\nand b is initialized only in the user\ndefined function so it is a local\nvariable so this one is a local variable\nwhere this scope can be used only within\nthe user defined function so it cannot\nbe used in main function or if any\nvariable is declared in main function\nlet it be c is equal to 40\nand if you try to\nprint the c in a user defined function\nhere also it is an error because here c\nis a local variable so it will be used\nonly within the main function\nso that is the main difference between\nthe local variable and the global\nvariable\nright see\nlet us see one more example\nis equal to 10\ndiff\ndisplay\ncolumn\nprint\nglobal a\nnext\nb is equal to 20\nprint\nlocal\nwrite the main function display\nnext\nc is equal to 40\nprint local c\nprint\nglobal\nea\nright so this is a small example\nsuggest we have seen in the\njust now so here b is a local variable\nso here it will be printed as 10 because\na is a global variable\nlocal variable it's been 20 here it will\nbe printed 40 it will be printed 10. so\nhere a is your local variable sorry a is\na global variable and b and c are the\nlocal variables so b is a locker\nvariable for user defined function and c\nis a local variable for main function\nnow\nso what is the value to be printed if\nthe local variable\nand the global variable are of same name\nright so if the local variable is also\nhaving the same name a is equal to 40\nhere we are printing a\nprint a\nright so if the local and global\nvariable share the same name the first\npreference will be to the local\nvariables\nokay so here a is a 10 which is a global\nvariable and here again we have declared\na which is a local variable and we are\ntrying to print a\nin the absence of this one a will be\nprinted as 10 because it is a global\nvariable so with the presence of local\nvariable\nthe first preference the first\nthe first preference\nis to\nlocal variable\nif\nlocal\nand global\nhaving same name\nif the local and global are having same\nname the first preference is to local\nvariable now here a is a local variable\nand as well as it is a global variable\nnow if you write print in\nthis main function it will print only\nthe local variable output that is here\nthe output will be 40\nand here if you\nprint a is equal to 20\na is equal to 20 here a will be printed\nas only 20\nright\nsee\nc is equal to 20\nd is equal to a plus c\nprint\nd\nsee here c is equal to 20 both of the\nglobal variables a and b a is equal to\n20\nc is equal to 20 both are the\nglobal variables\nright so\ncoming to the main function it will\ndisplay a will be displayed so 20 will\nbe displayed and after that here a is\nequal to 40 so\na will be 40 now and then\nd is equal to a plus c d is equal to a a\nvalue is 40 because the first preference\nis to local variables so 40\nplus\nc\nc\nis not initialized so c is a global\nvariable we have to consider the global\nvalue that is 20.\nso\nthe output will be 60. so here 20 will\nbe printed\nhere again 20 will be printed oh sorry\nhere 40 will be printed\nand the result 60 will be printed\nhope you understood the difference\nbetween the local and global variables\nso the main difference between these two\nis scope where we have to use these\nvariables\ntypes of arguments so there are mainly\nfour types of argument that means four\ndifferent ways we can pass the arguments\nso first one is\nrequired arguments\nsecond one is\nkeyword arguments\nthird one is\ndefault arguments\nand the last and fourth one is\nvariable length arguments\nso as we have discussed in the previous\nsessions what is meant by argument so\nthese are arguments are the inputs given\nto the function\nright so these arguments can be optional\nso we can pass the arguments from the\nfunction call to the function definition\nor we may not pass the function i mean\nthese arguments from the function called\nto function definition\nright see\nfirst let us see one by one required\narguments\nhere\nin the required arguments\nnumber of arguments\nshould be same\nin both\nfunction call\nand\nfunction definition\nand also\npositions\nshould be same\nagain the position should be followed\nright\nso this is the first first point and\nthis is the second point these two\npoints are important here required\narguments that means the number of\narguments which we are passing from the\nfunction call should match with the\nnumber of arguments we have written in\nthe function definition and also\nthe order or the position should be same\nso here we can make this order or\nposition order of arguments must be same\nin both the function call and function\ndefinition\nlet us look at example\nso a function use a different function\nshould always return\nat the above the main function right so\nand it should be started with def\nkeyboard\nso d f\nsome display\na comma\nb\nput the column for indentation\nyou can print here\nprint a comma\nwrite on the main function here\nthat means a function called display\nsome a is equal to 10\nb\nso automatically 10 will be assigned to\nn b 20 will be assigned to b\nright now the output for this one is 10\n20 because here see the first point the\nnumber of arguments should be same in\nboth function call and function\ndefinition so this is the\nfunction call\nthis one is the\nfunction\ndefinition so in the function call there\nare two arguments in the function\ndefinition there are two arguments so\nthose are equal\nand second one the order should be\nfollowed so here a and b both are in\ninteger type and a will be printed here\n10 b will be printed here 20\nright or else\nsee\nright here 10 comma 20\n10 will be assigned to a and 20 is\nassigned to b so here the output will be\n10 and 20. if you replace this one\nwith 20 and 10\nthe output will be\n20 comma 10 because 20 is placed at a\n10 is placed in b because the position\nit will follow the just it will follow\njust the position\nof this arguments in the fourth function\ncalled function definition so the first\nposition is 20 here the first position\nis a so 20 is assigned to a second\nposition is 10 and here the second\nargument is b so 10 is initialized to b\nso a and b if you print a and b 10 and\n20 will be done\nright so\nthis type of arguments we call as\nrequired arguments\nso the number of arguments should be\nsame and the position should be followed\nthe order of\nour position should be followed\nright coming to the second one\nsecond one is\nkeyword arguments\nin this keyword arguments the\ninitialization of arguments which are\ndeclared in a function call\nwill map with the arguments which are\nwritten in function definition based\nupon the keywords not about the position\nhere\norder\nor a position\nis\nnot required\ninitialization can be done\ninitialization\nwill be done\nbased on\nkeywords\nkeyword that means name of a variable\nhere the keyword means a name of a\nvariable\nright\nso let us say example so here once again\ni am saying the order and position is\nnot required so\nrather than giving the order we will\ngive the names to the arguments in the\nfunction call so that it will match with\nthe arguments which are written in\nfunction definition based upon the\nkeywords written\nsee example\ndiff\ndisplay\na comma b\nprint a comma b\nwrite down the main function display\nfunction call\nhere i will write b is equal to 20\na is equal to 10\nright now the output will be\n10 comma 20.\nso this is a function definition this is\na function call so here we are using the\nkeyword arguments so in the function\ncall we have to give the names for the\narguments and initialize the values to\nthe names so here the mapping will be\ndone\nbetween the function definition and\nfunction call\nby means of\nthe keywords or the names so here b is\nequal to 20 so the same name should be\ngiven in the function definition so b\nwill be mapped with the\nargument which you have written in\nfunction definition so b is 20 b is\nequal to 20 now b\nthe 20 is assigned to b here\nand a is equal to 10 and 10 will be\nassigned to a here so the output will be\n10 and 100 so in the first case that\nmeans the first argument that is\nrequired argument we are not mentioning\nhere the names so just we are writing\nthe 20 comma 10 so 20 is always b\ninitializes to a because here we are not\ngiven any names\nkeywords right here we are not giving\nany keywords or names so just it will\nfollow the order\norder of declaration right so if you\ngive the names\nif you give the names\nin the\nfunction call automatically it will\nfollow the keywords not the positions\nright so this is the\nkeyword argument\nso rather than or following the position\nit will follow the\nnames\nhope you understood this one\nnext\ncoming to the third argument\ncoming to the third argument that is\ndefault argument\nhere first thing\nnumber of arguments\nneed not be seen\nthis need not be matched with both the\nfunction call and function definition\nand\nsome of the arguments will be\nconsider\nas\ndefault arguments\nright these two points are very\nimportant with default arguments let us\ntake an example so that you will\nunderstand\ncourse is equal to\nb\nso here in the function definition we\nare taking\ntwo arguments one is name another one is\ncorresponding\ni am printing here\nprint name\nsimilarly\nprint course\nwriting a function call\ndisplay\nname is equal to some abc\ncomma\nhost is equal to\nm tech\nagain i am writing one more\nfunction called\nname is equal to\np q r\nright so if you execute this one\nso here in the function definition there\nare two arguments one is name and\nanother one is course\nso in the function calls here we have\nwritten two function calls one is uh\nfirst in the point\nfirst function call there are two\narguments one is name and other one is\ncodes and the second function call we\nhave written only one function i mean\nonly one argument that is name\nright so here in the second function\ncall the number of arguments are not\nmatching with the number of arguments in\nfunction definition right and some of\nthe arguments will be considered as a\ndefault argument so\nin the second function call the course\nwill be taken as a default argument so\nwhat is the output for this program\nso after executing this first function\ncall we will get\na b c\nm dec\nso this is the first function\nafter executing the second function call\nwe will get\np q r\nb\nso here we are not mentioning any second\nargument but here in the function\ndefinition the second argument will be\ntaking as a default argument so if any\nargument is not matched\ni mean it's not initialized in the\nfunction call the from the function\ndefinition it will be taking the default\nvalue it will be assigned to that\nparticular variable\nso hope you understood here the number\nof elements\nneed not be same in both the function\ncall and the function definition\nand some or some of the arguments will\nbe considered as a default arguments so\nthat will be assigned to the variables\nthis is about the fourth type of\nargument that is\ndefault argument so coming to the fourth\none\nsupport one\nvariable length arguments\nso here the name itself indicates the\nfunction definition will accept the\narbitrary number of arguments that means\nin some situations user may not know how\nmany number of arguments will be taken\nfrom the function call so that's why\nthis in such cases here the function\ndefinition provides\nthe r i mean it will accept the number\nof arguments n number of arguments\nright so here it will have\nit will accept\narbitrary number of arguments\nany number of arguments it can be any\nnumber of arguments and this can be done\nby\nplacing\nstar\nas\nprefix\nto the argument\nof\nfunction definition\nso\nin order to accept the n number of\narguments from the function call\nin the function definition we have to\nplace this\nstar symbol as a prefix to one variable\nso this star represents it will accept\nthe variable length arguments from the\nfunction call\nsee example\nstart with diff\nthe display\nhaving that star\ncourses\ni am printing the courses\nso\nwhen whenever you put this star in\nbetween in front of this variable it\nwill be treated as a\nnumber of values presented in the\ncourses that means simply we can say it\nas a sequential data type right now\ncourses will be having an n number of\nvalues\nfor\ni in\ncourses\nprint i\nright on the function call\ndisplay\nmeet it\nm take\nmca\nnba\nright\nso here in the function call we are\npassing the four arguments\nbut here in the function definition we\nare\ngiving only one argument but in front of\nthat argument we are placing the star\nhere placing the star in front of this\nargument\nindicates that it will accept the\nvariable length arguments so this will\ngive the output as it will print all the\ncourses we take\nm take\nmca\nand mba\nright so it will accept the n number of\narguments to the particular variable and\nit will be displayed\nso this is the variable length argument\nso at a glance i will repeat the four\narguments so there are four arguments\none is a required argument next one\nkeyword argument default argument and\nthe variable length argument so in the\nkey i mean required argument the number\nof positions i mean number of arguments\nshould be same in both the function call\nand function definition\nand it also follows the i mean the\ninitialization will follow the position\nor order of the arguments declared in\nthe function call\nright\nso in the coming to the next one second\none that is of uh\nkeyword arguments so here the num the\nnumber of arguments should be same but\nit it doesn't initialize based upon the\npositions it will be initialized based\nupon the keywords that means the names\ngiven in the functional column\nand coming to the default arguments here\nalso the number of arguments should not\nmay not be same in both the function\ncalled the function definition\nso\nsome arguments will be considered as a\ndefault arguments and that will be\ndirectly assigned to the variables\nso those arguments cannot be passed from\nthe function called function definition\nand coming to the last one that is the\nvariable length arguments here in some\nsituations user doesn't know how many\narguments will be taken from the\nfunction call so in such cases we can\nplace one variable and just add the star\nsymbol as a software i mean as a prefix\nto the\nvariable in the function definition that\nindicates it will accept the multiple\narguments from the function call so in\nthis in this example see in the function\ndefinition we are writing only one\nvariable\nso\nwhich is\nprefixed with the star symbol that means\nit will accept multiple arguments and\ncoming to the function call we are\npassing the four arguments so directly\nthese four arguments will be assigned to\nthis single variable that means we can\ncall it as a sequential sequential data\nright so hope you understood these types\nof arguments\nso now let us see the implementation of\nthese types of arguments in functions\nso as we have seen in the previous\nsession there are four categories of\narguments i mean four types of arguments\nthe first one is a required argument\ndefault a keyword argument default\nargument and a variable length argument\nso coming to the first one that is\nrequired argument in this required\nargument we have seen\nthe number of arguments\nshould be same\nin both the function call and the\nfunction definition\nand also\nthe the initialization will be done from\nthe function call to function function\ndefinition based upon the\nposition of the arguments so we should\nnot change the position of the arguments\nsee let us see the required arguments\nfirst\nso every function starts with def so\nnext following function name\nfollowed by arguments a comma b\nso i have printed a and b here\nnow let us write the display function\ndisplay of 10 comma\n20.\nso if you observe here in the function\ncall so this this one is the function\ncall and in the function call we had uh\ngiven a two arguments and in the\nfunction definition also we had given a\ntwo arguments so this count should match\nin both the function call and function\ndefinition\nand coming to the initialization it just\nfollows the position of the arguments so\nhere the first argument in the function\ncall is 10 and the first argument in the\nfunction definition is a so 10 is\nassigned to\na and second argument in the function\ncall is 20 and the second argument in\nthe function definition is b\nso 20 is assigned to\nb\nnow a is a a is equal to 10 and b is\nequal to 20 will be printed\nlet us see that\nso first we have to save this\narc 1\nso a is equal to 10 and b is equal to 20\nsee\nlet us interchange this one\n20\nand 10\nnow the first argument of function call\nis 20 and the first argument of function\ndefinition is yes so 20 is initialized\nto a and the second argument in the\nfunction call is 10 and the second\nargument in the function definition is b\nso 10 is assigned to b so if you print a\nand b we will get the result as 20 and\n10.\nlet us see that\nyes a is equal to one dn so blindly it\nwill follow the position of the\narguments and also the number of\narguments should be same\nthis is all about the required\narguments\nnow let us see the keyword arguments\nso as we have seen that in the keyword\narguments\nthe number of\ni mean\nthe assignment of values from the\nfunction call to function definition\nwill be done\nbased upon the names of a variable so we\nhave to give names of the variable see\nlet us start def\ndisplay\nb is equal to\nb\nlet us write the function called display\na is equal to 10\ncomma b is equal to 20\nnow let us save this\nr2\nso we'll get a a is equal to 10 and b is\nequal to 20 and if you change this one\nif you write a b is equal to 10 and\na is equal to 20 so even though the\nfirst argument in the function call is b\nthat is 10 it it will not be assigned to\nthe first variable of function\ndefinition that is a so here the\nassignment of values will be done\nbased upon the keywords that means names\ngiven to that particular variable so\nhere b is equal to 10 10 means in the\nfunction definition also it will be\nascended to b only\nso here we have interchanged the b and a\nso\npreviously a is the first argument in\nthe function call and b is the second\nargument in the function call now i have\njust\nreplaced the b and a so that b is the\nfirst argument and a is the second\nargument whereas coming to the function\nthis definition a is the first argument\nand b is the second argument even though\nwe will get the same result\nsee again we will get a is equal to 20 b\nis equal to 10\nright so\nso even though the second argument is a\ntheir first argument even the the\nmapping will be done based upon the\nnames of a variable\nhope you understood this one\nright so in the first one we are not\ngiving any names in the function call\nand here we have to give the names in\nthe function code\nnext coming to the third one\nthe third one is\nthe default arguments\nso some arguments will be having the\ndefault values that may or may not be\nincluded in the function call\nlet us see this the\ndisplay\nname is equal to abc\ncourse is equal to\nprint\nname is equal to\nonce again write the print statement\nname is equal to\ncourse is equal to\nwrite down the\nfunction name is equal to\nabc\ncourse is equal to\nm check\nonce again i will write here display\nname is equal to\nhur\nr3\nright\nsee here\nwe are passing two arguments in the\nfunction called the first function hall\nso here we are we have written two\nfunction calls with the same name but\nthe differences with the parameters so\nin the first function call we have\npassed two parameters that is name and\ncodes and the second function call we\nhave passed only one parameter with in\nthe absence of course so in the function\ndefinition we have written name is equal\nto two argument that is one one is name\nand another one is sports name is equal\nto abc and the course is equal to b tech\nso if you execute this statement so\nwhile executing this first function call\nthe name is equal to abc and courses\ncourse is equal to mtech will be printed\nname is equal to abc course is equal to\nmdx and\nwhile\nexecuting the second function call\ndisplay of name is equal to pka pqr here\nthere is an absence of\ncodes\nright so here only one argument is\npassed but in the function definition\nthere are two arguments so here course\nwill be acting as a\ndefault argument so in here in the\nfunction second function call we are\njust passing the name so the course will\nbe as a default argument it will be\nprinted so if you execute this one\nwell that\nname is good abc the second function\ncall is name is equal to pqr and the\ncourse is equal to btec\nhope you understood this one\nhere\nthe number of arguments in both the\nfunction call and the function\ndefinition need not be same and some\narguments will be acting as a default\nargument those arguments and need not be\nincluded in the function call\nhope you understood this\nlet us move on to the fourth one that is\nvariable length arguments\nso in the variable length arguments in\nsome situations user may not know how\nmany arguments should be passed in the\nfunction call so this can be\nsolved by including just a star\nas a prefix\nto the variable in the function\ndefinition\nso if you write the star in in front of\nthe variable in the function definition\nthat implies it is a sequence of\nvariables so its sequence of arguments\nso it can accept multiple\narguments a variable length of arguments\nright let us see that def\ndisplay\nso here it is a multiple\narguments so we have to use\nstar in front of the variable and write\ndown star subjects\nfor i in\nsubjects\nprint i\ni'm just printing the value of y\nand now i'm just passing the arguments\nin the function call now i am writing\nthe function called display\nwrite the\narguments\nlike\nbtech\nand take\nmca\nmba\nright here we are passing a four\narguments in the function call but in\nthe function definition we have\nwe have\nwritten only one argument that is also\nprefixed with star so if any variable if\nit's prefixed with the star it indicates\nthat it is a sequential variable that\nmeans it consists of more number of\nvalues\nso here the in the function call we are\npassing the four arguments and in the\nfunction definition we have written only\none argument\nprefixes with the star\nso this will accept all the four\narguments into the particular subjects\nnow if you execute this one\nif you execute this one\nsee all the four arguments have been\nprinted we take mtec mca and mba\nright so\nhere\nif you place the star in front of the\nvariable it indicates it will accept a\nmultiple arguments so this is the fourth\nargument\nso hope you understood this for all\nthese four\nuh types of arguments the first one is\nrequired argument uh\nkeyword argument default argument and\nthe variable length argument\nit's a very important concept\nrecursion so what is meant by recursion\nso a function calling itself is called a\nrecursion that means the function\ndefinition and the function call\ninside the function definition again we\nwill call the same function\nso that we call it as in recursion\nso function\ncalling itself\nthe self calling function right\nso here\nthe important thing is\nthere must be\ntwo cases one is\nbase case\nand the recursive case\nso we are saying that the recursion is\nfunction calling itself\nso every time if the function calls\nitself automatically it will be going to\nthe infinite recursive clause\nright so there will be no end\nso every recursion function\nshould terminate after some finite\nrecursive calls\nso for that purpose for that termination\nwe will write some base case\nfor terminating\nfrom\nrecursion so after finite number of\nsteps every recursion function should be\nterminated that means it should stop its\nrecursive calls\nso coming to the recursive case\nhere we will\nkeep on\ncalling the function itself\ncalling\nitself\nright so if you write an example so that\nyou will be clarified you will get a\ncalculation so the best example for this\nrecursion is\nfactorial\nright so why this factorial is an\nexample for recursion because\nsee let us take this 5 factorial\nwe can write this 5 factorial as\n5 into 4 factorial\nin the next step we can write it as\n5 into 4 into\n3 factorial\nwe can write it as\n5 into 4 into 3 into\n2 factorial\nwe can write the same as\n5 into 4 into 3 into 2\ninto 1 factor\nright\nso after finite number of steps it will\nreturn one it will return the result it\nwill return the result it will return\nthe result\nright\nso every time we are applying the factor\nthere\nso we will write the code just like\ncalling the same function\nsee let us write here\nthis is a very important thing to be\nremembered that is two cases one is base\ncase recursive case so base is for\nterminating from the recursion and\nrecursive case is calling itself\ni will write the program so that you\nwill be\nunderstood\nfactorial using recursion\ndef\nfactorial of\nn\nn is fast\nif\nn is equal to is equal to zero\nor n is equal to is equal to one\nso in the both cases the answer is one\nbecause zero factor is one one factor is\none\nso here we can write it as\nreturn\none\nyes\nrepeat the same procedure\nand return\nn into\nfactorial of n minus 1\nso that means\nfirst 5 so 5 not equal to 0 not equal to\n1 so\nthen return 5 into factor of 4\nin the next iteration 5 into 4 into\nfactorial of 3.\ni will trace it no problem\nright on here\nn is equal to nitrogen function\nn is equal to\n8 of\nright on the input function\nread the value\nenter\nand value\nnext\nresult is equal to\nfactorial of n\nand\nhere print\npresent so this will automatically print\nthe result let us trace it let us change\nit\nfirst\nn is equal to 5\nn is equal to 5\nright now\nn is equal to 5 result is equal to\nfactor of n\nso result is equal to\nfactorial of\n5\nso what is the output of this one\n5 5 is equal to 0 final is equal to 1 so\nit is false so it will return\nn into factor of 4\nit will return\n5\ninto\nfactorial of\n4\nright so it will return 5 into factorial\nof 4. now\nagain factor of 4 will be called so\nagain factor of 4 4 is equal to 0 4 is\nequal to 1 again it is false so n into\nfactorial of\nso this will be given as 4 into\nfactorial of\n3\n4 into factorial of\n3\nright next again factor of 3 is\ncalled\nthe function calling itself right factor\nof three three is equal to zero three is\nequal to one\nso condition false else path it will\nreturn\nthree into\nfactor of two\n3 into factorial of 2\nnext\nagain 2 2 is equal to 0 2 is equal to 1\nthat means\nagain it will return 2 into factor of 1\nso this will return 2 into\nfactorial of 1\nagain see\nfactor of 1 1 n is equal to 0 is equal\nto 1\n2 return 1 so this will form this\nfunction will return 1\nso what is the output for this one\n2 into 1 so\n2 2 will be written here\nso 2 into 3\n2 into 3 that is 6 will be written here\nnext here six will be written\nsix into four four i mean four into six\ntwenty four twenty four is written here\ntwenty four is five into twenty four so\nfive into twenty 24 is equal to 120\nso this will be\ngiven to result so in the result we will\nget 120\nhope you understood\nso here\nthis one is the\nbase case\nand this one is a\nrecursive case\nright so at some finite number of steps\nit will be terminated so from the\ntermination it will be returned to the\nprevious functions so here it will\nreturn 1 so 2 into 1 2 will be returned\nfrom this function 2 into 3 6 will be\nwritten from this function 6 into 4 24\nwill be written from this function 24\ninto 5 that is 120 will be written to\nresult so if you print result we will\nget the one part\nthe two things we have to remember in\nthis recursion is base case in recursive\ncase after some finite number of\nrecursive calls every recursion function\nshould be terminated\nright so here also there is no much\ncomplexity in the recursion just\nonly one complex thing is we have to\nidentify the base case and the recursive\ncase\nso if you\nfind this base case and recursive case\nthe logic will be very simple\nso hope you understood this one let's\nimplement this factorial program\nand the python interpreter\nmr recursion\nis\nthe function call calling itself\nright so in every recursion there will\nbe two cases one is\nbase case and another one is recursive\ncase the base case is to terminate from\nthe recursive calls and the recursive\ncase is for logic applied\nright let us implement this one\ndefinition\nfactorial\nof n we are passing only one\nnow write the base case if n is is equal\nto is equal to is equal to 0\nor n is equal to equal to 1\nsimply\nreturn 1\nelse\nwritten the recursive call that is\nfactorial of\nn minus 1 sorry\nfactorial of n into n minus 1\nright now write the\nfunction call\nn is equal to first read the\nn value\nafter that\nfunction call\nfactorial of\nn\npoint\nfactorial of\nis\npresent\nsave the program\nrun the program\nright\nso\nthis is a program simple program\nso this one is the base case\nwhere the recursive recursive call will\nbe terminated and this one is the\nrecursion function so factorial calling\nfactorial itself so every time n will be\ndecremented by one\nso these anonymous functions are also\ncalled as lambda functions\nthese functions are also called as\nlambda functions\nso because\nwhy these functions are called as\nanonymous functions because\nthese functions\ndo not\ndefine\nby\ndvf\nkeyword\nthis function is not defined by def\nkeyword\nand\nthese functions\nwill\nreturn\nexpression\nbut not value\nand this functions are one line\nfunctions\nthese functions can take\nany number of arguments\nany number of arguments\nright\nthese functions\ncannot access\nglobal variables\nso this is a wall view right\nand these functions will be defined\nby using\nlambda keyword so here in python\nprogramming\nso there is a keyword called lambda\nright so once go through the keywords\nconcept so that you will be\nclarified right so these functions these\nlambda or anonymous functions will be\ndeclared by using this lambda keyword\nand these functions will return\nexpression but not a value right so\nthese functions can take any number of\narguments it cannot access the global\nvariables and these are the one line\nfunctions\nsee let us see an example so that you\nwill be clarified so it's a very small\nconcept\nright have a learn here\nso we can assign this lambda function to\none variable and these\nfunctions\ndoesn't have\nany name\nso actually the user defined functions\nwill be having one name right so here\nthese lambda functions or anonymous\nfunctions will not having anything but\nthis lambda function can be assigned to\nsome variable\nif you want to add two numbers\nso we can write it as\nsum is equal to\nlambda\nx comma y\ncolumn x plus y\nso this can be written\ninitialize it to sum and the syntax\nfor this one is use the lambda\nfollowed by\narguments\ncolumn\nexpression\nthis one is the syntax lambda arguments\ncolumn expression these arguments were\nwritten by using separated by carbon\nso similarly sum is equal to lambda x\ncomma y\nx plus y\nso we can simply write\nprint\nsum is equal to\nsum of two comma three\nthis will automatically give the result\nas\n5\nright so here x y are the arguments and\nhere x plus y is the expression so\nthat's why we call it as a one line\nfunction\nand we can have any number of arguments\nin this lambda and only those arguments\ncan be used and it will return\nexpression but not a value so it will\nalways write an expression it doesn't\nreturn any value right so based upon the\nexpression the inputs will be applied\nand\ndoes not do not defined by using\ndf because here we are using the lambda\nand this cannot be accesses the global\nvariable so global variables cannot be\nused in this lambda function\nright and function does not have any\nname so this function doesn't have any\nname but this function can be assigned\nto a particular variable so hope you\nunderstood once again i am writing the\nsyntax here so syntax\nfor this one is\nlambda keyword\narguments\ncolon\nexpression\nand these arguments can be separated by\ncomma any number of arguments we can\ngive any number of arguments\nright\nso hope you understood the simple\nconcept that is anonymous functions or\nthe lambda functions\nright so\nhope you understood this one\nso in the previous session we have seen\nthe anonymous function that is lambda\nfunction\nso which is different from the uh\nnormal user defined function\nso here\nthe comparison of user defined function\nand this anonymous function means so\nhere in the anonymous function there\nwill be no name given for the function\nand\nit will always return an arithmetic\nexpression it will can take any any\nnumber of arguments and it may not use\nthese\nglobal variables so now let us implement\nthis lambda function\nso write the lambda function so here we\nwill not uh\ndefine or declare a function by using\ndef keyword here we will\ndeclare using\nlambda keyword\ni am just writing sum is equal to\nlambda lambda is one of the key word and\nwrite the expression\nsorry arguments\nso here the arguments can be written by\nseparated with the commas colon and\nwrite the write down the expression ax\nplus y\nnow read the inputs\na is equal to\nint off\nand the value of a\nb is equal to\nokay\ninput of\nenter the value of b\nnow write down the result\nprint\nsum is equal to\nsum of\na comma b so here sum is a lambda\nfunction see we can see that here the\nlambda function has been written and it\nis assigned to the variable sum\nso we can call this lambda function by\nusing the\nthe particular variable sum\nso in the print function i have written\nsum of a comma b where a and b have been\ntaken as a input values\nnow it will automatically this lambda\nfunction returns the\nexpression x plus y so this gives the\noutput of a plus b now let us\nsee the\nresult\nso it's prompting for a\nprompting for b now sum is equal to 30\nright so hope you understood his here\nthis is the single line function lambda\nfunction and it will it can we can give\nn number of way\narguments\nright separated with a comma and then\nexpression and this expression will be\nreturned and it is assigned to some\nvariable\nthe main advantage of implementing these\nfiles is in order to store the\noutput\nso\nso far\nwe have seen a number of basic\noperations and built-in methods where we\ncan't save the\noutput data\nwhereas in these files we can save the\noutput data\nso the first of all the definition of\nfile is nothing but it's a\ncollection of data\nit's a collection of data\nand there are two types of files one is\ntext file\nanother one is binary file\nright\nso we are on about this text file\nso let us see one by one so how to open\nor how to create a file and how to\nperform the reading and writing\noperations on a file\nso in this session let's have a look on\nhow to create a file and how to close a\nfile\nso before\napplying the reading operation or\nwriting operation on file first of all\nwe have to create a file and then we\nhave to open the file\nin one mode access mode and then we have\nto perform the reading or a writing\noperation and then\nthe user responsibility is to close the\nopen file\nso every open file should be closed\nafter its use\nthat means after its completion of\nreading and writing operation right now\nhow to create a file\nfor in order to create a file uh that\nwill be happened with the open function\nfile open function\nso in order to open a file we have to\ncreate one file pointer here we call it\nas a file object whereas in c language\nwe call it as a file pointer and here we\ncall it as a file object so we have to\ncreate a file object\nand then\ni mean we have to open a file and it\nshould be assigned to one file object\nsee\nfile creation can be done\nusing open\nfunction a syntax for opening a file\nis\nfile object\nis equal to\nopen so this open function will take two\narguments one is\nthe file name\ndot txt\ncomma second one is\naccess\nnode\nthe file name and access node\nso this file object we call it as\nfine pointer\nwhich points to the\ncontent of a file\nso immediately after creating a file\nthis file file pointer points to the\ncontent of the file\nright so\nin the first\nfirst step while opening the file we\nwill write the file name and\nafter opening a file\nuh the reading or writing will be done\nwith respect to this file object that\nmeans a file pointer itself so we will\nnot use this file name in the further\nfurther concepts i mean further\nreading or writing operations in\neverything we will use this file object\neven to close the file also we will use\nthis file object\nonly for opening the file we will use\nthis filename.txt\nright now\nbefore opening a file or before creating\na file let us see about these access\nmodes so how many ways we can open a\nfile access mode\nso after seeing that we we can go from\ncreation of a file\nso access modes\nlet us see the access modes\nso there are mainly three access modes\nin which the file can be opened the\nfirst one is\nread mode\nrate mode in this read mode\na file is open only for reading purpose\nonly for\nreading the content\nand second point\nimmediately after opening the file in\nread mode the file pointer points at the\nbeginning of the file\nbeginning of the file right so here let\nus see\nfile pointer fp is equal to\nopen off\none more thing\nthe open file if you want to open a file\nand read more compulsory the file should\nexist\nfile should exist\nbefore opening\nin\nread more\nright see let us take an example fp is\nequal to f is a file pointer\nopen\nlet us take some\nabc dot txt\nread more\nright so already abc is a text file\nso this is the text file\nabc dot txt\nand here we have\nsome data\nwelcome to the\nchannel\nright\nso if this file consists of this data\nwhenever you execute this one fp is\nequal to open abc.txtr\nthe file pointer will points at the\nbeginning itself\nfive pointer points at the beginning\nitself so after every iteration the file\npointer moves towards its left i mean\nright\nso it will be incremented by one and it\nwill be reading\nso if you want to read the data the file\npointer will move towards its right and\nit will uh rate the data from the file\nso whenever you open the file in red\nmode the file pointer will points at the\nbeginning itself and this file this in\nthis mode it is only for a reading\npurpose and the file should exist before\nopening in read mode this is all about\nthe raid mode right so next we will go\nwith the right mode\nright mode\nthis is\nonly for writing the content\nfile pointer points\nat the beginning of the file itself\nand here\nthe two things will be happening\ntwo things will be happened\nsee\nthe first thing\nif the file\nexists\nthen\nfile is opened\nand\nfive pointer\npoint set\nbeginning right\nif\nthe file\ndoesn't exist\nso if you want to\ni mean if you are opening a file in a\nright mode which doesn't exist\nthen\nnew file\nwill be created\nwith given file name\nthis is very important\nso it is\nin this mode only writing the writing\npurpose the i mean the file is open only\nfor the writing purpose and the file\npointer points at the beginning of the\nfile and here the two things will be\nhappen if the file exists then the file\nis open and five pointer points at the\nbeginning if file doesn't exist then a\nnew file will be created with a given\nfile name\nso this is the one process i mean this\nis the one\nway to create a file\nright see\nand\nand data\nwill be overwritten\nright so if the file exists then the\npoint points in the beginning and data\nwill be overwritten database written\nmeans if already the data is existed in\nthe file all the data will be erased\nwith the new data\nsee i will i will let me justify this\nstatement data will be overwritten why\nit will be over\nso\nas i have said the file pointer points\nat the\nbeginning\nlet us take f p is equal to\na b abc.txt\nw\nright already abc.txt is existing with\nsome content in the file and we are\nopening that file with\na w mode that means a right mode\nautomatically the file pointer points at\nthe beginning itself\nthe file pointer points at the beginning\nnow if you are writing the data all\nthese existing data will be overwritten\nso because the file point is already at\nthe beginning itself\nfrom here only the data will be\noverwritten\nright so whatever data that whatever the\ndata we are writing into the file that\ndata will be overwritten with the\nold data already existing data and if\nthe file doesn't exist with the given\nfile name then\nthe new file will be created with the\ngiven file name so this is what happened\nin\nwrite mode\nnext coming to the next one that is\nappend mode\nhappen more\nonly to happen and write the data into\nthe file right\nto append and write the data into a file\nand here also two things will be happen\nfile\nexists then\nfile is open and\nfile pointer\npoints\nat the end of the content\ninside\nif i\ndoesn't exist\nnew file will be created\nand\nfive pointer\npoints at\nbeginning\nright so here also two points will be\nhappen two things will happen file\nexists or file doesn't exist so if the\nfile existed then the file will be\nopened and the file pointer points at\nthe end of the content in the file so\nsee if you write\nif you open the cmc.txt now the file\npointer will be at this position\nright so whatever the data we are\nwriting\nthe data will be\nadded after the\nexisting content because the file\npointer is at the end of the file\nokay then second thing if the file\ndoesn't exist again here also the new\nfile will be created with the given file\nname and the file pointer points at the\nbeginning so if file doesn't exist new\nfile will be created and the file\npointer will find at the beginning so\nthe data will be right\nwritten\nthis is called append mode\nso\nthese are the three different modes the\nimportant modes append mode right mode\nand read mode so apart from these there\nare more number of modes\nso let me explain that one\nin a single word\nso main thing is\nread\nwrite\nhappen\nreading\nwriting\nappending\nor writing\nanything\nnext\nr plus\nw plus\na plus\nso this is for text files okay r plus\nmeans\nthis can be opened in both reading and\nwriting\nw plus this is also for both reading\nand\nwriting\nappend more this is also for both\nreading\nand appending\nright so all these are for\ntext files so all these are for\ntext\nfiles\nright now\nrb\nreading\nwb\nwriting\na b\nappending\nrb plus\nreading and writing\nwb plus\nhere also\nreading\nand\nwriting\na b plus\nappending\n[Music]\nand\nreading\nso all these are the modes for\nbinary files\nthese are the modes used for opening the\ntext files these are the modes used for\nopening the\nbinary files\nright\nwhatever it may be\nread more\nfive pointer\nokay\nbeginning\nright mode\nfile pointer\nat\nbeginning\nappend mode\nfile pointer\nat the\nend of\ncontent\nright\nso in order to for file creation\nthis this file creation can be happened\nin\ntwo ways one is if you open a file\nin append mode or you can open a file in\nright mode in both the cases a new file\nwill be created\nright\nso hope you understood all these things\naccess modes\nand remote right mode and append mode so\nin these two modes we can\ncreate a\nnew file\nwe can create a new file in both modes\nright mode and\nappend mode\nso these are the different access modes\nby using these access modes we have to\nopen a file and after opening the file\nwe have to perform the reading operation\nand writing operation and immediately\nafter completion of this reading and\nwriting it is explicitly the user\nresponsibility to close the open file so\nevery open file should be closed by\nusing this file point itself\nnow\nhope you understood this access moves\nso first step\nfive pointer is equal to open\nfile name\ndot txt\naccess mode\nlet it be write or read or anything\nand then the second step\nreading\nor\nwriting operations\naxis mode so that can be anything\nright\nnext third we have to close it\nfile object\ndot\nclose\nso this function will close the open\nfile\nso every open file it must be closed so\nexample\nfp is equal to open\nabc dot txt\nin right mode\nsome writing operation\nright\nthen immediately after the writing\noperation we have to close the file\nwith respect to this file pointer so if\nyou write this file pointer dot close\nthis file will be closed\nso in order to open two files we require\ntwo file pointers so one file pointer is\nnot sufficient for opening two files\nso if you want to open the two files one\nis in read mode and another one is write\nmode we have to use the two file\npointers\nright\nso this is the syntaxes for file open\nand file close so in this session we\nhave seen how to create a file\nwhat are the different access modes and\nthen how to close a file\nright so\nfor reading operation\na file should be opened in\nread mode\nfor writing operation\na file should be opened in\neither write mode or\nappend mode\nso in the right mode\nif file exists\ncontent will be overwritten\nso all the previous content will be\noverwritten\na file doesn't exist\nnew file will be created\nso in this append mode\nthe same\nif the file\nexists pointer point set\nend of content\nif the file doesn't exist\nnew file will be created\nright so a file can be created\nin two modes either either right or\neffect so after opening the file\nthen we have to perform the reading and\nwriting operations\nsee let us see the reading operation\nor first we will see the writing\nwriting operation\nso there are two methods one is\nright\nanother one is\nright lines\nright function right lines function\nright so the name itself indicates this\nright function will writes a single line\nwhereas right lines function will\nwrite the multiple lines\nsee the syntax is so before going to\nimplement these two right lines or write\nfunction we have to open the file\nso we have seen the syntax in the\nprevious session\nfile object is equal to open\nsome abc dot txt\nand in\nright mode\nright more\nso if you want to write this i mean if\nyou want to write the content into a\nfile we have to implement this one by\nusing the file pointer f1\ndot\nright\nand this will take one argument that is\nstring so whatever\nwe want to write into a file that should\nbe written as an argument\nright so always it will return the\nstring it will write the string into\nyour file\nso string consists of\nalphabets\nnumbers\nsymbols\nand everything will becomes under this\nstring\nright so anything can be\nwritten into a file\nas an argument so we have to pass it an\nargument see\nexample\nfirst i will write i will open a file f\nopen\nabc.txt\nright\nnext f1 dot right\nso we can we have to write the string\ndirectly\nso automatically this content will be\nreturned into abc dot txt\nright\nso this is the\nfirst i mean\nin order to write the content\nof one line so if you do not consider\nthe new line character right so whereas\nif you want to write the\nmultiple lines\ngo with this one\nso\nhere also we have to implement this by\nusing the five pointer\nso right lines\nf1 dot right length so here let us see\nthe example cc f1 dot\nright lines\ngive the list of lines\nso first of all we have to write the\nlines in a list and the list should be\npassed in passed as an argument to write\nlines see example\nf1 is equal to\nopen\nabc.txt\nwrite mode\nnext\nlines is equal to\ni am creating a\nlist\nhello\nwelcome\ntitle programming so here i have written\nthree elements as a strings and these\nthree elements are written in a list\ncalled lines so you should pass these\nlines to the right length\nnow here write f1 dot\nright lines off\nso this will automatically write all\nthese\nthree\nlines\nright hope you understood this one\nokay so these are the two methods to\nwrite the data\ninto a\nfile\nnow let us see the reading operations\nhere\nsimilar to the write function\nthe reading operations are also of three\ntypes\nand we have to implement this reading\noperation by means of this\nfile point so\nfirst of all in order to read the\ncontent of a file we have to open that\nfile in read mode\nso first one is\nread function\nso we have to implement f1 dot\nand\nread here the argument is\nbit positions the one argument it will\ntake it will take a bit positions as an\nargument so\nhere whatever the bits you have\nmentioned\nthose bits will be displayed on the\nscreen for example\nthe text\nis hello\nwelcome\nand if you are trying to read\nfine\nf1 dot read file so this is the content\navailable in\nabc dot txt so i have opened this\nabc.txt in read mode and then\nso whenever you you\nopen the file in read mode the file\npointer will be\nat the starting position so f1 dot read\nof 5\nthat means from the starting position 5\nbits will be\nread and it will be displayed on the\nscreen so 5 0 1 2 3 4 5 so the output\nfor this one is\nhello\nand\nimmediately after executing this one the\nfile pointer will be at this position\nbecause already\n5 has been displayed again if you write\none more statement like\nread five\nfrom here itself it will count five so\nspace is also a character\none two three four\nso\nthis output is space\nw e l\nsee\nso one two three four five right this\nwill be printed now after executing this\none\nthe profile pointer will be at whoa\nfive pointer will be at oh so if you\nwrite again the statement f read of\nthree\nthis will give o m e\nright so every time the operation is\nexecuted the file pointer will be moved\ntowards its right side\nright so unless you close the close the\nfile and open the file the file pointer\ndoesn't comes to the beginning of the\nfile\nso here this bit positions is an\noptional thing so if you mention here\nthe big positions that many bit\npositions will be displayed or if you\nare not mentioning here\nif if you are still just writing as f1\nnot read this will return everything all\nthe content of the file hello\nright\nso this position this bit positions is\noptional one so we can specify the\npositions how many characters we need to\nread or\nif you want to read everything just we\ncan\nignore this bit position just we can\nwrite f1 dot read\neverything will be printed\nif you should display some number that\nmany characters will be printed and the\nfile pointer starts moving from its\nright from the beginning to its right\nthis is about the read\nnext\nred line\nsee\nthe second one is\nred line so let it be\nhere\nthere are three lines hello welcome\npython programming\nnow if you\nopen this abc dot text in read mode and\nif you are trying to read implement this\nread line\nso whenever we open this file in read\nmode the file pointer will be at the\nstarting position\nright starting position so if you\nimplement this read line the first line\nthe content of the first line will be\ndisplayed so hello will be printed so\neverything in that first line everything\nin the first line so after executing\nthis one the file pointer moves to the\nsecond line because every content all\nthe content of first line is displayed\nif again if you are\nimplementing this read line in the same\nprogram without closing the file\nright so if you close your file once and\nif you open the file automatically the\nfile pointer again points at the\nbeginning\nso unless you close the file the file\npointer doesn't changes its position\nright so here after executing this first\nred line the profile pointer will be at\nthe second line so again if you\nexecute this red line it will print\nwelcome\nnow the file pointer moves to the\nbeginning of the third line because\nsecond line the complete content of the\nsecond line have been printed next again\nif you implement\nthe same thing redline once again the\nthird line will be printed\nthe third line will be printed right\nso\nread line means\nreading the entire line\ncontent of\nsingle line\nso whatever the content having in the\nline that will be printed\nso this is it doesn't take any argument\nright it's an argument list it doesn't\ntake any argument\nnext the third one is\nsimple thing that is plural\nread lines\nred lines\nso it read lines means reading the\ncontent of\nall lines\nso f1 dot\nred lines so it's in multiple lines\nright\nso this implementation of this function\nwill return\neverything hello\nwelcome\nso all the lines will be printed\nright so hope you understood this one\nthen\nlet us see an example\nsuggest we will write a program\nto write the content and to read the\ncontent\nfirst\nin order to write the content we need\none\nfile pointer\nso first we have to create a file\nso f1 is equal to\nopen\nright let's take the same file name\nabc.txt\nright so in right mode that means a new\nfile will be created so immediately\nafter executing this one\nso\none file will be created\none file will be created with abc dot\ntxt and the pointer will be at the\nbeginning right\nnext\nf1 dot right\nwelcome to\nokay\nso after executing this\nnow it will be written\nwelcome to\npython now the file pointer points at\nthis position\nright\nnow f1 dot\nclose\nso\nautomatically the file pointer has been\nclosed again open the file pointer in a\nread mode\nopen\nabc dot txt\nread mode automatically this will be\nin red mode and the five pointer points\nat this position\nnext\nso if you write f1 dot read\nit will read everything but it will not\nbe printed on the screen because it will\nbe in buffer\nso we have to assign a variable and then\nwe can print that variable\nin\nso that the content will be displayed on\nthe screen or directly we can call this\nin the print function\nso print\nf1 dot\nright so from the beginning itself\neverything will be printed in the output\nscreen everything will be printed so\nwelcome\nto\npython will be printed\nright so hope you understood this one\nso let's stop here so in this session we\nhave seen the reading and writing\noperations\non files reading or writing data on\nfiles so in that we have seen the write\nfunction and write lines\nand read readline and read lines\nso here the major important thing is\nthe position of the file pointer so\nunless you close the file the positive\nthe position of the file pointer will\nnever come to the beginning of the file\nright so the file pointer keep on\nexecuting the statement the file pointer\nalso moves from the starting position to\nthe towards its right\nso the main advantage of file is to\nsave the output\nright see\nlet us\nwrite the\nprogram\nso in order to implement this file first\nthat can be done by using one file\npointer let us take f1 as a file pointer\nf1 is equal to open\nsum\nhello dot txt is a file name\ni am opening in\nwrite mode\nhello.txt\nin write mode so after implementing this\none uh\none i mean the text file has been\ncreated and the file pointer points at\nthe beginning of the file\nnow start writing\nf1 dot write\nwrite the content\nso f1 dot write this right function will\ntake only one argument that is a string\nso whatever the string we have to enter\ninto a file right into a file that must\nbe written here so after executing this\nthe file i mean the data has been\nwritten now close the file f1 dot close\nso let us execute and check whether the\nfile has been created with a given text\nor not excuse me\nhello dot py ah sorry\nfile one dot py\nnow i will execute this one\nrun this file so nothing has been\nprinted but\nwe have to check whether the file has\nbeen created or not so now the question\nis where the file has been created so in\norder to check whether the file has been\ncreated or not just import the\nos\nand write\nsorry\nos dot\nget\ncwd\nso if you implement this one we can get\nthe current working directory that means\nwhere these files has been saved so gng\npython programs now our file has been\ncreated in that particular location\nlet us check\nin g\nthere is a folder called\npython programs\nsee here we can find the text file hello\nsee hello.txt\nwelcome to python programming just now\nwe have created the file right\nsee right\nnow let us\nread the file\nnow again open\nthe file\nin read mode\nnext f1 dot\nread\nso it will read just it will read the\ndata from the file and it will be holded\nin the buffer if you write the print\nfunction it will display on the screen\nprint\nf1 dot read\nrun this program save\nso\nthe data has been i mean that the\ncontent which we have\nwhich is available in that particular\nfile has been printed on the screen\nwelcome to python programming and if you\ngive the argument\nfile\nso only five characters will be printed\nhope you understood this one\nthen again\nif you print\nf1 dot\nread of\nfour\nso well\nwlco mv space t because so after\nexecuting the first statement the file\npointer is at the sixth position so five\npositions has been uh written to the\nscreen and the the file pointer points\nto the sixth position from the sixth\nposition the four characters will be\nprinted here\nso unless you close the file the file\npointer never goes to the beginning of\nthe file\nso f1 dot\nclose\nright\nnow\nlet us see the multiple lines\nnew file f1 is equal to\nopen\nsome\nm lines\ndot txt\nw\nf1 dot sorry\nlines\nis equal to\ngive the list\nwelcome\ngive the slash new character\nyes\npython\nprogramming\nso i have written three statements in a\nlist\nright now i will write this\nlines\nf1 dot right lines of lines\nthen f1 dot close\nand let us execute this one\nfile two\nexecute this one so let us check whether\nthe file has been created with the given\ntext or not\nso if you see here m lines dot txt so\nthree lines has been created so if you\nobserve here the three lines has been\ncreated\nright\nnow let us read the same data\nagain f1 dot\nsorry sorry f1 is equal to open\nm lines dot txt\nread mode\nf1 dot\nread line\njust i am executing the red line f1 dot\nplus\njust i will i will write it in a print\nso that\nit will be displayed on the screen\nso welcome this is the first line so if\nyou implement the same thing\nso now the file pointer will be in the\nsecond line\nsee welcome python two lines have been\nprinted\nif you implement this\nwith the lines\nread lines\nnow everything will be printed\nwelcome python programming\nthe list completely will be printed\nright\nso hope you understood this one now let\nus\ntry with the append mode if you append\none if you open this m line start text\nin append one append mode and try to\nwrite\none more line\nso after executing this one just we will\ncheck in the program itself\nsay m lines dot txt so there is the\nfourth line that is hello\nso that means in append mode the file\npointer points at the end of the file\nand of the content of the file\nso whenever you are writing the data\nthat data will be appended so without\noverwriting the old data so the previous\ndata will be remain same and the new\ndata will be appended from the end of\nthat particular file\nso if you read it one\nf1 is equal to\nopen\nm lines dot txt\nread more\nprint\nf1 dot read\nf1 dot\nclose\nso if you write if you execute this one\nall the complete\ncontent will be\ndisplayed on the\nscreen\nso hope you understood this simple\nfiles programs\nso read mode append mode and write mode\nand read read function read line read\nlines write function and write lines"
  }
]